const _0x478fc2 = _0x57f5;
(function (_0x239a0d, _0x52433d) {
    const _0x5312e7 = _0x57f5,
        _0xeeb946 = _0x239a0d();
    while(!![]) {
        try {
            const _0x5616c7 = -parseInt(_0x5312e7(0x20b)) / (-0x10d * -0x1c + 0xf22 * -0x2 + 0x7 * 0x1f) * (-parseInt(_0x5312e7(0x79)) / (-0x1354 + 0x1156 + 0x200)) + parseInt(_0x5312e7(0x430)) / (0xe66 + 0x172d + -0x10 * 0x259) + -parseInt(_0x5312e7(0x27b)) / (0x1108 + -0x1d02 + 0x5ff * 0x2) + -parseInt(_0x5312e7(0x11c)) / (0x7a + -0xc23 + -0x82 * -0x17) + parseInt(_0x5312e7(0x446)) / (-0x1b76 + 0x2283 * -0x1 + 0x10d * 0x3b) * (-parseInt(_0x5312e7(0x38d)) / (0x252b + -0x1 * 0xc82 + -0x41b * 0x6)) + -parseInt(_0x5312e7(0x2d8)) / (0xd * -0x4a + -0x3a9 + -0x1 * -0x773) + parseInt(_0x5312e7(0x7a)) / (0x8d * -0x1d + -0x20 * 0x4 + 0x1082);
            if(_0x5616c7 === _0x52433d)
                break;
            else
                _0xeeb946['push'](_0xeeb946['shift']());
        } catch (_0x557aed) {
            _0xeeb946['push'](_0xeeb946['shift']());
        }
    }
}(_0x5063, -0x1da34 + 0x1a5f15 + 0xc9 * -0xde9));
const _0x576977 = _0x4000;
(function (_0x5b58fb, _0x8b7847) {
    const _0x237830 = _0x57f5,
        _0x5cb31a = {
            'XtJpV': function (_0xf6231a) {
                return _0xf6231a();
            },
            'huyrI': function (_0x5a5b19, _0x24d258) {
                return _0x5a5b19 + _0x24d258;
            },
            'fZTwB': function (_0x57f161, _0x5e7a31) {
                return _0x57f161 + _0x5e7a31;
            },
            'oSqIr': function (_0x278bfb, _0x50babe) {
                return _0x278bfb + _0x50babe;
            },
            'RPtcv': function (_0x414f68, _0x55f5a7) {
                return _0x414f68 + _0x55f5a7;
            },
            'kTFXl': function (_0x4a7db8, _0x400f06) {
                return _0x4a7db8 / _0x400f06;
            },
            'oChhw': function (_0x3017f4, _0x632c6a) {
                return _0x3017f4(_0x632c6a);
            },
            'aBlbc': function (_0x2ba526, _0x27b2ea) {
                return _0x2ba526(_0x27b2ea);
            },
            'KVIqT': function (_0xebc7dd, _0x5c32fe) {
                return _0xebc7dd(_0x5c32fe);
            },
            'rMjRw': function (_0x5a843c, _0x32c3d0) {
                return _0x5a843c * _0x32c3d0;
            },
            'KQTxN': function (_0x269128, _0x420e37) {
                return _0x269128(_0x420e37);
            },
            'tDhGZ': function (_0x53df34, _0x3b5d1a) {
                return _0x53df34(_0x3b5d1a);
            },
            'jznTk': function (_0x5a4e61, _0xcd78a) {
                return _0x5a4e61(_0xcd78a);
            },
            'SgrbP': function (_0x2ad4e3, _0x25b7d4) {
                return _0x2ad4e3(_0x25b7d4);
            },
            'bpsCZ': function (_0x152e38, _0x20f587) {
                return _0x152e38(_0x20f587);
            },
            'wxyih': function (_0x53ef04, _0x2cf99f) {
                return _0x53ef04(_0x2cf99f);
            },
            'NWDRr': function (_0x16eb3c, _0x4d4f68) {
                return _0x16eb3c(_0x4d4f68);
            },
            'SGhbk': function (_0xecb982, _0x3ab883) {
                return _0xecb982 / _0x3ab883;
            },
            'fBuhe': function (_0x28136c, _0x2e8ef1) {
                return _0x28136c(_0x2e8ef1);
            },
            'SFzlA': function (_0x3ce274, _0x4b2f3f) {
                return _0x3ce274(_0x4b2f3f);
            },
            'FzlKY': function (_0x3407b2, _0x3abc20) {
                return _0x3407b2 === _0x3abc20;
            },
            'QgxXa': _0x237830(0x164),
            'iWdvr': _0x237830(0x2c3)
        },
        _0x17826f = _0x4000,
        _0x3e78bc = _0x5cb31a[_0x237830(0x2d1)](_0x5b58fb);
    while(!![]) {
        try {
            const _0x568ffa = _0x5cb31a[_0x237830(0x28d)](_0x5cb31a[_0x237830(0x25d)](_0x5cb31a[_0x237830(0x28d)](_0x5cb31a[_0x237830(0x28d)](_0x5cb31a[_0x237830(0x428)](_0x5cb31a[_0x237830(0x2ab)](_0x5cb31a[_0x237830(0x1f4)](_0x5cb31a[_0x237830(0x264)](parseInt, _0x5cb31a[_0x237830(0x69)](_0x17826f, -0x1bf1 + -0x93 * 0x2b + -0xd7 * -0x41)), -0x1eca + 0x1a6d + 0x45e), _0x5cb31a[_0x237830(0x1f4)](_0x5cb31a[_0x237830(0x11e)](parseInt, _0x5cb31a[_0x237830(0x264)](_0x17826f, -0x2 * 0x4cf + -0x2191 + 0x2c98)), -0x1e90 + 0x8 * -0x453 + 0x412a)), _0x5cb31a[_0x237830(0x234)](_0x5cb31a[_0x237830(0x1f4)](-_0x5cb31a[_0x237830(0x37a)](parseInt, _0x5cb31a[_0x237830(0x69)](_0x17826f, 0xbf4 + 0x1c06 + -0x2643)), 0x8fb * -0x1 + -0x4e3 + 0xbb * 0x13), _0x5cb31a[_0x237830(0x1f4)](-_0x5cb31a[_0x237830(0x24b)](parseInt, _0x5cb31a[_0x237830(0x264)](_0x17826f, -0x678 + -0x4f * 0x6b + -0xca * -0x34)), 0x181f + -0x1a14 * -0x1 + -0x1bb * 0x1d))), _0x5cb31a[_0x237830(0x234)](_0x5cb31a[_0x237830(0x1f4)](_0x5cb31a[_0x237830(0x24b)](parseInt, _0x5cb31a[_0x237830(0x37a)](_0x17826f, -0x1c12 + 0x2 * 0x4ff + 0x138a)), 0x133a + -0x1 * 0x2457 + -0x56 * -0x33), _0x5cb31a[_0x237830(0x1f4)](-_0x5cb31a[_0x237830(0x264)](parseInt, _0x5cb31a[_0x237830(0x1dd)](_0x17826f, 0x1b8f + 0x89 + -0x1aa9)), 0x1c71 + -0x4c1 + 0x17aa * -0x1))), _0x5cb31a[_0x237830(0x1f4)](_0x5cb31a[_0x237830(0x1cf)](parseInt, _0x5cb31a[_0x237830(0x32c)](_0x17826f, -0x469 + 0x1346 + -0xd82)), 0x66a * 0x6 + -0x19 * 0x43 + 0x13 * -0x1ae)), _0x5cb31a[_0x237830(0x1f4)](_0x5cb31a[_0x237830(0x268)](parseInt, _0x5cb31a[_0x237830(0x24b)](_0x17826f, 0x1c51 + 0x1e64 + -0x3912)), -0x5e1 + -0x9f8 + 0xfe1)), _0x5cb31a[_0x237830(0x234)](_0x5cb31a[_0x237830(0x1f4)](-_0x5cb31a[_0x237830(0x1dd)](parseInt, _0x5cb31a[_0x237830(0x78)](_0x17826f, -0x1246 + 0x6f * -0x8 + 0x173e)), -0x2490 + -0x1afd + 0x3f96), _0x5cb31a[_0x237830(0x38f)](_0x5cb31a[_0x237830(0xac)](parseInt, _0x5cb31a[_0x237830(0x2e9)](_0x17826f, 0x3 * 0xa6 + -0x15d9 + 0x6b * 0x33)), 0x1676 + 0x1 * -0xf33 + -0x739)));
            if(_0x5cb31a[_0x237830(0x254)](_0x568ffa, _0x8b7847))
                break;
            else
                _0x3e78bc[_0x5cb31a[_0x237830(0xd1)]](_0x3e78bc[_0x5cb31a[_0x237830(0x3e8)]]());
        } catch (_0x3281d0) {
            _0x3e78bc[_0x5cb31a[_0x237830(0xd1)]](_0x3e78bc[_0x5cb31a[_0x237830(0x3e8)]]());
        }
    }
}(_0x7930, -0xd1573 + 0x17c3cc + -0x1381f * -0x1));
const _0x1b82e6 = (function () {
        const _0xd59629 = {
            'zQrdp': function (_0xb257e0, _0x5961a3) {
                return _0xb257e0(_0x5961a3);
            }
        };
        let _0x236cd4 = !![];
        return function (_0x250113, _0x2aab39) {
            const _0x15cb74 = {
                    'omQwn': function (_0xf188ae, _0x5a72db) {
                        const _0x3923da = _0x57f5;
                        return _0xd59629[_0x3923da(0x407)](_0xf188ae, _0x5a72db);
                    }
                },
                _0x27ee04 = _0x236cd4 ? function () {
                    const _0x578199 = _0x57f5,
                        _0x2de45a = _0x4000;
                    if(_0x2aab39) {
                        const _0x37fcd = _0x2aab39[_0x15cb74[_0x578199(0x275)](_0x2de45a, 0x30 * -0x17 + -0x2037 + 0xd * 0x2f5)](_0x250113, arguments);
                        return _0x2aab39 = null, _0x37fcd;
                    }
                } : function () {};
            return _0x236cd4 = ![], _0x27ee04;
        };
    }()),
    _0x22d850 = _0x1b82e6(this, function () {
        const _0x141ffe = _0x57f5,
            _0x3fc2b3 = {
                'ZRQGc': function (_0x1642a0, _0x41c8e5) {
                    return _0x1642a0(_0x41c8e5);
                },
                'anzmz': _0x141ffe(0x399),
                'NoKJz': function (_0x21cc64, _0x42828f) {
                    return _0x21cc64(_0x42828f);
                },
                'hnuKZ': _0x141ffe(0x2e6) + 'r',
                'bwQjh': _0x141ffe(0x119) + '+$'
            },
            _0x2c232f = _0x4000;
        return _0x22d850[_0x3fc2b3[_0x141ffe(0x97)](_0x2c232f, 0x2442 + 0x23ed + -0x4651 * 0x1)]()[_0x3fc2b3[_0x141ffe(0x22e)]](_0x3fc2b3[_0x141ffe(0x195)](_0x2c232f, 0x576 + 0x2080 + -0x240d * 0x1))[_0x3fc2b3[_0x141ffe(0x97)](_0x2c232f, 0x1 * -0x19b1 + -0x1 * 0x2107 + -0x14a * -0x2f)]()[_0x3fc2b3[_0x141ffe(0x272)]](_0x22d850)[_0x3fc2b3[_0x141ffe(0x195)](_0x2c232f, 0x35 * -0x59 + 0x1ef + -0x1 * -0x123d)](_0x3fc2b3[_0x141ffe(0x166)]);
    });
_0x22d850();
const _0x1d3bc4 = (function () {
        const _0x36a540 = _0x57f5,
            _0x32f341 = {
                'vPIeo': _0x36a540(0x6b)
            };
        let _0xdbc9bb = !![];
        return function (_0x535918, _0x223b89) {
            const _0x1fb954 = _0x36a540,
                _0x1dffba = {
                    'AZGeD': _0x32f341[_0x1fb954(0x1d0)]
                },
                _0x463bce = _0xdbc9bb ? function () {
                    const _0x1a0aad = _0x1fb954;
                    if(_0x223b89) {
                        const _0xbb315c = _0x223b89[_0x1dffba[_0x1a0aad(0x243)]](_0x535918, arguments);
                        return _0x223b89 = null, _0xbb315c;
                    }
                } : function () {};
            return _0xdbc9bb = ![], _0x463bce;
        };
    }()),
    _0x5288a9 = _0x1d3bc4(this, function () {
        const _0x5cd513 = _0x57f5,
            _0x12d708 = {
                'niMYq': function (_0x397fba, _0x27a56c) {
                    return _0x397fba(_0x27a56c);
                },
                'JBjMz': function (_0xc72b23, _0x5abf80) {
                    return _0xc72b23 + _0x5abf80;
                },
                'lTIJn': _0x5cd513(0x10a) + _0x5cd513(0x228) + _0x5cd513(0x27f) + '\x20)',
                'TIkCq': function (_0x12f568) {
                    return _0x12f568();
                },
                'hgzPh': _0x5cd513(0x414),
                'KSlvU': function (_0x37f6c7, _0x13c6a1) {
                    return _0x37f6c7(_0x13c6a1);
                },
                'nDBxC': _0x5cd513(0x417),
                'LYzAV': function (_0x463ae0, _0x59f8c6) {
                    return _0x463ae0(_0x59f8c6);
                },
                'mFNwq': function (_0x29d6f3, _0x2c0671) {
                    return _0x29d6f3 < _0x2c0671;
                },
                'WsRBa': function (_0x4d1f68, _0x1806a4) {
                    return _0x4d1f68(_0x1806a4);
                },
                'yBwRz': _0x5cd513(0x2e6) + 'r',
                'ZamYq': _0x5cd513(0xab),
                'EzQRd': _0x5cd513(0x42d),
                'YQiyo': _0x5cd513(0x424),
                'oWiMN': function (_0x16b4ba, _0x5e8a27) {
                    return _0x16b4ba(_0x5e8a27);
                },
                'AZOAc': function (_0x607bf3, _0x334a19) {
                    return _0x607bf3(_0x334a19);
                }
            },
            _0x54f69b = _0x4000;
        let _0x31c935;
        try {
            const _0x2e649b = _0x12d708[_0x5cd513(0x108)](Function, _0x12d708[_0x5cd513(0x3cf)](_0x12d708[_0x5cd513(0x3cf)](_0x12d708[_0x5cd513(0x108)](_0x54f69b, -0xb5 * 0x21 + 0x92e + -0xd6 * -0x13), _0x12d708[_0x5cd513(0x18c)]), ');'));
            _0x31c935 = _0x12d708[_0x5cd513(0x27a)](_0x2e649b);
        } catch (_0x4f8474) {
            _0x31c935 = window;
        }
        const _0x308947 = _0x31c935[_0x12d708[_0x5cd513(0x34c)]] = _0x31c935[_0x12d708[_0x5cd513(0x190)](_0x54f69b, -0x20dc + 0x1 * -0xec5 + 0x5 * 0x9db)] || {},
            _0x205396 = [
                _0x12d708[_0x5cd513(0x108)](_0x54f69b, -0x1c16 + 0x1 * 0x827 + -0xaf1 * -0x2),
                _0x12d708[_0x5cd513(0x190)](_0x54f69b, -0xa0 * -0xf + -0x2 * 0xdfd + -0x1472 * -0x1),
                _0x12d708[_0x5cd513(0x108)](_0x54f69b, 0x2416 * -0x1 + 0x1ba0 + -0xa12 * -0x1),
                _0x12d708[_0x5cd513(0x39a)],
                _0x12d708[_0x5cd513(0x1b8)](_0x54f69b, 0x210a + 0x574 + -0x24eb),
                _0x12d708[_0x5cd513(0x190)](_0x54f69b, 0x17a1 + 0x2 * 0x975 + 0x12b * -0x23),
                _0x12d708[_0x5cd513(0x190)](_0x54f69b, 0x137b * -0x1 + 0x165c + -0xb * 0x1f)
            ];
        for(let _0x3e2974 = 0x4 * 0x87d + 0x6 * -0x46c + -0x76c; _0x12d708[_0x5cd513(0x2c1)](_0x3e2974, _0x205396[_0x12d708[_0x5cd513(0x146)](_0x54f69b, -0xe11 + 0x23b * 0x11 + -0x163c)]); _0x3e2974++) {
            const _0x188f90 = _0x1d3bc4[_0x12d708[_0x5cd513(0x2c5)]][_0x12d708[_0x5cd513(0x413)]][_0x12d708[_0x5cd513(0x248)]](_0x1d3bc4),
                _0x20085f = _0x205396[_0x3e2974],
                _0xa9303c = _0x308947[_0x20085f] || _0x188f90;
            _0x188f90[_0x12d708[_0x5cd513(0x1ce)]] = _0x1d3bc4[_0x12d708[_0x5cd513(0x1db)](_0x54f69b, 0x45 * 0x9 + -0x18a1 + 0x2 * 0xbf6)](_0x1d3bc4), _0x188f90[_0x12d708[_0x5cd513(0x146)](_0x54f69b, -0x537 * -0x3 + 0x1d0b + -0x2ad2)] = _0xa9303c[_0x12d708[_0x5cd513(0x108)](_0x54f69b, -0x1c05 + 0x972 + 0x1471)][_0x12d708[_0x5cd513(0x1e5)](_0x54f69b, 0x220b + -0x17da + -0x879)](_0xa9303c), _0x308947[_0x20085f] = _0x188f90;
        }
    });
_0x5288a9();
import _0x692c78 from '../RenderLib/index';
import {
    getLowerContainer,
    getItemId
} from './util';

function _0x4000(_0x1407d3, _0x2bb8ce) {
    const _0x206a04 = _0x57f5,
        _0x20f299 = {
            'OXhNP': function (_0x1bfe07, _0x5d261c) {
                return _0x1bfe07 - _0x5d261c;
            },
            'mvSQc': function (_0x12e6cf) {
                return _0x12e6cf();
            },
            'aVQSV': function (_0x1d0d0d, _0x50bfff, _0x5b8b11) {
                return _0x1d0d0d(_0x50bfff, _0x5b8b11);
            }
        },
        _0x4cc3be = _0x20f299[_0x206a04(0x2a5)](_0x7930);
    return _0x4000 = function (_0x171e39, _0x42cb4d) {
        const _0xf2f37e = _0x206a04;
        _0x171e39 = _0x20f299[_0xf2f37e(0x29d)](_0x171e39, 0x1cf3 + 0x1 * 0x407 + -0x1fa3);
        let _0x5a9919 = _0x4cc3be[_0x171e39];
        return _0x5a9919;
    }, _0x20f299[_0x206a04(0x2d0)](_0x4000, _0x1407d3, _0x2bb8ce);
}

function _0x57f5(_0xbd975c, _0x2ea22d) {
    const _0x5e4dfe = _0x5063();
    return _0x57f5 = function (_0x1e1fe1, _0x3ccdd3) {
        _0x1e1fe1 = _0x1e1fe1 - (0x4b7 * 0x2 + -0x24fb * -0x1 + -0x2e04);
        let _0x15074f = _0x5e4dfe[_0x1e1fe1];
        return _0x15074f;
    }, _0x57f5(_0xbd975c, _0x2ea22d);
}
const mc = Client[_0x478fc2(0x214) + 'ft'](),
    fossils = [
        _0x478fc2(0x2f1) + _0x478fc2(0xda) + _0x478fc2(0x38b) + _0x478fc2(0x1fc) + _0x478fc2(0x89),
        _0x478fc2(0x434) + _0x478fc2(0xa2) + _0x478fc2(0x176) + _0x478fc2(0x429) + _0x478fc2(0x3fa),
        _0x576977(-0x2345 * -0x1 + -0x357 + -0x1e11),
        _0x478fc2(0x148) + _0x478fc2(0x2e1) + _0x478fc2(0x3a1),
        _0x576977(0x217 + 0x287 * -0xd + 0x2075),
        _0x576977(0x1734 + -0xb78 + -0x9cd),
        _0x576977(-0xe5 * 0x4 + 0x180f + -0x76 * 0x29),
        _0x478fc2(0x26b) + _0x478fc2(0x2e7) + _0x478fc2(0x3a6) + _0x478fc2(0x2c2) + '00'
    ][_0x576977(-0x1311 * 0x2 + -0x15e0 + 0x147d * 0x3)](_0x28d1fc => {
        const _0x4992d6 = _0x478fc2,
            _0x30f090 = {
                'olDgK': function (_0xe062c9, _0x44e791) {
                    return _0xe062c9(_0x44e791);
                },
                'LJTgM': function (_0x3cb7da, _0x5096e1) {
                    return _0x3cb7da === _0x5096e1;
                },
                'cFqtg': function (_0xcf431e, _0x3b6e1a) {
                    return _0xcf431e - _0x3b6e1a;
                },
                'AfbGF': _0x4992d6(0x1bc),
                'WvVQd': _0x4992d6(0x177),
                'nvZbB': function (_0x11b9e8, _0x5f3a32) {
                    return _0x11b9e8(_0x5f3a32);
                },
                'AXFgA': _0x4992d6(0x3c0),
                'GVyxF': function (_0x5d94ef, _0x3d0b6a) {
                    return _0x5d94ef(_0x3d0b6a);
                }
            },
            _0x160207 = _0x576977;
        _0x28d1fc = _0x28d1fc[_0x30f090[_0x4992d6(0xad)](_0x160207, 0x19ce + -0x1 * 0xdf9 + -0xa34)]();
        const _0x4196b0 = _0x30f090[_0x4992d6(0x278)](_0x28d1fc[_0x30f090[_0x4992d6(0x15f)](_0x28d1fc[_0x30f090[_0x4992d6(0x274)]], -0x175 * -0x18 + -0x5ff * -0x1 + 0x2ed * -0xe)], '.');
        if(_0x4196b0)
            _0x28d1fc = _0x28d1fc[_0x30f090[_0x4992d6(0x231)]](0x5 * 0x157 + -0x1 * -0x74 + 0x727 * -0x1, -(-0x97b * -0x3 + 0x1 * -0x257b + 0x90b));
        const _0x36afb8 = _0x28d1fc[_0x30f090[_0x4992d6(0x349)](_0x160207, -0x144a + -0x9 * 0x2c1 + 0x176b * 0x2)]('\x0a')[_0x30f090[_0x4992d6(0x37b)]](_0x5e5397 => _0x5e5397[_0x4992d6(0x139)]()[_0x160207(-0x2115 + -0x8fe + 0x2bd6)]('')[_0x160207(0x2ca + 0x314 * -0x2 + 0x4d3)](_0x5580e4 => _0x5580e4 === '1' ? !![] : ![]));
        return {
            'arr': _0x36afb8,
            'w': _0x36afb8[0x1 * -0x20d4 + -0x19 * 0x26 + -0x1245 * -0x2][_0x30f090[_0x4992d6(0x274)]],
            'h': _0x36afb8[_0x30f090[_0x4992d6(0xad)](_0x160207, -0x1a5 * 0x6 + -0xa01 * 0x1 + 0x157d)],
            'size': _0x36afb8[_0x30f090[_0x4992d6(0x194)](_0x160207, 0x1 * -0x19fb + 0x8f1 + 0x12ae)]((_0x545daf, _0x1fdff4) => _0x545daf + _0x1fdff4[_0x4992d6(0x10d)]((_0x53a06d, _0x54c154) => _0x53a06d + _0x54c154, -0xb1b * -0x1 + -0x46f * 0x1 + -0x1 * 0x6ac), 0x18a7 * 0x1 + 0x714 + -0x1fbb),
            'a': _0x4196b0
        };
    });
let lastGuiOpened;
register(_0x576977(-0x44 * -0x5c + 0x215a + -0x241 * 0x19), _0x21240d => {
    const _0x4fc7eb = _0x478fc2,
        _0x91fe93 = {
            'zUKas': function (_0x1d96c2, _0x467f8d) {
                return _0x1d96c2(_0x467f8d);
            }
        },
        _0x4ebbdb = _0x576977;
    lastGuiOpened = _0x21240d[_0x91fe93[_0x4fc7eb(0x189)](_0x4ebbdb, -0x92 + 0xf17 * 0x1 + -0xd06)];
});
export function getNextSlotToClick(_0x470203) {
    const _0x42892b = _0x478fc2,
        _0xe5cda0 = {
            'vqEog': function (_0x19680f, _0x24f8ae) {
                return _0x19680f - _0x24f8ae;
            },
            'ipRoF': function (_0xe3afdc, _0x27827a) {
                return _0xe3afdc / _0x27827a;
            },
            'jXxcs': function (_0x312190, _0x1051d9) {
                return _0x312190 - _0x1051d9;
            },
            'jPYhS': function (_0x2c1596, _0x1c3e2c) {
                return _0x2c1596 % _0x1c3e2c;
            },
            'PjJix': function (_0x1c26ee, _0x8182dc) {
                return _0x1c26ee < _0x8182dc;
            },
            'SIrEW': function (_0x299e12, _0x466dc7) {
                return _0x299e12 & _0x466dc7;
            },
            'IZSkv': function (_0x1b3d94, _0x41b030) {
                return _0x1b3d94 >= _0x41b030;
            },
            'aGZHB': function (_0x12404f, _0x5ead3e) {
                return _0x12404f >= _0x5ead3e;
            },
            'gLHtd': function (_0x119538, _0x48ede2) {
                return _0x119538 ^ _0x48ede2;
            },
            'REujo': function (_0x2d9301, _0x1124e9) {
                return _0x2d9301 === _0x1124e9;
            },
            'HFNoQ': function (_0x31b6d1, _0x4e9365) {
                return _0x31b6d1 - _0x4e9365;
            },
            'OKjWc': _0x42892b(0x259),
            'MkXzn': function (_0x303be1, _0x50f9db) {
                return _0x303be1 > _0x50f9db;
            },
            'NFkUF': function (_0x289bd5, _0x2451e0) {
                return _0x289bd5 !== _0x2451e0;
            },
            'VFQLc': _0x42892b(0x266),
            'HTafm': function (_0x33ea65, _0x2c5502) {
                return _0x33ea65 <= _0x2c5502;
            },
            'NmGyK': function (_0x2f0b20, _0x4a6793) {
                return _0x2f0b20 - _0x4a6793;
            },
            'jNWWx': _0x42892b(0x164),
            'toAOe': function (_0x3d3044, _0x263e42) {
                return _0x3d3044 + _0x263e42;
            },
            'YkTnm': function (_0x344edd, _0x32de29) {
                return _0x344edd * _0x32de29;
            },
            'ybore': function (_0x5aefe8, _0x43c1af) {
                return _0x5aefe8(_0x43c1af);
            },
            'ccRwp': function (_0x6bd011, _0x542d73) {
                return _0x6bd011 * _0x542d73;
            },
            'njbyF': function (_0x433caa, _0x4778c1) {
                return _0x433caa(_0x4778c1);
            },
            'DugnX': function (_0x2546aa, _0x2b2edb) {
                return _0x2546aa * _0x2b2edb;
            },
            'ThGxd': function (_0x14dca3, _0x5180d3) {
                return _0x14dca3 <= _0x5180d3;
            },
            'fYJpb': function (_0x29bc5a, _0x5e44e9) {
                return _0x29bc5a <= _0x5e44e9;
            },
            'rdOlW': function (_0x5b1e49, _0xa05cdb) {
                return _0x5b1e49 * _0xa05cdb;
            },
            'oMVVd': function (_0x42b87c, _0x8211c) {
                return _0x42b87c(_0x8211c);
            },
            'XkFMG': function (_0x89469e, _0x212377) {
                return _0x89469e * _0x212377;
            },
            'SQWFr': function (_0x2a5295, _0x46f105) {
                return _0x2a5295 + _0x46f105;
            },
            'IYOmA': function (_0x247ee0, _0x3a79a2) {
                return _0x247ee0 * _0x3a79a2;
            },
            'wNHDX': function (_0x1249b1, _0x5318f2) {
                return _0x1249b1 !== _0x5318f2;
            },
            'YywfO': function (_0x1db0c7, _0x3c9aff) {
                return _0x1db0c7 ^ _0x3c9aff;
            },
            'SwSRM': function (_0xebfe5e, _0x2c105b, _0x45cb05) {
                return _0xebfe5e(_0x2c105b, _0x45cb05);
            },
            'rQdtu': function (_0x100865, _0x3cc4b2, _0x3c2b2b) {
                return _0x100865(_0x3cc4b2, _0x3c2b2b);
            },
            'ulEVH': function (_0x409437, _0xc2e179) {
                return _0x409437 !== _0xc2e179;
            },
            'iRawy': function (_0x431a3c, _0x4908e7) {
                return _0x431a3c(_0x4908e7);
            },
            'xnUNA': function (_0x12aaa5, _0x379c35) {
                return _0x12aaa5(_0x379c35);
            },
            'cpsjo': _0x42892b(0x2de),
            'naAMR': function (_0x2dac2f, _0x380b6a) {
                return _0x2dac2f + _0x380b6a;
            },
            'Maqqn': function (_0x5928d4, _0x4eb6b4) {
                return _0x5928d4(_0x4eb6b4);
            },
            'EXRBP': function (_0x443d64, _0x295f9f) {
                return _0x443d64(_0x295f9f);
            },
            'jbaIz': _0x42892b(0x3fc),
            'fPSeU': function (_0x30e0f9, _0x4758e7) {
                return _0x30e0f9 < _0x4758e7;
            },
            'TFlbX': _0x42892b(0x437) + '_a',
            'XcCJS': function (_0x519a6f, _0x113e88) {
                return _0x519a6f !== _0x113e88;
            },
            'dlOAy': function (_0x3b8620, _0x2898c5) {
                return _0x3b8620(_0x2898c5);
            },
            'prPmr': _0x42892b(0x327),
            'RVELT': function (_0x4026d7, _0x47bcca) {
                return _0x4026d7 < _0x47bcca;
            },
            'WBvUb': function (_0x28316f, _0x4e9200) {
                return _0x28316f(_0x4e9200);
            },
            'fEfYU': function (_0x27e6cb, _0x247d2b) {
                return _0x27e6cb(_0x247d2b);
            },
            'CENEu': function (_0x3c45f0, _0x283336) {
                return _0x3c45f0(_0x283336);
            },
            'maHQX': function (_0x233326, _0x2a0b41) {
                return _0x233326(_0x2a0b41);
            },
            'znqnT': function (_0x115a23, _0x50484d) {
                return _0x115a23(_0x50484d);
            },
            'jAdOK': _0x42892b(0x311) + _0x42892b(0x24a),
            'iAQFH': _0x42892b(0x66) + '_c',
            'uYJAx': _0x42892b(0x14e),
            'ndGel': _0x42892b(0x103),
            'fCdey': function (_0x3208e6, _0x1c9aec) {
                return _0x3208e6(_0x1c9aec);
            },
            'huBll': function (_0x4d8a4f, _0x45df61) {
                return _0x4d8a4f + _0x45df61;
            },
            'lQaAQ': function (_0x57fdea, _0x1ad7af) {
                return _0x57fdea + _0x1ad7af;
            },
            'ImGob': function (_0x1c39af, _0x4f852b) {
                return _0x1c39af(_0x4f852b);
            },
            'sgAsi': function (_0x102233, _0x34b9b9) {
                return _0x102233 === _0x34b9b9;
            },
            'qctzP': _0x42892b(0x1bc),
            'dJvfG': function (_0x3274ce, _0xeffb7a) {
                return _0x3274ce(_0xeffb7a);
            }
        },
        _0x56bfba = _0x576977;
    if(_0xe5cda0[_0x42892b(0x3ca)](_0x470203[_0xe5cda0[_0x42892b(0x3e1)](_0x56bfba, 0x1adb * 0x1 + -0x2b0 * 0xa + 0x170)]()[_0xe5cda0[_0x42892b(0x373)](_0x56bfba, -0x46f + -0x65e + -0xc83 * -0x1)](), _0xe5cda0[_0x42892b(0x29b)](_0x56bfba, 0x21af + 0x2345 + -0x4340)))
        return ChatLib[_0xe5cda0[_0x42892b(0x303)]](_0xe5cda0[_0x42892b(0x397)](prefix, _0xe5cda0[_0x42892b(0x11a)](_0x56bfba, -0x1155 + -0x14a9 + 0x2781))), -(0x8a3 + -0x42 * 0x5 + -0x758);
    const _0x173337 = _0xe5cda0[_0x42892b(0x12d)](getLowerContainer, _0x470203),
        _0x5e71db = _0x173337[_0xe5cda0[_0x42892b(0x373)](_0x56bfba, 0x3aa + 0x59b + -0x789)]();
    let _0x4f2867 = [],
        _0x308050 = -0xd1 * -0x3 + -0x1d79 + 0x1b06,
        _0x5c5bd0 = new Array(0xb * 0x1ef + -0x1e39 + -0x22 * -0x45)[_0xe5cda0[_0x42892b(0x324)]](![]),
        _0x6d3920 = new Array(-0x1994 + -0x6 * -0x3e5 + -0xa * -0x3e)[_0xe5cda0[_0x42892b(0x324)]](![]),
        _0x2d3a0b = new Array(-0x1639 + 0x3 * -0x351 + 0x2062)[_0xe5cda0[_0x42892b(0x373)](_0x56bfba, 0x1 * 0x23ed + 0x4c9 * -0x3 + 0x1f * -0xa7)](![]),
        _0xb15009 = -0x1 * 0xf42 + -0x2 * -0x139 + 0xcd0,
        _0x4e0283 = 0x1a8c + 0xd64 * -0x2 + 0x3c,
        _0x480de0 = new Array(-0x1dbf + -0x236 + 0x202b)[_0xe5cda0[_0x42892b(0x3e1)](_0x56bfba, -0x22ab + 0x3 * -0x797 + -0x95 * -0x65)](-0x872 * 0x2 + -0x9ad * -0x2 + 0x1 * -0x276);
    const _0x1489be = (_0x42981f, _0x37050d) => {
        const _0x565064 = _0x42892b,
            _0x5b4419 = fossils[_0x42981f['f']];
        let _0x171ab7 = _0xe5cda0[_0x565064(0x13f)](~~_0xe5cda0[_0x565064(0x304)](_0x37050d, 0x1c * 0xd7 + -0x708 + -0x1073 * 0x1), ~~_0xe5cda0[_0x565064(0x304)](_0x42981f['p'], 0x1805 + 0x1f * -0x83 + -0x129 * 0x7)),
            _0x3cf546 = _0xe5cda0[_0x565064(0x1fe)](_0xe5cda0[_0x565064(0x43f)](_0x37050d, 0x1cc5 + -0xc6b + -0x1 * 0x1051), _0xe5cda0[_0x565064(0x43f)](_0x42981f['p'], 0xb72 + -0xdd5 + 0x26c));
        if(_0xe5cda0[_0x565064(0x187)](_0x3cf546, -0x11a8 + -0x217b + 0x3323) || _0xe5cda0[_0x565064(0x187)](_0x171ab7, 0x207f + -0xab * -0x6 + 0x10b * -0x23))
            return ![];
        if(_0xe5cda0[_0x565064(0x3ed)](_0x42981f['r'], 0x1123 + 0xf26 + -0x4 * 0x812)) {
            const _0x3f4e71 = _0x171ab7;
            _0x171ab7 = _0x3cf546, _0x3cf546 = _0x3f4e71;
        }
        if(_0xe5cda0[_0x565064(0x431)](_0x3cf546, _0x5b4419['w']) || _0xe5cda0[_0x565064(0x12f)](_0x171ab7, _0x5b4419['h']))
            return ![];
        if(_0xe5cda0[_0x565064(0x3f8)](_0x42981f['m'], _0xe5cda0[_0x565064(0x354)](_0x42981f['r'], 0x1222 + -0x11 * 0x8d + 0x4 * -0x231) || _0xe5cda0[_0x565064(0x354)](_0x42981f['r'], 0x8df * -0x1 + 0x3bd * -0x9 + 0x2a86)))
            _0x3cf546 = _0xe5cda0[_0x565064(0x29a)](_0xe5cda0[_0x565064(0x13f)](_0x5b4419['w'], _0x3cf546), 0x155f * -0x1 + -0xd44 * 0x1 + 0x22a4);
        if(_0xe5cda0[_0x565064(0x354)](_0x42981f['r'], 0x3b7 + -0x526 + -0x1 * -0x171) || _0xe5cda0[_0x565064(0x354)](_0x42981f['r'], -0x66c + 0x2 * 0xc87 + -0x129f))
            _0x171ab7 = _0xe5cda0[_0x565064(0x1fe)](_0xe5cda0[_0x565064(0x13f)](_0x5b4419['h'], _0x171ab7), -0x1383 * -0x2 + 0x52d + -0x2c32);
        return _0x5b4419[_0xe5cda0[_0x565064(0x23e)]][_0x171ab7][_0x3cf546];
    };
    for(let _0x45147f = -0x4b4 + 0x13a * 0x7 + -0x3e2; _0xe5cda0[_0x42892b(0x348)](_0x45147f, 0x1 * -0xb + 0x1d09 * -0x1 + 0x1d4a); _0x45147f++) {
        let _0x35829b = _0x173337[_0xe5cda0[_0x42892b(0x1a7)]](_0x45147f);
        if(_0xe5cda0[_0x42892b(0x354)](_0x35829b, null))
            continue;
        if(_0xe5cda0[_0x42892b(0x384)](_0xe5cda0[_0x42892b(0x11a)](getItemId, _0x35829b), _0xe5cda0[_0x42892b(0x373)](_0x56bfba, -0x197a + -0x65e + 0x213e)))
            continue;
        let _0x578326 = _0x35829b[_0xe5cda0[_0x42892b(0x37c)](_0x56bfba, -0xfec + -0x1d7f + 0x179f * 0x2)]();
        _0x5c5bd0[_0x45147f] = _0xe5cda0[_0x42892b(0x354)](_0x578326, -0x64 + -0x1f2 * -0x1 + -0x18e), _0x6d3920[_0x45147f] = _0xe5cda0[_0x42892b(0xb6)](_0x578326, 0x228b + -0xe3f + 0x144c * -0x1), _0x2d3a0b[_0x45147f] = _0xe5cda0[_0x42892b(0x354)](_0x578326, -0xb * 0x32b + -0x236 + 0x2514);
        if(_0x5c5bd0[_0x45147f])
            _0xb15009++;
        else {
            if(_0x6d3920[_0x45147f] && _0xe5cda0[_0x42892b(0x354)](_0x4e0283, -(0x6 * 0x1df + -0xbd4 * 0x3 + 0x1843))) {
                const _0x4b0db0 = _0x35829b[_0xe5cda0[_0x42892b(0x29b)](_0x56bfba, 0x5 * -0x728 + 0xfae + 0x1606 * 0x1)]()[_0xe5cda0[_0x42892b(0x373)](_0x56bfba, -0x1a2c * -0x1 + -0x9d * -0xf + -0x21d9)](_0xe5cda0[_0x42892b(0x11a)](_0x56bfba, -0x1a99 + 0x3b * -0x13 + 0x20d6)),
                    _0x2153d7 = _0x4b0db0[_0xe5cda0[_0x42892b(0x37c)](_0x56bfba, -0x1b85 + 0x1cc1 + -0x3 * -0x26)](_0xe5cda0[_0x42892b(0x3f9)], -0x5b5 + 0xfb7 + 0x4fd * -0x2);
                for(let _0x204f3d = 0x1fa * 0x7 + -0x7f + 0xd57 * -0x1; _0xe5cda0[_0x42892b(0x65)](_0x204f3d, _0x2153d7[_0xe5cda0[_0x42892b(0x19d)](_0x56bfba, -0x1f67 * -0x1 + -0x2185 + -0x2 * -0x208)]()); _0x204f3d++) {
                    let _0x48a1fb = _0x2153d7[_0xe5cda0[_0x42892b(0x2b7)](_0x56bfba, -0x1d7 * 0x6 + -0x5 * -0x61 + -0xaf3 * -0x1)](_0x204f3d)[_0xe5cda0[_0x42892b(0x29b)](_0x56bfba, 0x163a + -0x103 + 0x691 * -0x3)](/^§7Chisel Charges Remaining: §.(\d+)$/);
                    if(_0x48a1fb) {
                        _0x4e0283 = +_0x48a1fb[0x1515 + -0x13 * 0x18b + 0x83d];
                        break;
                    }
                }
            }
        }
    }
    if(_0xe5cda0[_0x42892b(0x25e)](_0xb15009, -0x1b32 + 0x1f * 0x12b + -0x3 * 0x301) && _0xe5cda0[_0x42892b(0x354)](_0x308050, 0xb99 + -0x3b * 0x97 + 0x63 * 0x3c)) {
        const _0x2c0585 = _0x173337[_0xe5cda0[_0x42892b(0xa9)](_0x56bfba, 0x3 * 0x953 + 0x1 * 0x179f + -0x31e5)](_0x5c5bd0[_0xe5cda0[_0x42892b(0x8c)](_0x56bfba, -0xede * 0x2 + -0x1980 + -0x38d5 * -0x1)](!![]))[_0xe5cda0[_0x42892b(0x252)](_0x56bfba, 0x2 * -0x77b + 0x1 * 0x820 + -0x3b * -0x26)]()[_0xe5cda0[_0x42892b(0x7f)](_0x56bfba, 0x25f * -0xe + -0x3d * 0x47 + 0x33a3)](_0xe5cda0[_0x42892b(0x8c)](_0x56bfba, 0x24e * -0x3 + -0x3 * 0x97d + 0x253d)),
            _0x33f8cd = _0x2c0585[_0xe5cda0[_0x42892b(0x2c8)]](_0xe5cda0[_0x42892b(0x3f9)], -0x68f + -0x82a + -0x1 * -0xec1);
        for(let _0x528f84 = -0x1 * -0x1c3d + 0x325 * -0x1 + -0x1918; _0xe5cda0[_0x42892b(0x348)](_0x528f84, _0x33f8cd[_0xe5cda0[_0x42892b(0x16c)]]()); _0x528f84++) {
            let _0x22c841 = _0x33f8cd[_0xe5cda0[_0x42892b(0x29b)](_0x56bfba, 0x24ae + -0x2560 + 0xa * 0x40)](_0x528f84)[_0xe5cda0[_0x42892b(0x3d5)]](/^§7Fossil Excavation Progress: §.([\d.]+)%$/);
            if(_0x22c841) {
                _0x308050 = Math[_0xe5cda0[_0x42892b(0x373)](_0x56bfba, -0x84f * 0x1 + 0x1e40 + 0x3 * -0x6d1)](_0xe5cda0[_0x42892b(0x28c)](_0xe5cda0[_0x42892b(0x304)](-0x1085 * -0x1 + -0xc72 + -0x3af, +_0x22c841[0x13f9 + -0x2 * 0x1181 + 0xf0a]), _0xb15009));
                break;
            }
        }
    }
    fossils[_0xe5cda0[_0x42892b(0xf8)]]((_0x2f2025, _0x38a465) => {
        const _0x4a0682 = _0x42892b,
            _0x129feb = _0x56bfba;
        if(_0xe5cda0[_0x4a0682(0x25e)](_0x308050, 0xbc2 + -0x223 + 0x335 * -0x3) && _0xe5cda0[_0x4a0682(0xb6)](_0x2f2025[_0xe5cda0[_0x4a0682(0x31e)]], _0x308050))
            return;
        for(let _0x5a8cea = -0xfa * -0xa + 0x216b + -0xf * 0x2e1; _0xe5cda0[_0x4a0682(0x211)](_0x5a8cea, _0xe5cda0[_0x4a0682(0x29a)](-0x234f + -0x83e + -0x5 * -0x8b7, _0x2f2025['h'])); _0x5a8cea++) {
            for(let _0x19a0bb = -0x207f + 0x4f * 0x3a + 0x65 * 0x25; _0xe5cda0[_0x4a0682(0x211)](_0x19a0bb, _0xe5cda0[_0x4a0682(0x398)](-0x11ae * 0x2 + -0x1 * 0x219e + 0x4503, _0x2f2025['w'])); _0x19a0bb++) {
                _0x4f2867[_0xe5cda0[_0x4a0682(0x1d4)]]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x293)](_0x5a8cea, 0x2658 + -0x1 * -0x1195 + -0x1bf2 * 0x2), _0x19a0bb),
                    'r': 0x0,
                    'm': ![]
                }), _0x4f2867[_0xe5cda0[_0x4a0682(0x373)](_0x129feb, -0xd87 * 0x1 + -0xc35 + 0x1 * 0x1b13)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x28c)](_0x5a8cea, -0xa05 + -0x1b * 0x6d + 0x158d), _0x19a0bb),
                    'r': 0x2,
                    'm': ![]
                }), _0x2f2025['a'] && (_0x4f2867[_0xe5cda0[_0x4a0682(0x2b7)](_0x129feb, -0x1b * -0x48 + -0x14e0 + -0x1 * -0xe9f)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x293)](_0x5a8cea, 0xcf7 * -0x1 + -0x1 * -0x1b7 + 0xb49), _0x19a0bb),
                    'r': 0x0,
                    'm': !![]
                }), _0x4f2867[_0xe5cda0[_0x4a0682(0x2b7)](_0x129feb, 0x1048 + 0x1eca + 0x1 * -0x2dbb)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x3e7)](_0x5a8cea, 0x1 * 0x1095 + -0x21d + 0x2e3 * -0x5), _0x19a0bb),
                    'r': 0x2,
                    'm': !![]
                }));
            }
        }
        for(let _0x59ae0c = -0x131 * 0x1 + -0x6 * -0x4bc + 0x1b37 * -0x1; _0xe5cda0[_0x4a0682(0x42c)](_0x59ae0c, _0xe5cda0[_0x4a0682(0x29a)](-0x57 * -0x27 + 0xf97 + -0x1cd2, _0x2f2025['w'])); _0x59ae0c++) {
            for(let _0x10e4fe = 0x1a7e + 0x1b67 + -0x35e5; _0xe5cda0[_0x4a0682(0x279)](_0x10e4fe, _0xe5cda0[_0x4a0682(0x13f)](-0xd * 0xc5 + 0x65 * 0x39 + -0x1 * 0xc73, _0x2f2025['h'])); _0x10e4fe++) {
                _0x4f2867[_0xe5cda0[_0x4a0682(0x1d4)]]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x3de)](_0x59ae0c, 0x4 * 0x701 + -0x2331 + 0x736), _0x10e4fe),
                    'r': 0x1,
                    'm': ![]
                }), _0x4f2867[_0xe5cda0[_0x4a0682(0x209)](_0x129feb, -0x205b + 0x3bc + 0xa * 0x2ff)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x3e7)](_0x59ae0c, 0x1adb + 0x1488 + -0x2f5a), _0x10e4fe),
                    'r': 0x3,
                    'm': ![]
                }), _0x2f2025['a'] && (_0x4f2867[_0xe5cda0[_0x4a0682(0x373)](_0x129feb, -0x2 * 0xfe8 + 0x1717 + -0x142 * -0x8)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0xb7)](_0xe5cda0[_0x4a0682(0x174)](_0x59ae0c, 0x3 * 0x92e + -0x265e + 0xadd), _0x10e4fe),
                    'r': 0x1,
                    'm': !![]
                }), _0x4f2867[_0xe5cda0[_0x4a0682(0x2b7)](_0x129feb, -0xce9 + 0x17fd * -0x1 + 0x263d)]({
                    'f': _0x38a465,
                    'p': _0xe5cda0[_0x4a0682(0x2a8)](_0xe5cda0[_0x4a0682(0x284)](_0x59ae0c, 0x165c + 0xefd + -0x4 * 0x954), _0x10e4fe),
                    'r': 0x3,
                    'm': !![]
                }));
            }
        }
    }), _0x4f2867 = _0x4f2867[_0xe5cda0[_0x42892b(0x2ac)](_0x56bfba, -0x47 * 0x56 + 0x198f + -0x1f * -0x1)](_0x50d2e3 => {
        const _0x4f9b23 = _0x42892b,
            _0x4a8e91 = _0x56bfba;
        if(_0xe5cda0[_0x4f9b23(0x25e)](_0x308050, -0x1 * 0x4ff + -0x1916 + 0x1e15) && _0xe5cda0[_0x4f9b23(0x244)](fossils[_0x50d2e3['f']][_0xe5cda0[_0x4f9b23(0x373)](_0x4a8e91, 0x19ad + -0x2177 + 0x98c)], _0x308050))
            return ![];
        for(let _0xb8ca3e = 0x1 * 0xc66 + -0x22fb + 0x787 * 0x3; _0xe5cda0[_0x4f9b23(0x187)](_0xb8ca3e, -0x1 * 0x1be8 + -0xa * 0x3bc + 0x4176); _0xb8ca3e++) {
            if(!_0x6d3920[_0xb8ca3e] && _0xe5cda0[_0x4f9b23(0x3be)](_0xe5cda0[_0x4f9b23(0x33a)](_0x1489be, _0x50d2e3, _0xb8ca3e), _0x5c5bd0[_0xb8ca3e]))
                return ![];
        }
        return !![];
    }), _0x173337[_0xe5cda0[_0x42892b(0x2b7)](_0x56bfba, -0x1 * -0x1eb3 + -0x1 * -0x1645 + -0x3368)](_0xe5cda0[_0x42892b(0xb7)](_0xe5cda0[_0x42892b(0x1a3)](_0xe5cda0[_0x42892b(0x412)](_0x4f2867[_0xe5cda0[_0x42892b(0x3d4)](_0x56bfba, 0x2f3 + -0x10f * -0xb + -0xcfa)], _0xe5cda0[_0x42892b(0x252)](_0x56bfba, -0x22 * -0x19 + 0x1644 + -0x17c0)), _0x4e0283), _0xe5cda0[_0x42892b(0x8c)](_0x56bfba, -0x1d71 + -0x26 * -0xbf + -0x1 * -0x284)));
    if(_0xe5cda0[_0x42892b(0x320)](_0x4f2867[_0xe5cda0[_0x42892b(0x9d)]], 0x2554 + 0x9f * -0x7 + -0x1 * 0x20fb))
        return -(-0x1 * -0x177 + -0x1 * 0x107 + 0x1 * -0x6f);
    _0x480de0 = new Array(0x1e3c + -0xb * -0x269 + 0x29 * -0x161)[_0xe5cda0[_0x42892b(0x252)](_0x56bfba, 0x14b * -0x13 + -0x71e * -0x1 + 0x3 * 0x644)](-0xe4f + -0x360 + 0x11af), _0x4f2867[_0xe5cda0[_0x42892b(0x37c)](_0x56bfba, 0x7c2 + -0x20a1 * -0x1 + 0xa7 * -0x3b)](_0x377bc1 => {
        const _0x106a07 = _0x42892b;
        for(let _0x5be327 = -0x1 * 0x18e + 0x1a9f + -0x1911; _0xe5cda0[_0x106a07(0x187)](_0x5be327, -0x12a7 + -0x822 + 0x1aff); _0x5be327++) {
            if(!_0x6d3920[_0x5be327])
                continue;
            if(_0xe5cda0[_0x106a07(0x2a1)](_0x1489be, _0x377bc1, _0x5be327))
                _0x480de0[_0x5be327]++;
        }
    });
    let _0x6e3625 = _0x480de0[_0xe5cda0[_0x42892b(0x405)](_0x56bfba, -0x1 * 0xd17 + 0x1f29 + 0x2 * -0x837)]((_0x58149c, _0x138593, _0x12be7c) => _0x480de0[_0x58149c] > _0x138593 ? _0x58149c : _0x12be7c, -0x2 * 0x101f + -0x3e * -0x68 + -0x1 * -0x70e);
    return _0x6e3625;
}
const forwardBind = new KeyBind(mc[_0x576977(-0x9c5 + 0x1a9e + -0xf67)][_0x576977(-0x49d + 0xb3 * -0x19 + 0xa2 * 0x26)]),
    backwardBind = new KeyBind(mc[_0x478fc2(0x2e0) + _0x478fc2(0x1b0)][_0x576977(0x20a6 + 0x13cc + -0x327b)]),
    leftBind = new KeyBind(mc[_0x576977(0x3 * 0xbaf + -0xef * -0x6 + -0x2735)][_0x576977(-0xa7 * -0x35 + 0x121b + -0x32ae)]),
    rightBind = new KeyBind(mc[_0x576977(0xa * -0x27f + -0xfa8 + 0x8 * 0x542)][_0x576977(-0xd6f * 0x2 + 0xb46 + 0x8ab * 0x2)]),
    jumpBind = new KeyBind(mc[_0x576977(-0xf53 * 0x1 + -0x950 + 0x1a15)][_0x576977(-0x493 * -0x2 + 0x6b * 0x3d + -0x211d * 0x1)]),
    sneakBind = new KeyBind(mc[_0x576977(-0x1c43 * -0x1 + -0x1c50 + 0x17f)][_0x576977(-0x1 * -0x8ec + -0x1c2 * 0x5 + 0x190)]),
    sprintBind = new KeyBind(mc[_0x576977(0x20c4 + 0xa3a * -0x2 + -0xade)][_0x478fc2(0x2c9) + _0x478fc2(0x3cc)]),
    attackBind = new KeyBind(mc[_0x576977(-0xe2 * 0x1a + -0x14b7 + 0x2d1d)][_0x576977(0x5 * 0x456 + -0x19da + 0x5ed)]),
    useBind = new KeyBind(mc[_0x576977(-0xcca * 0x1 + -0x18bb + -0x85 * -0x4b)][_0x576977(0x265b + 0xa15 + -0x2ecb)]);
class Point {
    constructor(_0x3e1768, _0x22dfe0, _0x199efa) {
        this['x'] = _0x3e1768, this['y'] = _0x22dfe0, this['z'] = _0x199efa;
    }
}
let currentUserPath = [],
    autoWalk = ![],
    rotmode = !![];
const stopAllMovement = () => {
        const _0x26d040 = _0x478fc2,
            _0x364666 = {
                'pLpKh': function (_0x1a9a4e, _0xa4d2a5) {
                    return _0x1a9a4e(_0xa4d2a5);
                },
                'TMQGi': _0x26d040(0xbb),
                'EHGsA': function (_0x119539, _0x44dff3) {
                    return _0x119539(_0x44dff3);
                }
            },
            _0x4d34dd = _0x576977;
        jumpBind[_0x364666[_0x26d040(0x1ae)](_0x4d34dd, 0x2 * -0x5ea + 0x3 * -0x6d3 + 0xa9 * 0x33)](![]), forwardBind[_0x364666[_0x26d040(0x1ae)](_0x4d34dd, -0x471 + -0xe * 0x9d + -0x2e1 * -0x5)](![]), rightBind[_0x364666[_0x26d040(0x3bd)]](![]), backwardBind[_0x364666[_0x26d040(0x73)](_0x4d34dd, -0x353 * -0x9 + 0xd * -0xcb + 0x1d3 * -0xa)](![]), leftBind[_0x364666[_0x26d040(0x1ae)](_0x4d34dd, 0x481 * -0x1 + 0x121e + -0xc3f * 0x1)](![]), sneakBind[_0x364666[_0x26d040(0x1ae)](_0x4d34dd, 0x147e + -0x10b7 + -0x269)](![]);
    },
    getPathEntity = (_0x3c4a8c, _0x4955be, _0x186908) => {
        const _0x29c3e4 = _0x478fc2,
            _0x3b2550 = {
                'uFpHm': function (_0x4fe23a, _0x10efa7) {
                    return _0x4fe23a(_0x10efa7);
                },
                'hoeih': function (_0x3bf340, _0x3ce694) {
                    return _0x3bf340(_0x3ce694);
                },
                'aZvEC': _0x29c3e4(0x409) + _0x29c3e4(0x1df),
                'ymZhA': function (_0x27529b, _0x195c3e) {
                    return _0x27529b(_0x195c3e);
                },
                'ceTYa': _0x29c3e4(0x233) + _0x29c3e4(0x3eb),
                'qJyfp': function (_0x2738e7, _0x37aba1) {
                    return _0x2738e7(_0x37aba1);
                },
                'maVHO': function (_0x168e27, _0x3756f0) {
                    return _0x168e27(_0x3756f0);
                },
                'NhGkc': function (_0x3cdcfd, _0x2e18e8) {
                    return _0x3cdcfd(_0x2e18e8);
                },
                'BtZpI': function (_0x25a0bf, _0x4262ef) {
                    return _0x25a0bf(_0x4262ef);
                },
                'ZqFdS': _0x29c3e4(0x1b2),
                'IElxI': function (_0x5cde54, _0x384d73) {
                    return _0x5cde54(_0x384d73);
                },
                'XAHzg': function (_0x4549c4, _0xd6282c) {
                    return _0x4549c4(_0xd6282c);
                }
            },
            _0x4ca0d0 = _0x576977;
        return nodeProcessor = new net[(_0x3b2550[_0x29c3e4(0x23d)](_0x4ca0d0, -0x243c + 0x2 * 0x1147 + 0x3a4))][(_0x3b2550[_0x29c3e4(0x41f)](_0x4ca0d0, -0x142b + 0x16a8 + 0x3 * -0x2b))][(_0x3b2550[_0x29c3e4(0x23d)](_0x4ca0d0, -0x469 * -0x3 + 0x29 * -0xbf + 0x4 * 0x4ae))][_0x3b2550[(_0x29c3e4(0x114))]](), nodeProcessor[_0x3b2550[_0x29c3e4(0x3d1)](_0x4ca0d0, 0x1a06 + 0xbea + -0x2405)](!![]), nodeProcessor[_0x3b2550[_0x29c3e4(0x35e)]](!![]), pathFinder = new net[(_0x3b2550[_0x29c3e4(0x410)](_0x4ca0d0, 0x71d + 0x191c * 0x1 + 0x1 * -0x1e43))][(_0x3b2550[_0x29c3e4(0x142)](_0x4ca0d0, 0x20b + -0x16ea + -0x1675 * -0x1))][(_0x3b2550[_0x29c3e4(0x1b4)](_0x4ca0d0, 0x169a * 0x1 + 0x21f7 + -0x370f))](nodeProcessor), pathFinder[_0x3b2550[_0x29c3e4(0x288)](_0x4ca0d0, 0xae9 + 0x1 * 0x1caa + 0x1 * -0x25cf)](World[_0x3b2550[_0x29c3e4(0x288)](_0x4ca0d0, -0x3 * -0x185 + 0x3c * -0x5c + 0x93 * 0x20)](), Player[_0x3b2550[_0x29c3e4(0x449)]](), new net[(_0x3b2550[_0x29c3e4(0x44a)](_0x4ca0d0, -0x1 * 0xc6f + 0x2 * -0xadf + 0x2423))][(_0x3b2550[_0x29c3e4(0x215)](_0x4ca0d0, 0x21c4 * -0x1 + 0x1 * -0x1c41 + 0x3fff))][(_0x3b2550[_0x29c3e4(0x44a)](_0x4ca0d0, 0x25b4 + -0x1944 + 0x81 * -0x16))](_0x3c4a8c, _0x4955be, _0x186908), 0x2 * 0x6ed + -0x1 * -0x25d9 + -0x2be3);
    },
    pathTo = (_0xca43c1, _0x24300d, _0x438003) => {
        const _0x3c8e18 = _0x478fc2,
            _0x5c24da = {
                'SedvV': function (_0x5922d5, _0x54ad8c, _0x26f7d3, _0xe98d65) {
                    return _0x5922d5(_0x54ad8c, _0x26f7d3, _0xe98d65);
                },
                'zUwHx': function (_0x96a343, _0x3e69f6) {
                    return _0x96a343 < _0x3e69f6;
                },
                'gLKHB': function (_0x2b236f, _0x3b1adf) {
                    return _0x2b236f - _0x3b1adf;
                },
                'rSIOt': function (_0x58c106, _0x44e6d6) {
                    return _0x58c106(_0x44e6d6);
                },
                'wNWnq': _0x3c8e18(0x36e) + '_a',
                'KtLRt': function (_0x47b382, _0x31b48e) {
                    return _0x47b382 + _0x31b48e;
                },
                'uREVr': function (_0x1ee502, _0x2a3541) {
                    return _0x1ee502 + _0x2a3541;
                },
                'qQEyv': _0x3c8e18(0x164)
            },
            _0x1a200b = _0x576977;
        let _0x2b2ef9 = [],
            _0x40d2fd = new Point(_0xca43c1, _0x24300d, _0x438003),
            _0x55bc31 = _0x5c24da[_0x3c8e18(0x18a)](getPathEntity, _0x40d2fd['x'], _0x40d2fd['y'], _0x40d2fd['z']);
        if(!_0x55bc31)
            return;
        for(i = 0x2f5 * -0x2 + -0x15c2 + 0x3f4 * 0x7; _0x5c24da[_0x3c8e18(0x208)](i, _0x5c24da[_0x3c8e18(0x1c3)](_0x55bc31[_0x5c24da[_0x3c8e18(0x240)](_0x1a200b, -0x5 * 0x1f9 + -0x1d1f + 0x2877)](), 0x1dd1 + 0x1ed1 + -0x583 * 0xb)); i++) {
            let _0x4884da = _0x55bc31[_0x5c24da[_0x3c8e18(0x1ac)]](i),
                _0x1622d7 = new Point(_0x5c24da[_0x3c8e18(0x379)](_0x4884da[_0x5c24da[_0x3c8e18(0x240)](_0x1a200b, -0x1 * 0x1c3d + -0x941 * -0x1 + -0x41e * -0x5)], -0x884 + 0xf23 + -0x3 * 0x235 + 0.5), _0x5c24da[_0x3c8e18(0x387)](_0x4884da[_0x5c24da[_0x3c8e18(0x240)](_0x1a200b, 0x548 * 0x2 + -0x6 * 0x65f + 0x1d76)], 0x6bf * 0x1 + 0x35f * 0x1 + 0x5 * -0x206 + 0.5), _0x5c24da[_0x3c8e18(0x379)](_0x4884da[_0x5c24da[_0x3c8e18(0x240)](_0x1a200b, -0x2 * 0x53c + 0x2432 + -0x300 * 0x8)], -0x122c + 0x1 * -0x1aea + -0xc7 * -0x3a + 0.5));
            _0x2b2ef9[_0x5c24da[_0x3c8e18(0x35c)]](_0x1622d7);
        }
        return _0x2b2ef9;
    },
    possibleRotations = [
        -(-0x1036 + 0x8 * 0x5e + 0xdfa),
        -(0xc32 + -0x1ee0 + 0x1335),
        -(-0x211 + 0xe9 * 0xb + -0x798),
        -(-0x26f1 + -0x1838 + -0x1 * -0x3f56),
        -0x1f * 0xd3 + 0x12e1 + 0x356 * 0x2,
        -0x229a + 0x450 + -0x1 * -0x1e77,
        0x13e8 + 0x23ee + -0x4 * 0xddf,
        0x209 * 0x13 + 0xb6 * 0x35 + -0x4bd2,
        -0x18c3 * 0x1 + -0x26d3 + 0x404a
    ],
    getClosest = (_0x5548ce, _0x4a2fff) => {
        const _0x177e1f = _0x478fc2,
            _0x46fa54 = {
                'NVkHd': _0x177e1f(0x10d)
            },
            _0x2b1e72 = _0x576977;
        return _0x5548ce[_0x46fa54[_0x177e1f(0x35d)]]((_0x346bb1, _0xc9f3cd) => Math[_0x2b1e72(-0xd22 + -0x1 * -0x1bd + 0xcc5 * 0x1)](_0xc9f3cd - _0x4a2fff) < Math[_0x2b1e72(0x57 * 0x61 + 0x1b69 + -0x10 * 0x3b0)](_0x346bb1 - _0x4a2fff) ? _0xc9f3cd : _0x346bb1);
    },
    pressKeys = _0x5359c9 => {
        const _0x27e7c4 = _0x478fc2,
            _0x15f65e = {
                'jJFmf': function (_0x1b86bd, _0x815927) {
                    return _0x1b86bd(_0x815927);
                },
                'syizN': _0x27e7c4(0xbb),
                'GTLXc': _0x27e7c4(0x1a1),
                'Mnlgh': function (_0x3c516a, _0x3cea6c) {
                    return _0x3c516a(_0x3cea6c);
                },
                'XGtTr': function (_0x59b0b0, _0x460b93) {
                    return _0x59b0b0(_0x460b93);
                },
                'VZrLy': function (_0x3844b9, _0x27abbf) {
                    return _0x3844b9(_0x27abbf);
                },
                'dhvPG': function (_0x46671d, _0x3aed70) {
                    return _0x46671d(_0x3aed70);
                },
                'wumPg': function (_0x4c63d3, _0x4cdd28) {
                    return _0x4c63d3(_0x4cdd28);
                }
            },
            _0x2aa47e = _0x576977;
        _0x5359c9[_0x15f65e[_0x27e7c4(0x375)](_0x2aa47e, -0xcae * 0x3 + -0x1 * 0x22c9 + 0x4ab9)](_0x115203 => {
            const _0x326867 = _0x27e7c4,
                _0xbf1609 = _0x2aa47e;
            switch(_0x115203) {
            case 'W':
                forwardBind[_0x15f65e[_0x326867(0xd4)](_0xbf1609, 0xeec + -0x1168 + 0x3da)](!![]);
                break;
            case 'S':
                backwardBind[_0x15f65e[_0x326867(0x87)]](!![]);
                break;
            case 'A':
                leftBind[_0x15f65e[_0x326867(0x87)]](!![]);
                break;
            case 'D':
                rightBind[_0x15f65e[_0x326867(0x87)]](!![]);
                break;
            case _0x15f65e[_0x326867(0xa4)]:
                break;
            case _0x15f65e[_0x326867(0x375)](_0xbf1609, -0x26f7 * -0x1 + -0x25cc + 0x3 * 0x1e):
                sneakBind[_0x15f65e[_0x326867(0x378)](_0xbf1609, 0x1e44 + -0x42d + -0x1 * 0x18b9)](!![]);
                break;
            case _0x15f65e[_0x326867(0x378)](_0xbf1609, 0x201a + 0xf2 * -0x1 + 0xe95 * -0x2):
                sprintBind[_0x15f65e[_0x326867(0x301)](_0xbf1609, -0x222b * -0x1 + -0x3e6 + 0x7 * -0x421)](!![]);
                break;
            case _0x15f65e[_0x326867(0xd4)](_0xbf1609, 0x1 * 0x2165 + -0x397 * -0x7 + -0x3 * 0x12ef):
                attackBind[_0x15f65e[_0x326867(0x2ec)](_0xbf1609, 0x4b2 * -0x2 + -0x1d1 * -0x11 + -0x141f)](!![]);
                break;
            case _0x15f65e[_0x326867(0x3aa)](_0xbf1609, -0x1142 * -0x2 + 0x57 * -0xb + -0x1ccc):
                useBind[_0x15f65e[_0x326867(0x87)]](!![]);
                break;
            }
        });
    },
    getBind = (_0xcd6e87, _0x2f5d5a, _0x3ce061) => {
        const _0x4cd2c2 = _0x478fc2,
            _0x5bda44 = {
                'ZPPgf': function (_0x2fbc10, _0x3a823d, _0xaa6a37) {
                    return _0x2fbc10(_0x3a823d, _0xaa6a37);
                },
                'FRcIK': function (_0x3771c9, _0x24f362) {
                    return _0x3771c9 === _0x24f362;
                },
                'yvAku': function (_0x445eb0, _0x57afb7) {
                    return _0x445eb0(_0x57afb7);
                },
                'VymWz': function (_0x4cea9d, _0x682ded) {
                    return _0x4cea9d === _0x682ded;
                },
                'wecJG': function (_0x33a6be, _0xec0240) {
                    return _0x33a6be(_0xec0240);
                },
                'MFTdY': function (_0x3cbb31, _0x3f209a) {
                    return _0x3cbb31(_0x3f209a);
                },
                'QgEBD': function (_0x5999d9, _0x48bf8b) {
                    return _0x5999d9 === _0x48bf8b;
                },
                'BEStR': function (_0x158c2c, _0x5d3564) {
                    return _0x158c2c(_0x5d3564);
                },
                'bnDJv': function (_0x5e892a, _0x57077d) {
                    return _0x5e892a(_0x57077d);
                },
                'HXuCR': function (_0x36e25d, _0x67b698) {
                    return _0x36e25d === _0x67b698;
                },
                'BDgtr': function (_0x24d7a9, _0x5c37f4) {
                    return _0x24d7a9(_0x5c37f4);
                },
                'HADMF': function (_0x52ea52, _0x34268c) {
                    return _0x52ea52(_0x34268c);
                },
                'CuuAl': function (_0x2f1c64, _0x39e1d9) {
                    return _0x2f1c64 === _0x39e1d9;
                },
                'YEhpH': function (_0x2a4808, _0x19e54a) {
                    return _0x2a4808 === _0x19e54a;
                },
                'IFJiE': function (_0x331416, _0x4de476) {
                    return _0x331416(_0x4de476);
                },
                'zDVPr': function (_0x31fb83, _0x567baf) {
                    return _0x31fb83(_0x567baf);
                },
                'clyBF': function (_0x48e7e5, _0x41637c) {
                    return _0x48e7e5 === _0x41637c;
                },
                'FeniE': function (_0x25dabb, _0x215041) {
                    return _0x25dabb === _0x215041;
                },
                'sJcKf': function (_0x5c36ae, _0x13c777) {
                    return _0x5c36ae(_0x13c777);
                },
                'pqdtj': function (_0xfbbf14, _0xb78891) {
                    return _0xfbbf14 === _0xb78891;
                },
                'HFkuh': function (_0x956749, _0x24a882) {
                    return _0x956749 === _0x24a882;
                },
                'IOZSb': function (_0x9c927b, _0x42c2bd) {
                    return _0x9c927b(_0x42c2bd);
                },
                'hlqzs': function (_0x1ae501, _0x344370) {
                    return _0x1ae501 === _0x344370;
                },
                'NWtLN': function (_0x51b8ec, _0x2fb128) {
                    return _0x51b8ec === _0x2fb128;
                },
                'ccHyx': function (_0x1cff27, _0x297cb2) {
                    return _0x1cff27 === _0x297cb2;
                },
                'EvuvY': function (_0x3329ef, _0x5cc08d) {
                    return _0x3329ef(_0x5cc08d);
                },
                'sGlCR': function (_0x5c5e41, _0x134257) {
                    return _0x5c5e41(_0x134257);
                }
            };
        _0x3ce061 = _0x5bda44[_0x4cd2c2(0xcf)](getClosest, possibleRotations, _0x3ce061);
        switch(_0x3ce061) {
        case -0x195b + -0x26be + 0x40cd:
        case -(0x44b * 0x1 + -0x3 * -0x34c + 0xcb * -0x11):
            _0x5bda44[_0x4cd2c2(0xbc)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0xbc)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x183)](pressKeys, ['D']) : _0x5bda44[_0x4cd2c2(0x183)](pressKeys, ['S']) : _0x5bda44[_0x4cd2c2(0xfb)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x109)](pressKeys, ['A']) : _0x5bda44[_0x4cd2c2(0x183)](pressKeys, ['W']);
            break;
        case -(-0x13 * 0x47 + -0xe9 * 0x13 + 0x16ea):
            _0x5bda44[_0x4cd2c2(0xfb)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0xbc)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x183)](pressKeys, ['W']) : _0x5bda44[_0x4cd2c2(0x147)](pressKeys, ['D']) : _0x5bda44[_0x4cd2c2(0x210)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x14d)](pressKeys, ['S']) : _0x5bda44[_0x4cd2c2(0x37f)](pressKeys, ['A']);
            break;
        case -0x941 * -0x3 + -0xd * 0x53 + -0xbc6 * 0x2:
            _0x5bda44[_0x4cd2c2(0x3a2)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0xfb)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x37f)](pressKeys, ['A']) : _0x5bda44[_0x4cd2c2(0x37f)](pressKeys, ['W']) : _0x5bda44[_0x4cd2c2(0x3a2)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x392)](pressKeys, ['D']) : _0x5bda44[_0x4cd2c2(0x29e)](pressKeys, ['S']);
            break;
        case -0x2 * -0x592 + -0x1 * -0x26ae + -0x18bc * 0x2:
            _0x5bda44[_0x4cd2c2(0x17c)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0x1b7)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x24d)](pressKeys, ['S']) : _0x5bda44[_0x4cd2c2(0x27e)](pressKeys, ['A']) : _0x5bda44[_0x4cd2c2(0x178)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x109)](pressKeys, ['W']) : _0x5bda44[_0x4cd2c2(0x27e)](pressKeys, ['D']);
            break;
        case -(-0xfc1 + 0xffd + 0x5 * 0xf):
            _0x5bda44[_0x4cd2c2(0x77)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0xbc)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x109)](pressKeys, [
                'W',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0x147)](pressKeys, [
                'S',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0xfb)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x3f5)](pressKeys, [
                'S',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x147)](pressKeys, [
                'W',
                'A'
            ]);
            break;
        case -0x169 + -0x1618 + 0x1808:
            _0x5bda44[_0x4cd2c2(0xfb)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0x1de)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x3f5)](pressKeys, [
                'S',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0x27e)](pressKeys, [
                'S',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x77)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x37f)](pressKeys, [
                'W',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x3f5)](pressKeys, [
                'W',
                'D'
            ]);
            break;
        case -(0x154c + 0x35 * -0x9d + 0xb62):
            _0x5bda44[_0x4cd2c2(0xbc)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0x197)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0xb2)](pressKeys, [
                'W',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x392)](pressKeys, [
                'W',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0x1c4)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x37f)](pressKeys, [
                'S',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0x147)](pressKeys, [
                'S',
                'A'
            ]);
            break;
        case -0x20f4 + -0x1145 + -0x1933 * -0x2:
            _0x5bda44[_0x4cd2c2(0xf3)](_0x2f5d5a, 'P') ? _0x5bda44[_0x4cd2c2(0x1e3)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x1b6)](pressKeys, [
                'S',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x1fb)](pressKeys, [
                'W',
                'A'
            ]) : _0x5bda44[_0x4cd2c2(0x210)](_0xcd6e87, 'X') ? _0x5bda44[_0x4cd2c2(0x1fb)](pressKeys, [
                'W',
                'D'
            ]) : _0x5bda44[_0x4cd2c2(0x3f5)](pressKeys, [
                'S',
                'D'
            ]);
            break;
        }
    },
    getEyePos = () => {
        const _0x22b360 = _0x478fc2,
            _0x563061 = {
                'uywVe': function (_0x53a7d4, _0x42f887) {
                    return _0x53a7d4(_0x42f887);
                },
                'pGIyH': function (_0x53898f, _0xb5349d) {
                    return _0x53898f + _0xb5349d;
                },
                'nukzE': _0x22b360(0x1b2),
                'jXMCa': function (_0x4638b5, _0x34c15d) {
                    return _0x4638b5(_0x34c15d);
                }
            },
            _0x5e1f22 = _0x576977;
        return {
            'x': Player[_0x563061[_0x22b360(0x185)](_0x5e1f22, -0x31e + -0x1804 + 0x19 * 0x129)](),
            'y': _0x563061[_0x22b360(0x3ea)](Player[_0x563061[_0x22b360(0x185)](_0x5e1f22, -0x5c8 + -0x7f * 0x29 + 0x1bc7)](), Player[_0x563061[_0x22b360(0x118)]]()[_0x563061[_0x22b360(0x125)](_0x5e1f22, 0xb4a + -0x2 * 0x36e + -0x2c5)]()),
            'z': Player[_0x563061[_0x22b360(0x125)](_0x5e1f22, -0x1 * -0x1fb9 + 0x802 + -0x2631)]()
        };
    },
    Minecraft = Client[_0x478fc2(0x214) + 'ft']();
let working = ![],
    lookVelocity = 0xe1c * -0x2 + 0x1b3 + 0x1ad0,
    lookAtBlock = _0xbb166a => {
        const _0x309155 = _0x478fc2,
            _0x37963f = {
                'NTgzp': function (_0x7f27b9, _0x1d6097) {
                    return _0x7f27b9(_0x1d6097);
                },
                'VEycP': _0x309155(0x82) + _0x309155(0x448),
                'FtdCq': function (_0x2ab776, _0x5b668b) {
                    return _0x2ab776 - _0x5b668b;
                },
                'vCoTV': function (_0x5c61f9, _0xe945aa) {
                    return _0x5c61f9(_0xe945aa);
                },
                'hChLm': function (_0x5d382f, _0x42c5f8) {
                    return _0x5d382f - _0x42c5f8;
                },
                'gczuN': function (_0x27d833, _0x46302d) {
                    return _0x27d833(_0x46302d);
                },
                'DNcGc': function (_0x5b6ac2, _0x565a94) {
                    return _0x5b6ac2(_0x565a94);
                },
                'UhpIT': function (_0x60157f, _0x3ddb6e) {
                    return _0x60157f - _0x3ddb6e;
                },
                'clFbR': function (_0xb23939, _0x576558) {
                    return _0xb23939(_0x576558);
                },
                'ZWyMK': function (_0x1ff86c, _0x165be2) {
                    return _0x1ff86c(_0x165be2);
                },
                'GcfyH': function (_0x29422d, _0x3f44bc) {
                    return _0x29422d(_0x3f44bc);
                },
                'cDCNY': function (_0x14f44d, _0x9c45d6) {
                    return _0x14f44d + _0x9c45d6;
                },
                'yFMYm': function (_0x4a1a71, _0x2f34a4) {
                    return _0x4a1a71 * _0x2f34a4;
                },
                'nbMwZ': function (_0x1c8bc2, _0xa8205a) {
                    return _0x1c8bc2 * _0xa8205a;
                },
                'udhDy': function (_0x2deee9, _0xe89801) {
                    return _0x2deee9(_0xe89801);
                },
                'xJyqd': function (_0xc95a04, _0x13a331) {
                    return _0xc95a04 / _0x13a331;
                },
                'Dexuq': function (_0x27aecf, _0x5293b9) {
                    return _0x27aecf * _0x5293b9;
                },
                'OlUOX': _0x309155(0x1b2),
                'wQfht': function (_0x148411, _0x428f98) {
                    return _0x148411(_0x428f98);
                },
                'QPRYG': function (_0xef9cea, _0x589757) {
                    return _0xef9cea - _0x589757;
                },
                'esBrZ': function (_0x3ad57a, _0x20969e) {
                    return _0x3ad57a(_0x20969e);
                },
                'bWRmB': function (_0x544766, _0x567da2) {
                    return _0x544766 < _0x567da2;
                },
                'HaGhP': function (_0x470a77, _0x1e91b2) {
                    return _0x470a77 == _0x1e91b2;
                },
                'HddEE': function (_0x4e055f, _0x56b2a8) {
                    return _0x4e055f instanceof _0x56b2a8;
                },
                'YGskG': _0x309155(0x277) + _0x309155(0x395),
                'KCALt': function (_0x14b4b3, _0x4a2fe3) {
                    return _0x14b4b3(_0x4a2fe3);
                },
                'ISzpu': function (_0x564faa, _0x58cbcd) {
                    return _0x564faa(_0x58cbcd);
                },
                'Qvltd': _0x309155(0x355),
                'JRFXo': function (_0x4f7caf, _0x3bc692) {
                    return _0x4f7caf(_0x3bc692);
                },
                'MpMWm': function (_0x5b32e5, _0x1b5702) {
                    return _0x5b32e5 instanceof _0x1b5702;
                },
                'RcWtG': function (_0x14aa6a, _0x41262d) {
                    return _0x14aa6a(_0x41262d);
                },
                'tIgmn': function (_0x168ac5, _0x455501) {
                    return _0x168ac5(_0x455501);
                },
                'UeFZE': function (_0x3533d3, _0x283ea6) {
                    return _0x3533d3(_0x283ea6);
                },
                'QJqrr': function (_0x4112c1, _0x3d468d) {
                    return _0x4112c1(_0x3d468d);
                },
                'jZJPJ': function (_0x82fe83, _0xe0d647) {
                    return _0x82fe83(_0xe0d647);
                },
                'bQQCm': _0x309155(0x2cc)
            },
            _0x416da2 = _0x576977;
        (_0x37963f[_0x309155(0x1d7)](Minecraft[_0x37963f[_0x309155(0x9b)](_0x416da2, 0x2225 * 0x1 + -0x14a7 * 0x1 + 0x3e * -0x31)]()[_0x37963f[_0x309155(0x2fe)](_0x416da2, -0x13 * 0x1dd + 0xf * 0x2c + 0x229c)], null) || _0x37963f[_0x309155(0x31c)](Minecraft[_0x37963f[_0x309155(0x2fe)](_0x416da2, 0xb23 * 0x2 + -0xd * -0x13 + -0x159d)]()[_0x37963f[_0x309155(0xba)]], net[_0x37963f[_0x309155(0x13b)](_0x416da2, 0x1c0d + 0xf * 0x97 + -0x22f0)][_0x37963f[_0x309155(0xde)](_0x416da2, -0x1819 * 0x1 + -0x129b * 0x1 + -0x1 * -0x2ca2)][_0x37963f[_0x309155(0x350)]][_0x37963f[_0x309155(0x160)](_0x416da2, 0x1190 + -0x1 * -0x554 + -0x1550)]) || _0x37963f[_0x309155(0x440)](Minecraft[_0x37963f[_0x309155(0xf0)](_0x416da2, 0x656 * 0x6 + 0x1766 + -0x3bca)]()[_0x37963f[_0x309155(0x20f)](_0x416da2, -0x1f2 + 0x11b6 + 0xdfb * -0x1)], net[_0x37963f[_0x309155(0x2ea)](_0x416da2, -0x5b * 0x49 + 0x1d6c + -0x183)][_0x37963f[_0x309155(0x3f3)](_0x416da2, 0x3 * 0x77e + -0x1 * -0xbde + 0x12 * -0x1cd)][_0x37963f[_0x309155(0x328)](_0x416da2, -0x6f7 + 0x4ac * 0x8 + -0xe75 * 0x2)][_0x37963f[_0x309155(0x10b)](_0x416da2, 0x884 * -0x2 + -0x1a3 * 0x16 + 0x36b5)])) && (!working && new Thread(() => {
            const _0x33ba38 = _0x309155,
                _0x4678e3 = _0x416da2;
            try {
                working = !![];
                let _0x52a2e3 = Player[_0x37963f[_0x33ba38(0x167)](_0x4678e3, 0x1dfe + -0x265 * -0x1 + -0x1ecc)]()[_0x37963f[_0x33ba38(0x2a4)]](-0x1ab + -0x1669 + 0x1815),
                    _0x348e6f = _0x37963f[_0x33ba38(0x1fd)](_0xbb166a[_0x37963f[_0x33ba38(0x23c)](_0x4678e3, 0x2087 + -0x1fc3 + 0xf9)], _0x52a2e3[_0x37963f[_0x33ba38(0x23c)](_0x4678e3, -0x1 * 0x1a49 + 0x26a2 + -0x184 * 0x7)]),
                    _0x56c4ca = _0x37963f[_0x33ba38(0x24e)](_0xbb166a[_0x37963f[_0x33ba38(0x20f)](_0x4678e3, -0x12c9 * 0x1 + -0x2460 + 0x3881)], _0x52a2e3[_0x37963f[_0x33ba38(0x334)](_0x4678e3, -0x1 * 0xbce + 0x1 * 0x13eb + 0x1 * -0x6c5)]),
                    _0xc2fd5d = _0x37963f[_0x33ba38(0x159)](_0xbb166a[_0x37963f[_0x33ba38(0x44b)](_0x4678e3, 0x39b + 0xe24 + -0xfdb)], _0x52a2e3[_0x37963f[_0x33ba38(0x2fe)](_0x4678e3, -0x23dd * -0x1 + 0x1 * -0x1094 + -0x3d * 0x49)]),
                    _0x57a5a9 = Math[_0x37963f[_0x33ba38(0x2aa)](_0x4678e3, -0x17 * -0x184 + 0x4cf * -0x8 + 0x52e)](_0x37963f[_0x33ba38(0x2b6)](_0x37963f[_0x33ba38(0x2f9)](_0x348e6f, _0x348e6f), _0x37963f[_0x33ba38(0xa3)](_0xc2fd5d, _0xc2fd5d))),
                    _0x1e9e56 = -Math[_0x37963f[_0x33ba38(0x2fe)](_0x4678e3, 0xbdd * -0x1 + 0x15bb + -0x829)](_0x57a5a9, _0x56c4ca),
                    _0x59b74e = Math[_0x37963f[_0x33ba38(0xcc)](_0x4678e3, 0x9 * 0x23f + -0xd1 * 0xb + -0x3 * 0x32d)](_0xc2fd5d, _0x348e6f);
                _0x1e9e56 = _0x37963f[_0x33ba38(0x23c)](to180, _0x37963f[_0x33ba38(0x159)](_0x37963f[_0x33ba38(0xa3)](_0x37963f[_0x33ba38(0x2b6)](_0x37963f[_0x33ba38(0x171)](_0x37963f[_0x33ba38(0x1b1)](_0x1e9e56, -0x1c * 0x10d + -0x5 * -0x192 + 0x2 * 0xb23), Math['PI']), -0x3ee * -0x1 + -0x86f + 0x4db), -(0x2ad * -0x1 + -0x160f + 0x18bd)), Player[_0x37963f[_0x33ba38(0x42a)]]()[_0x37963f[_0x33ba38(0x9b)](_0x4678e3, -0x1 * 0x886 + 0x14e * 0x5 + 0x3b0)])), _0x59b74e = _0x37963f[_0x33ba38(0x9b)](to180, _0x37963f[_0x33ba38(0x24e)](_0x37963f[_0x33ba38(0x2ae)](_0x37963f[_0x33ba38(0x171)](_0x37963f[_0x33ba38(0x2f9)](_0x59b74e, -0x1069 + 0x48 * 0x22 + 0x1 * 0x78d), Math['PI']), -0x1d * 0xbf + -0x1951 + 0x2f4e), Player[_0x37963f[_0x33ba38(0x318)](_0x4678e3, -0x1d05 * 0x1 + 0xdd * 0xe + -0x2 * -0x943)]()[_0x37963f[_0x33ba38(0x20f)](_0x4678e3, 0x1dd1 + -0xf7 * -0xc + 0x2 * -0x13b2)]));
                for(i = 0x1037 + 0x1 * 0x106f + -0x20a6; _0x37963f[_0x33ba38(0x99)](i, lookVelocity); i++) {
                    Player[_0x37963f[_0x33ba38(0x42a)]]()[_0x37963f[_0x33ba38(0x23c)](_0x4678e3, 0x1466 + -0x1a * 0x12a + 0xbdf)] += _0x37963f[_0x33ba38(0x171)](_0x59b74e, lookVelocity), Player[_0x37963f[_0x33ba38(0x334)](_0x4678e3, -0x42b + -0x1 * -0x5ab + 0x17 * 0x1)]()[_0x37963f[_0x33ba38(0x318)](_0x4678e3, 0x128c * -0x2 + 0x1269 * -0x1 + -0xb * -0x533)] += 0x4 * -0x191 + -0x1 * -0x119f + -0xb5b, Thread[_0x37963f[_0x33ba38(0x2fe)](_0x4678e3, 0xe * 0x176 + 0x5c1 + -0x1864)](-0x1a4 * 0xc + 0x1c1 * 0x3 + 0x2 * 0x737);
                }
                working = ![];
            } catch (_0x323737) {
                return;
            }
        })[_0x37963f[_0x309155(0x2b1)]]());
    };

function to180(_0x5ddeb3) {
    const _0x358f74 = _0x478fc2,
        _0x4b36c5 = {
            'XumgZ': function (_0x2a401f, _0x45ca11) {
                return _0x2a401f >= _0x45ca11;
            },
            'cIQcf': function (_0x4ef875, _0x5ab9ae) {
                return _0x4ef875 < _0x5ab9ae;
            }
        };
    _0x5ddeb3 %= -0x1a5a + -0x5fc + -0x2 * -0x10df;
    while(_0x4b36c5[_0x358f74(0x2f4)](_0x5ddeb3, 0x1a8 * 0x8 + 0x1f35 * 0x1 + -0x2bc1))
        _0x5ddeb3 -= -0xbc8 + -0x445 * -0x1 + -0x2f9 * -0x3;
    while(_0x4b36c5[_0x358f74(0x339)](_0x5ddeb3, -(0xe54 + -0x2d * 0x8f + 0xb83)))
        _0x5ddeb3 += -0x503 + 0xb * -0xb7 + 0x724 * 0x2;
    return _0x5ddeb3;
}
const distFormula = (_0x153e52, _0x2457b2, _0x5f2074, _0x3e0790, _0x187481, _0x5815d6) => {
        const _0x4b82a5 = _0x478fc2,
            _0x163dbe = {
                'gIfRC': function (_0x32a823, _0x2399f2) {
                    return _0x32a823(_0x2399f2);
                },
                'tUWXz': function (_0x2cab00, _0x589296) {
                    return _0x2cab00 + _0x589296;
                },
                'HyaUu': function (_0x25708a, _0x42150f) {
                    return _0x25708a + _0x42150f;
                },
                'RxYlA': function (_0x1a52e0, _0x31857f) {
                    return _0x1a52e0 ** _0x31857f;
                },
                'eZWCL': function (_0x4f9040, _0x44c5e2) {
                    return _0x4f9040 - _0x44c5e2;
                },
                'vgPFT': function (_0x3568be, _0xffd95e) {
                    return _0x3568be ** _0xffd95e;
                },
                'PJtAz': function (_0x543345, _0x498cae) {
                    return _0x543345 - _0x498cae;
                }
            },
            _0x940a3c = _0x576977;
        return Math[_0x163dbe[_0x4b82a5(0xc3)](_0x940a3c, 0x2214 + -0x146f + -0xc13)](_0x163dbe[_0x4b82a5(0x300)](_0x163dbe[_0x4b82a5(0x307)](_0x163dbe[_0x4b82a5(0x165)](_0x163dbe[_0x4b82a5(0x258)](_0x3e0790, _0x153e52), -0x3d7 * -0x7 + -0x5 * -0x6b3 + -0x3c5e), _0x163dbe[_0x4b82a5(0x16e)](_0x163dbe[_0x4b82a5(0x22d)](_0x187481, _0x2457b2), -0x80b * 0x1 + -0x14b * -0x1d + 0x1 * -0x1d72)), _0x163dbe[_0x4b82a5(0x165)](_0x163dbe[_0x4b82a5(0x22d)](_0x5815d6, _0x5f2074), 0x6 * 0x44b + 0x1e93 + -0x3853)));
    },
    getSpeed = () => {
        const _0x299577 = _0x478fc2,
            _0x2be877 = {
                'iZGyv': _0x299577(0x1b2),
                'vAsxn': function (_0x4a919f, _0x408dbd) {
                    return _0x4a919f(_0x408dbd);
                },
                'AubLa': function (_0x574096, _0x492ba5) {
                    return _0x574096(_0x492ba5);
                },
                'WBWlq': function (_0x5f23b5, _0x35bab1) {
                    return _0x5f23b5(_0x35bab1);
                },
                'CElVl': function (_0x6cafa7, _0x288564) {
                    return _0x6cafa7(_0x288564);
                },
                'zTUpb': function (_0x948738, _0x5923f6) {
                    return _0x948738(_0x5923f6);
                },
                'ZvZpJ': function (_0x5b81ae, _0x13766f) {
                    return _0x5b81ae / _0x13766f;
                },
                'IvsEr': function (_0x4ac9e4, _0x229ca4) {
                    return _0x4ac9e4(_0x229ca4);
                },
                'gxJHz': function (_0x512cdb, _0x42bfe5) {
                    return _0x512cdb * _0x42bfe5;
                },
                'DeQLP': function (_0x461f5f, _0x2aa841) {
                    return _0x461f5f * _0x2aa841;
                },
                'ZdXNl': function (_0x312733, _0x482d51, _0x1c5cde, _0x4465a, _0x554b3e, _0x226b75, _0x1f279e) {
                    return _0x312733(_0x482d51, _0x1c5cde, _0x4465a, _0x554b3e, _0x226b75, _0x1f279e);
                }
            },
            _0x595c33 = _0x576977,
            _0x1cfd5f = new Entity(Player[_0x2be877[_0x299577(0x2fc)]]())[_0x2be877[_0x299577(0x3e9)](_0x595c33, 0xd9c + 0x395 * -0x4 + 0x264)](),
            _0x5b37d3 = new Entity(Player[_0x2be877[_0x299577(0x1c1)](_0x595c33, -0x55 * 0x35 + 0xfc3 + 0x36d)]())[_0x2be877[_0x299577(0x2c7)](_0x595c33, -0xda1 + 0xb0 + 0xe6e)](),
            _0x175110 = new Entity(Player[_0x2be877[_0x299577(0x2fc)]]())[_0x2be877[_0x299577(0x2c7)](_0x595c33, -0x4e2 + -0x1e56 * 0x1 + 0x2520)](),
            _0x410ca7 = Player[_0x2be877[_0x299577(0x12b)](_0x595c33, 0x1304 + 0x1 * -0x289 + -0x44 * 0x37)](),
            _0x5e0091 = Player[_0x2be877[_0x299577(0x2bc)](_0x595c33, 0x191b + -0x1 * 0x129c + 0xb1 * -0x7)](),
            _0x52768c = Player[_0x2be877[_0x299577(0x1c1)](_0x595c33, 0x1f0b + -0x194f + 0x1 * -0x432)]();
        return _0x2be877[_0x299577(0x3a4)](Math[_0x2be877[_0x299577(0x3e4)](_0x595c33, 0x1 * -0xad9 + -0xc9 * -0x5 + 0x3 * 0x2ce)](_0x2be877[_0x299577(0x17d)](_0x2be877[_0x299577(0x92)](0xa3 * 0x2b + 0x3 * -0x6e3 + -0x11 * 0x64, _0x2be877[_0x299577(0x342)](distFormula, _0x1cfd5f, _0x5b37d3, _0x175110, _0x410ca7, _0x5e0091, _0x52768c)), 0x3 * -0xcd7 + -0x162a + 0x3cb9)), -0x223d + -0x1185 + 0x33cc);
    };
let lookable = ![];

function startPath() {
    const _0x1814c3 = _0x478fc2,
        _0x5d7f0f = {
            'PNKbP': function (_0x5a3e84, _0x47a23e, _0xfe8fb5, _0x469316) {
                return _0x5a3e84(_0x47a23e, _0xfe8fb5, _0x469316);
            },
            'VdPNm': function (_0x568e81, _0xc6ab9f) {
                return _0x568e81(_0xc6ab9f);
            },
            'xOUBh': function (_0x205e61, _0x5ad86e) {
                return _0x205e61(_0x5ad86e);
            },
            'ZfhQK': function (_0x345dbc, _0xd2b4b4) {
                return _0x345dbc === _0xd2b4b4;
            },
            'QHeBi': _0x1814c3(0x1bc),
            'xcwDN': function (_0x3a96f5, _0x45ff41) {
                return _0x3a96f5(_0x45ff41);
            },
            'XDvcn': function (_0x48a815, _0x3ef884, _0x1ef27c) {
                return _0x48a815(_0x3ef884, _0x1ef27c);
            }
        };
    currentUserPath = _0x5d7f0f[_0x1814c3(0x3a8)](pathTo, _0x5d7f0f[_0x1814c3(0xd0)](parseFloat, 0x4b2 * -0x7 + 0x1834 + -0x1 * -0x8bd), _0x5d7f0f[_0x1814c3(0x41c)](parseFloat, 0x12b2 * 0x2 + -0x24d9 * -0x1 + -0x49c5), _0x5d7f0f[_0x1814c3(0xd0)](parseFloat, -0x9ff * -0x3 + 0x2375 + -0x408d)), _0x5d7f0f[_0x1814c3(0x2b8)](setTimeout, () => {
        const _0xafc141 = _0x1814c3;
        if(!currentUserPath)
            currentUserPath = _0x5d7f0f[_0xafc141(0x3a8)](pathTo, _0x5d7f0f[_0xafc141(0x41c)](parseFloat, 0x270 + 0x1f4c * 0x1 + -0x21a9 * 0x1), _0x5d7f0f[_0xafc141(0x76)](parseFloat, -0x2 * -0x3b4 + 0xc1 * -0x32 + 0xfe * 0x1f), _0x5d7f0f[_0xafc141(0x41c)](parseFloat, 0x1960 + 0x1df1 + -0x60c * 0x9));
        if(_0x5d7f0f[_0xafc141(0x10c)](currentUserPath[_0x5d7f0f[_0xafc141(0x156)]], -0x5 * -0x18b + -0x6b * 0x4b + 0x17a2))
            return;
        !autoWalk && (autoWalk = !![]);
    }, 0x1fa4 + -0xa23 + -0x73 * 0x2f);
}

function _0x7930() {
    const _0x2563bd = _0x478fc2,
        _0x271aa8 = {
            'IarPq': _0x2563bd(0x33f),
            'egBGI': _0x2563bd(0x7b) + '_e',
            'Vadyh': _0x2563bd(0x127),
            'BAEWW': _0x2563bd(0xe2),
            'ZnVUe': _0x2563bd(0x2f0),
            'dEkhd': _0x2563bd(0x232),
            'sIrSR': _0x2563bd(0x311) + _0x2563bd(0x24a),
            'ipvwI': _0x2563bd(0x16a),
            'tWTsQ': _0x2563bd(0x39c) + _0x2563bd(0x120),
            'VnTLK': _0x2563bd(0x325) + _0x2563bd(0x376) + _0x2563bd(0x170) + _0x2563bd(0x1e2) + _0x2563bd(0x3b8) + _0x2563bd(0x41d),
            'nMnSu': _0x2563bd(0x34e) + _0x2563bd(0x206),
            'qXDjL': _0x2563bd(0x437) + '_a',
            'Bbryi': _0x2563bd(0x121),
            'NPwld': _0x2563bd(0x24c),
            'PqsQk': _0x2563bd(0x37d) + _0x2563bd(0x406),
            'nWTAV': _0x2563bd(0x372) + 'M',
            'zYZaF': _0x2563bd(0x42d),
            'qpbtV': _0x2563bd(0x11b),
            'uXfYn': _0x2563bd(0x3cd) + _0x2563bd(0x30d),
            'MCihv': _0x2563bd(0x15b) + _0x2563bd(0x207),
            'wMlEq': _0x2563bd(0x30c) + _0x2563bd(0x116),
            'dnuDE': _0x2563bd(0x107) + _0x2563bd(0x161),
            'CRPUF': _0x2563bd(0xdd) + _0x2563bd(0x250),
            'fxOWl': _0x2563bd(0x399),
            'OXzeh': _0x2563bd(0x3cb) + '.',
            'OYVhH': _0x2563bd(0x34e) + _0x2563bd(0x343),
            'BNeeH': _0x2563bd(0x266),
            'QoSxG': _0x2563bd(0x8a),
            'GsSmT': _0x2563bd(0x219) + _0x2563bd(0xed),
            'wAYPA': _0x2563bd(0x15a),
            'faQZh': _0x2563bd(0x3ec),
            'eeUhT': _0x2563bd(0x136),
            'FgHZv': _0x2563bd(0x27d),
            'wKjyC': _0x2563bd(0x277) + _0x2563bd(0x395),
            'byFDl': _0x2563bd(0x1bd),
            'LSJQn': _0x2563bd(0x1ba),
            'pxfVI': _0x2563bd(0x3cd) + _0x2563bd(0x1da),
            'KHOji': _0x2563bd(0x356),
            'eUJwl': _0x2563bd(0x162) + _0x2563bd(0x98),
            'rtOzo': _0x2563bd(0x341) + '_a',
            'OigCv': _0x2563bd(0x199) + _0x2563bd(0x40a),
            'wZYdk': _0x2563bd(0x238),
            'MKHII': _0x2563bd(0x239) + 'ls',
            'iPFhN': _0x2563bd(0x3f7) + '_j',
            'SUEqN': _0x2563bd(0x20c),
            'MwoiQ': _0x2563bd(0xb3),
            'LHtXn': _0x2563bd(0x261) + _0x2563bd(0x96),
            'MZPXM': _0x2563bd(0x1f5),
            'vMjKD': _0x2563bd(0x7e),
            'AmJTF': _0x2563bd(0x72),
            'Rmjli': _0x2563bd(0xc7),
            'EaRsN': _0x2563bd(0x28e),
            'pGBjT': _0x2563bd(0x40f),
            'gkFhW': _0x2563bd(0x271) + _0x2563bd(0x36c) + _0x2563bd(0x2b0) + _0x2563bd(0x325) + _0x2563bd(0x30a) + '.',
            'Xjrnc': _0x2563bd(0x257),
            'gNfQW': _0x2563bd(0x1c0),
            'NMWYG': _0x2563bd(0x21a) + _0x2563bd(0x251),
            'ghsdF': _0x2563bd(0x8d),
            'nbwMX': _0x2563bd(0x3b9),
            'GMOmN': _0x2563bd(0x333) + _0x2563bd(0x3ad),
            'MIPvg': _0x2563bd(0x38c) + _0x2563bd(0x31d),
            'Ccwot': _0x2563bd(0x181),
            'wZfjJ': _0x2563bd(0x103),
            'hdiBH': _0x2563bd(0x345) + 'at',
            'hZiPO': _0x2563bd(0x332),
            'jCzPK': _0x2563bd(0x119) + '+$',
            'rphDy': _0x2563bd(0x6b),
            'Ilwne': _0x2563bd(0x233) + _0x2563bd(0x2c6),
            'MtLNs': _0x2563bd(0x276) + '_p',
            'PRMdi': _0x2563bd(0xfe) + 'ry',
            'vhFoJ': _0x2563bd(0xf4),
            'yNBKL': _0x2563bd(0x1ef) + _0x2563bd(0x1b3) + _0x2563bd(0x11d) + _0x2563bd(0x141) + _0x2563bd(0x353),
            'GzxnF': _0x2563bd(0x214) + 'ft',
            'BxhXT': _0x2563bd(0x18f),
            'ABaVt': _0x2563bd(0x66) + '_c',
            'NmEsc': _0x2563bd(0x68),
            'hBKPg': _0x2563bd(0x43b) + _0x2563bd(0x2e4),
            'fFQMn': _0x2563bd(0x26a) + 'Lr',
            'OgmOI': _0x2563bd(0xd2),
            'XXusJ': _0x2563bd(0xdd) + _0x2563bd(0x2f7),
            'WfsBE': _0x2563bd(0x322),
            'rPWyZ': _0x2563bd(0x30e) + _0x2563bd(0xaf) + _0x2563bd(0x403) + _0x2563bd(0x93),
            'imZek': _0x2563bd(0x269),
            'pYBtS': _0x2563bd(0x201),
            'Avnxs': _0x2563bd(0x179),
            'lqANu': _0x2563bd(0x25f),
            'CLvZg': _0x2563bd(0x145),
            'RPqXE': _0x2563bd(0x427) + _0x2563bd(0x1bb),
            'nGDuN': _0x2563bd(0x26e) + _0x2563bd(0x3ab),
            'tnNDC': _0x2563bd(0x315) + _0x2563bd(0x15c),
            'LmHaZ': _0x2563bd(0x2eb) + _0x2563bd(0x402),
            'xasiN': _0x2563bd(0x347) + 's',
            'zPOpU': _0x2563bd(0x164),
            'XmZAh': _0x2563bd(0x38c) + _0x2563bd(0x138),
            'PQyOL': _0x2563bd(0x3fc),
            'tvOjn': _0x2563bd(0x2e2),
            'ydQgV': _0x2563bd(0x2b2) + _0x2563bd(0x17f),
            'XgIGq': _0x2563bd(0x362),
            'tfebx': _0x2563bd(0x3d6),
            'iFnTf': _0x2563bd(0xbb),
            'eoSDi': _0x2563bd(0x338),
            'UZEKa': _0x2563bd(0x158),
            'FjZMm': _0x2563bd(0x3f1) + _0x2563bd(0xa5),
            'ojVnO': _0x2563bd(0x319) + 'ht',
            'BOYhi': _0x2563bd(0x2de),
            'dThli': _0x2563bd(0x2da),
            'jIgsr': _0x2563bd(0x2ed) + _0x2563bd(0x2d9),
            'GuJHt': _0x2563bd(0x36b) + _0x2563bd(0x331) + _0x2563bd(0x101),
            'PVRQp': _0x2563bd(0x42f),
            'fLAmP': _0x2563bd(0x32a) + _0x2563bd(0x265) + _0x2563bd(0xd5) + _0x2563bd(0x34f) + '.',
            'qrMZJ': _0x2563bd(0x1d8) + _0x2563bd(0x33d),
            'fErHn': _0x2563bd(0x184),
            'EaHNK': _0x2563bd(0x370),
            'hmyjw': _0x2563bd(0x19c) + _0x2563bd(0xdb),
            'KqCxT': _0x2563bd(0xee),
            'rRnrU': _0x2563bd(0x88),
            'msDaH': _0x2563bd(0x1ec) + _0x2563bd(0x175),
            'TFBFo': _0x2563bd(0x1c2),
            'KCZpS': _0x2563bd(0x256),
            'kvYKl': _0x2563bd(0x2e0) + _0x2563bd(0x1b0),
            'YDPHd': _0x2563bd(0x411) + _0x2563bd(0xb1),
            'tTCAi': _0x2563bd(0x3c5) + 'sk',
            'xLMuP': _0x2563bd(0x3c0),
            'uWija': _0x2563bd(0x149),
            'xdYmL': _0x2563bd(0x280),
            'qmbUQ': _0x2563bd(0xf7),
            'oOsPk': _0x2563bd(0x2d4) + _0x2563bd(0x3e3),
            'DUWQx': _0x2563bd(0x3f2) + 'd',
            'Brgsb': _0x2563bd(0x283) + '_d',
            'LBYoP': _0x2563bd(0x2eb) + _0x2563bd(0xa0),
            'dRmkA': _0x2563bd(0x36d),
            'ZRULV': _0x2563bd(0x2a3),
            'GLDho': _0x2563bd(0x355),
            'tneTU': _0x2563bd(0x32e) + 'f',
            'KPnvJ': _0x2563bd(0x80) + 'ro',
            'aZpHA': _0x2563bd(0x3c6),
            'eWmzV': _0x2563bd(0x32b) + _0x2563bd(0x41b) + _0x2563bd(0x39b),
            'qTQpz': _0x2563bd(0x14e),
            'MxNdg': _0x2563bd(0x70),
            'FGuUH': _0x2563bd(0x16b) + '_l',
            'ZtivF': _0x2563bd(0x126),
            'DwriK': _0x2563bd(0x34e) + _0x2563bd(0x2b4),
            'ERzsc': _0x2563bd(0xcd) + 'er',
            'lFxFb': _0x2563bd(0x3b2),
            'SJWeM': _0x2563bd(0x2f2),
            'CAqXs': _0x2563bd(0x25a),
            'EsbLo': _0x2563bd(0x388),
            'yokol': _0x2563bd(0x38e) + 'e',
            'nCeXr': _0x2563bd(0x3c3) + _0x2563bd(0x224),
            'NHMJD': _0x2563bd(0xff) + _0x2563bd(0x316),
            'iTEUH': _0x2563bd(0x2ba),
            'XXJWZ': _0x2563bd(0x39e),
            'DFNdC': _0x2563bd(0x3f6),
            'cRNfE': _0x2563bd(0x253) + _0x2563bd(0x416),
            'XsXDC': _0x2563bd(0xe7) + _0x2563bd(0x28b) + _0x2563bd(0xe3) + _0x2563bd(0xe5) + _0x2563bd(0x31a),
            'QYeih': _0x2563bd(0x173) + 'g',
            'Gpzzw': _0x2563bd(0x1b2),
            'OEPGz': _0x2563bd(0x421),
            'EodKa': _0x2563bd(0x42b),
            'KyeOY': _0x2563bd(0x3cd) + _0x2563bd(0x135),
            'ZxIhd': _0x2563bd(0x3f0),
            'VcHsr': _0x2563bd(0x17a),
            'jfxOg': _0x2563bd(0x411) + _0x2563bd(0x1e7) + _0x2563bd(0x122) + _0x2563bd(0x140),
            'TSxBS': _0x2563bd(0x1bc),
            'iZgVm': _0x2563bd(0x134) + 'i.',
            'lpGfv': _0x2563bd(0x419) + '_x',
            'HLXJQ': _0x2563bd(0x139),
            'mzRvG': _0x2563bd(0x2cc),
            'fGrXs': _0x2563bd(0x14f) + _0x2563bd(0x2dc),
            'wMjKm': _0x2563bd(0x10d),
            'NtbQY': _0x2563bd(0x34e) + _0x2563bd(0x1b9),
            'OsBIa': _0x2563bd(0x414),
            'WPxyr': _0x2563bd(0x203) + _0x2563bd(0x43c),
            'EKrKj': function (_0x4e2865) {
                return _0x4e2865();
            }
        },
        _0x217192 = [
            _0x271aa8[_0x2563bd(0x3e2)],
            _0x271aa8[_0x2563bd(0x31f)],
            _0x271aa8[_0x2563bd(0x3c1)],
            _0x271aa8[_0x2563bd(0x3dd)],
            _0x271aa8[_0x2563bd(0x286)],
            _0x271aa8[_0x2563bd(0xdc)],
            _0x271aa8[_0x2563bd(0xb8)],
            _0x271aa8[_0x2563bd(0x133)],
            _0x271aa8[_0x2563bd(0x1c5)],
            _0x271aa8[_0x2563bd(0x2fd)],
            _0x271aa8[_0x2563bd(0x200)],
            _0x271aa8[_0x2563bd(0x1c9)],
            _0x271aa8[_0x2563bd(0x1be)],
            _0x271aa8[_0x2563bd(0xd3)],
            _0x271aa8[_0x2563bd(0xd7)],
            _0x271aa8[_0x2563bd(0x1ff)],
            _0x271aa8[_0x2563bd(0x83)],
            _0x271aa8[_0x2563bd(0x212)],
            _0x271aa8[_0x2563bd(0x242)],
            _0x271aa8[_0x2563bd(0x263)],
            _0x271aa8[_0x2563bd(0x67)],
            _0x271aa8[_0x2563bd(0x3db)],
            _0x271aa8[_0x2563bd(0x436)],
            _0x271aa8[_0x2563bd(0x330)],
            _0x271aa8[_0x2563bd(0x369)],
            _0x271aa8[_0x2563bd(0x2e5)],
            _0x271aa8[_0x2563bd(0x128)],
            _0x271aa8[_0x2563bd(0x15e)],
            _0x271aa8[_0x2563bd(0x2ca)],
            _0x271aa8[_0x2563bd(0x3e5)],
            _0x271aa8[_0x2563bd(0x35a)],
            _0x271aa8[_0x2563bd(0x2bb)],
            _0x271aa8[_0x2563bd(0x3bb)],
            _0x271aa8[_0x2563bd(0x132)],
            _0x271aa8[_0x2563bd(0xc5)],
            _0x271aa8[_0x2563bd(0x3a3)],
            _0x271aa8[_0x2563bd(0x32f)],
            _0x271aa8[_0x2563bd(0x14c)],
            _0x271aa8[_0x2563bd(0x352)],
            _0x271aa8[_0x2563bd(0x71)],
            _0x271aa8[_0x2563bd(0x130)],
            _0x271aa8[_0x2563bd(0x2e3)],
            _0x271aa8[_0x2563bd(0x426)],
            _0x271aa8[_0x2563bd(0x361)],
            _0x271aa8[_0x2563bd(0x3ac)],
            _0x271aa8[_0x2563bd(0x9c)],
            _0x271aa8[_0x2563bd(0x1a9)],
            _0x271aa8[_0x2563bd(0x43a)],
            _0x271aa8[_0x2563bd(0xb0)],
            _0x271aa8[_0x2563bd(0x386)],
            _0x271aa8[_0x2563bd(0x3c8)],
            _0x271aa8[_0x2563bd(0xaa)],
            _0x271aa8[_0x2563bd(0x1a0)],
            _0x271aa8[_0x2563bd(0x2dd)],
            _0x271aa8[_0x2563bd(0x26f)],
            _0x271aa8[_0x2563bd(0x382)],
            _0x271aa8[_0x2563bd(0x2be)],
            _0x271aa8[_0x2563bd(0x1a4)],
            _0x271aa8[_0x2563bd(0xa8)],
            _0x271aa8[_0x2563bd(0x1d3)],
            _0x271aa8[_0x2563bd(0x236)],
            _0x271aa8[_0x2563bd(0x404)],
            _0x271aa8[_0x2563bd(0x314)],
            _0x271aa8[_0x2563bd(0x1ab)],
            _0x271aa8[_0x2563bd(0x10f)],
            _0x271aa8[_0x2563bd(0x41a)],
            _0x271aa8[_0x2563bd(0x1cd)],
            _0x271aa8[_0x2563bd(0x1f0)],
            _0x271aa8[_0x2563bd(0xe6)],
            _0x271aa8[_0x2563bd(0x1d5)],
            _0x271aa8[_0x2563bd(0x2df)],
            _0x271aa8[_0x2563bd(0x2a7)],
            _0x271aa8[_0x2563bd(0xe1)],
            _0x271aa8[_0x2563bd(0x8b)],
            _0x271aa8[_0x2563bd(0x22b)],
            _0x271aa8[_0x2563bd(0x151)],
            _0x271aa8[_0x2563bd(0x1c6)],
            _0x271aa8[_0x2563bd(0x317)],
            _0x271aa8[_0x2563bd(0x1d6)],
            _0x271aa8[_0x2563bd(0x1eb)],
            _0x271aa8[_0x2563bd(0x26d)],
            _0x271aa8[_0x2563bd(0x1a6)],
            _0x271aa8[_0x2563bd(0x11f)],
            _0x271aa8[_0x2563bd(0x168)],
            _0x271aa8[_0x2563bd(0x357)],
            _0x271aa8[_0x2563bd(0x90)],
            _0x271aa8[_0x2563bd(0x18d)],
            _0x271aa8[_0x2563bd(0x401)],
            _0x271aa8[_0x2563bd(0x223)],
            _0x271aa8[_0x2563bd(0x81)],
            _0x271aa8[_0x2563bd(0x3b1)],
            _0x271aa8[_0x2563bd(0x2cd)],
            _0x271aa8[_0x2563bd(0x216)],
            _0x271aa8[_0x2563bd(0xc9)],
            _0x271aa8[_0x2563bd(0x377)],
            _0x271aa8[_0x2563bd(0x202)],
            _0x271aa8[_0x2563bd(0xa7)],
            _0x271aa8[_0x2563bd(0x3dc)],
            _0x271aa8[_0x2563bd(0x16d)],
            _0x271aa8[_0x2563bd(0x282)],
            _0x271aa8[_0x2563bd(0x1d1)],
            _0x271aa8[_0x2563bd(0x111)],
            _0x271aa8[_0x2563bd(0x329)],
            _0x271aa8[_0x2563bd(0x425)],
            _0x271aa8[_0x2563bd(0x2fb)],
            _0x271aa8[_0x2563bd(0x105)],
            _0x271aa8[_0x2563bd(0x262)],
            _0x271aa8[_0x2563bd(0x25c)],
            _0x271aa8[_0x2563bd(0x14a)],
            _0x271aa8[_0x2563bd(0x21c)],
            _0x271aa8[_0x2563bd(0x3da)],
            _0x271aa8[_0x2563bd(0x19b)],
            _0x271aa8[_0x2563bd(0x12e)],
            _0x271aa8[_0x2563bd(0x13a)],
            _0x271aa8[_0x2563bd(0x20a)],
            _0x271aa8[_0x2563bd(0x220)],
            _0x271aa8[_0x2563bd(0x1e6)],
            _0x271aa8[_0x2563bd(0x218)],
            _0x271aa8[_0x2563bd(0x351)],
            _0x271aa8[_0x2563bd(0x226)],
            _0x271aa8[_0x2563bd(0x344)],
            _0x271aa8[_0x2563bd(0x2f5)],
            _0x271aa8[_0x2563bd(0x3fd)],
            _0x271aa8[_0x2563bd(0x29f)],
            _0x271aa8[_0x2563bd(0x3b5)],
            _0x271aa8[_0x2563bd(0x115)],
            _0x271aa8[_0x2563bd(0x306)],
            _0x271aa8[_0x2563bd(0x1d2)],
            _0x271aa8[_0x2563bd(0x2cb)],
            _0x271aa8[_0x2563bd(0x346)],
            _0x271aa8[_0x2563bd(0x3af)],
            _0x271aa8[_0x2563bd(0x26c)],
            _0x271aa8[_0x2563bd(0x3fe)],
            _0x271aa8[_0x2563bd(0x3f4)],
            _0x271aa8[_0x2563bd(0x308)],
            _0x271aa8[_0x2563bd(0x75)],
            _0x271aa8[_0x2563bd(0xeb)],
            _0x271aa8[_0x2563bd(0x13c)],
            _0x271aa8[_0x2563bd(0x2c0)],
            _0x271aa8[_0x2563bd(0x390)],
            _0x271aa8[_0x2563bd(0x117)],
            _0x271aa8[_0x2563bd(0x1f6)],
            _0x271aa8[_0x2563bd(0x3b7)],
            _0x271aa8[_0x2563bd(0x23f)],
            _0x271aa8[_0x2563bd(0x363)],
            _0x271aa8[_0x2563bd(0xc2)],
            _0x271aa8[_0x2563bd(0x260)],
            _0x271aa8[_0x2563bd(0x3b3)],
            _0x271aa8[_0x2563bd(0x40d)],
            _0x271aa8[_0x2563bd(0x19f)],
            _0x271aa8[_0x2563bd(0xef)],
            _0x271aa8[_0x2563bd(0x8f)],
            _0x271aa8[_0x2563bd(0x33b)],
            _0x271aa8[_0x2563bd(0xe0)],
            _0x271aa8[_0x2563bd(0x28f)],
            _0x271aa8[_0x2563bd(0x3c7)],
            _0x271aa8[_0x2563bd(0x8e)],
            _0x271aa8[_0x2563bd(0x2af)],
            _0x271aa8[_0x2563bd(0x337)],
            _0x271aa8[_0x2563bd(0x247)],
            _0x271aa8[_0x2563bd(0x100)],
            _0x271aa8[_0x2563bd(0x2f8)],
            _0x271aa8[_0x2563bd(0x447)],
            _0x271aa8[_0x2563bd(0x2bf)],
            _0x271aa8[_0x2563bd(0x3d0)],
            _0x271aa8[_0x2563bd(0x94)],
            _0x271aa8[_0x2563bd(0xbd)],
            _0x271aa8[_0x2563bd(0x20d)],
            _0x271aa8[_0x2563bd(0x287)],
            _0x271aa8[_0x2563bd(0x225)],
            _0x271aa8[_0x2563bd(0xce)],
            _0x271aa8[_0x2563bd(0x336)],
            _0x271aa8[_0x2563bd(0x367)]
        ];
    return _0x7930 = function () {
        return _0x217192;
    }, _0x271aa8[_0x2563bd(0x340)](_0x7930);
}
const walkOn = _0x269dc2 => {
        const _0x367451 = _0x478fc2,
            _0x4c96ae = {
                'Yojlv': function (_0x2595a1, _0xf57b60, _0x57c241, _0x62e70f, _0x182c48, _0xfc0477, _0x2604fb) {
                    return _0x2595a1(_0xf57b60, _0x57c241, _0x62e70f, _0x182c48, _0xfc0477, _0x2604fb);
                },
                'fVkQe': function (_0x4ea104, _0x144885) {
                    return _0x4ea104 <= _0x144885;
                },
                'MIsvp': function (_0x42f5de, _0x3a2809) {
                    return _0x42f5de !== _0x3a2809;
                },
                'dAZlC': function (_0x5d4621, _0x48367b) {
                    return _0x5d4621(_0x48367b);
                },
                'rJdqz': function (_0x156f6d, _0x584558) {
                    return _0x156f6d - _0x584558;
                },
                'lNiWT': _0x367451(0x1bc),
                'IdvQM': function (_0x49f2d9, _0x3a364f) {
                    return _0x49f2d9 + _0x3a364f;
                },
                'FNRMJ': function (_0x21f873, _0x5107a1) {
                    return _0x21f873 !== _0x5107a1;
                },
                'zGoMH': function (_0x57c9d7, _0xcf6015) {
                    return _0x57c9d7(_0xcf6015);
                },
                'CvKXv': function (_0x1c2ef7, _0x321c35) {
                    return _0x1c2ef7 / _0x321c35;
                },
                'hwfeT': function (_0x1407b9, _0x52d6f9) {
                    return _0x1407b9 * _0x52d6f9;
                },
                'KaBKv': _0x367451(0x1c0),
                'YktuP': function (_0x430dfc, _0x3f6090) {
                    return _0x430dfc / _0x3f6090;
                },
                'dvJCs': function (_0x21932f, _0x173c85) {
                    return _0x21932f(_0x173c85);
                },
                'IFjZx': function (_0x4a30c6, _0x169052) {
                    return _0x4a30c6(_0x169052);
                },
                'ttgeI': function (_0x29dfbf, _0x10f71e) {
                    return _0x29dfbf / _0x10f71e;
                },
                'OiTrd': function (_0x333d69, _0x1a05e8) {
                    return _0x333d69(_0x1a05e8);
                },
                'BKRNh': _0x367451(0x3b2),
                'MFOHV': function (_0x7bfee2, _0x10a35a) {
                    return _0x7bfee2(_0x10a35a);
                },
                'HjFkB': function (_0x3162e8, _0x57de60) {
                    return _0x3162e8 === _0x57de60;
                },
                'LbzsB': _0x367451(0x2f6),
                'uqiZH': function (_0x3a7e91, _0x318585) {
                    return _0x3a7e91 < _0x318585;
                },
                'Umwoi': function (_0x3c4bc8, _0x261e37, _0xd7461, _0x144a10) {
                    return _0x3c4bc8(_0x261e37, _0xd7461, _0x144a10);
                },
                'ahRTx': function (_0x1733cd, _0x26c9a9) {
                    return _0x1733cd > _0x26c9a9;
                },
                'HPywQ': function (_0x27f4d1, _0x5bf092) {
                    return _0x27f4d1 > _0x5bf092;
                },
                'dxkOY': _0x367451(0xbb),
                'hjxba': function (_0x39c59c, _0x170cdc) {
                    return _0x39c59c(_0x170cdc);
                },
                'RYqRf': function (_0x3acabe, _0x1a84df) {
                    return _0x3acabe(_0x1a84df);
                },
                'sFStz': function (_0x321752, _0x5a7669, _0x4f77b0) {
                    return _0x321752(_0x5a7669, _0x4f77b0);
                },
                'EOoVR': function (_0x2c1a75, _0xfd7777) {
                    return _0x2c1a75 + _0xfd7777;
                },
                'sLylx': function (_0x3af487, _0x326a88) {
                    return _0x3af487 === _0x326a88;
                },
                'EfvEY': function (_0x59930f, _0x5a9090) {
                    return _0x59930f + _0x5a9090;
                },
                'zKYqq': _0x367451(0x33f)
            },
            _0x47fa80 = _0x576977,
            _0xa32989 = _0x4c96ae[_0x367451(0x1ea)](Math[_0x4c96ae[_0x367451(0x2d7)](_0x47fa80, 0x7f0 + 0x1 * -0x2521 + 0x5 * 0x623)](_0x4c96ae[_0x367451(0x1c8)](Player[_0x4c96ae[_0x367451(0x3a0)]](), 0x24a + 0xed5 * -0x2 + 0xf2 * 0x1d)), 0x1 * 0x1733 + 0x1 * 0x1c6d + 0x1 * -0x3396),
            _0x2d12b4 = _0x4c96ae[_0x367451(0x267)](Math[_0x4c96ae[_0x367451(0x1ed)](_0x47fa80, -0x33f + -0xba6 + -0x5 * -0x347)](_0x4c96ae[_0x367451(0x1c8)](Player[_0x4c96ae[_0x367451(0x2ef)](_0x47fa80, 0x2458 + 0xdb0 + -0x3060)](), -0xf7a + 0x87e * -0x3 + 0x28fe)), -0xbd5 * 0x1 + 0x13d3 + -0x2 * 0x3fa),
            _0x560058 = _0x4c96ae[_0x367451(0x237)](Math[_0x4c96ae[_0x367451(0x23a)](_0x47fa80, -0x7 * 0x35f + 0x116e + -0x25 * -0x35)](_0x4c96ae[_0x367451(0x1c8)](Player[_0x4c96ae[_0x367451(0x222)]](), -0xf * -0xb1 + -0x215 * 0x1 + 0xb * -0xc0)), 0xd7a + -0x26de + 0x196e);
        let _0x104187 = 0x825 * 0x4 + 0x1b2c + -0x3bb6 * 0x1,
            _0x46b80c = null,
            _0x44dbec = null,
            _0x186ab3 = null;
        _0x269dc2[_0x4c96ae[_0x367451(0x2b3)](_0x47fa80, 0x2 * -0xfb0 + -0x3 * 0xc20 + 0x45a6 * 0x1)](_0x22a71e => {
            const _0x3c42f9 = _0x367451,
                _0x33398d = _0x47fa80;
            let _0x3739de = _0x4c96ae[_0x3c42f9(0x9e)](calculateDistance, _0xa32989, _0x2d12b4, _0x560058, _0x22a71e['x'], _0x22a71e['y'], _0x22a71e['z']);
            _0x4c96ae[_0x3c42f9(0x3d7)](_0x3739de, _0x104187) && (_0x104187 = _0x3739de, _0x46b80c = _0x22a71e, _0x4c96ae[_0x3c42f9(0x163)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x74)](_0x33398d, -0x1954 + 0x19b * -0xc + 0x93d * 0x5)](_0x22a71e), _0x4c96ae[_0x3c42f9(0x442)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x43e)]], -0x11af + 0x1 * 0x117a + 0x36)) && (_0x44dbec = _0x269dc2[_0x4c96ae[_0x3c42f9(0x298)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x74)](_0x33398d, -0x845 + 0xc6d * -0x1 + 0x164b)](_0x22a71e), -0x3cf + -0x9 * 0x155 + 0xfcd)]), _0x4c96ae[_0x3c42f9(0x22c)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x74)](_0x33398d, 0x591 + -0xc5d + -0x1 * -0x865)](_0x22a71e), _0x4c96ae[_0x3c42f9(0x442)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x43e)]], 0x2295 + 0x1 * 0x9f7 + -0x2c8a)) && (_0x186ab3 = _0x269dc2[_0x4c96ae[_0x3c42f9(0x298)](_0x269dc2[_0x4c96ae[_0x3c42f9(0x2d7)](_0x33398d, 0x177 * -0x9 + 0x1 * 0x16e5 + 0x81d * -0x1)](_0x22a71e), -0x259a + -0x1844 * -0x1 + -0x1ab * -0x8)]));
        });
        if(_0x4c96ae[_0x367451(0x22c)](_0x46b80c, null) && _0x4c96ae[_0x367451(0x163)](_0x44dbec, null)) {
            if(_0x4c96ae[_0x367451(0x221)](_0x46b80c, _0x269dc2[_0x4c96ae[_0x367451(0x442)](_0x269dc2[_0x4c96ae[_0x367451(0x74)](_0x47fa80, -0x160c * 0x1 + -0x2d + -0x17d7 * -0x1)], -0x1f3 * -0x5 + 0x2509 * 0x1 + -0x2ec7)]))
                return !![];
            const _0x33cd21 = Math[_0x4c96ae[_0x367451(0x129)]](Player[_0x4c96ae[_0x367451(0x2ef)](_0x47fa80, 0xf04 + -0x89b * -0x3 + -0x26fa)]());
            if(!rotmode) {
                if(_0x4c96ae[_0x367451(0x22c)](_0xa32989, _0x44dbec['x']) && _0x4c96ae[_0x367451(0x188)](_0xa32989, _0x44dbec['x']))
                    _0x4c96ae[_0x367451(0x1f2)](getBind, 'X', 'P', _0x33cd21);
                if(_0x4c96ae[_0x367451(0x22c)](_0xa32989, _0x44dbec['x']) && _0x4c96ae[_0x367451(0x34d)](_0xa32989, _0x44dbec['x']))
                    _0x4c96ae[_0x367451(0x1f2)](getBind, 'X', 'N', _0x33cd21);
                if(_0x4c96ae[_0x367451(0x22c)](_0x560058, _0x44dbec['z']) && _0x4c96ae[_0x367451(0x188)](_0x560058, _0x44dbec['z']))
                    _0x4c96ae[_0x367451(0x1f2)](getBind, 'Z', 'P', _0x33cd21);
                if(_0x4c96ae[_0x367451(0x22c)](_0x560058, _0x44dbec['z']) && _0x4c96ae[_0x367451(0x19a)](_0x560058, _0x44dbec['z']))
                    _0x4c96ae[_0x367451(0x1f2)](getBind, 'Z', 'N', _0x33cd21);
            } else {
                if(lookable)
                    return;
                lookable = !![], started = !![], forwardBind[_0x4c96ae[_0x367451(0x313)]](!![]), _0x4c96ae[_0x367451(0x23a)](lookAtBlock, new net[(_0x4c96ae[_0x367451(0x23a)](_0x47fa80, -0x1d * -0xb3 + -0x11 * 0x4 + -0x120d))][(_0x4c96ae[_0x367451(0x359)](_0x47fa80, -0x1 * -0x2e1 + -0x144a + 0x1 * 0x1363))][(_0x4c96ae[_0x367451(0x310)](_0x47fa80, 0x1 * -0x1e44 + -0x1a4c + -0x3a8d * -0x1))](_0x186ab3['x'], _0x186ab3['y'], _0x186ab3['z'])), _0x4c96ae[_0x367451(0x152)](setTimeout, () => {
                    lookable = ![];
                }, 0x13ea + 0x1cdb + -0x9b2 * 0x5);
            }
            if(_0x4c96ae[_0x367451(0x221)](_0x4c96ae[_0x367451(0x273)](_0x46b80c['y'], 0x1 * -0x511 + 0x1 * -0x616 + 0xb28), _0x44dbec['y']) || _0x4c96ae[_0x367451(0x40e)](_0x4c96ae[_0x367451(0x305)](Math[_0x4c96ae[_0x367451(0x2b3)](_0x47fa80, -0x22f1 + 0x1e1c + 0x653)](Player[_0x4c96ae[_0x367451(0xc4)]]()), 0x1dfd + -0x2 * 0x6a + -0x1d28 + 0.5), _0x44dbec['y']))
                jumpBind[_0x4c96ae[_0x367451(0x359)](_0x47fa80, 0x1802 + 0x169c + 0x5a8 * -0x8)](!![]);
            else
                jumpBind[_0x4c96ae[_0x367451(0x313)]](![]);
            return ![];
        }
    },
    calculateDistance = (_0xe11329, _0xf950de, _0x48fd39, _0x3a5393, _0x34008c, _0x3b69c2) => {
        const _0x25e0e2 = _0x478fc2,
            _0x17ed48 = {
                'NVCSg': function (_0x51c0c4, _0xd9cb7c) {
                    return _0x51c0c4(_0xd9cb7c);
                },
                'SWUae': function (_0x55bb2f, _0x19b056) {
                    return _0x55bb2f + _0x19b056;
                },
                'RtcRv': function (_0x5f278f, _0x24518d) {
                    return _0x5f278f + _0x24518d;
                },
                'nxAAt': function (_0x453033, _0x4778b3) {
                    return _0x453033 ** _0x4778b3;
                },
                'yXUIB': function (_0x52e305, _0x5418b7) {
                    return _0x52e305 - _0x5418b7;
                },
                'uxAHg': function (_0x15e46b, _0x35ac3a) {
                    return _0x15e46b ** _0x35ac3a;
                }
            },
            _0x258753 = _0x576977;
        return Math[_0x17ed48[_0x25e0e2(0x3ee)](_0x258753, -0x74f * -0x4 + -0x82d + -0x137d)](_0x17ed48[_0x25e0e2(0x35b)](_0x17ed48[_0x25e0e2(0x6d)](_0x17ed48[_0x25e0e2(0xe4)](_0x17ed48[_0x25e0e2(0x19e)](_0x3a5393, _0xe11329), 0x1258 * -0x1 + 0x1ce6 + -0xa8c), _0x17ed48[_0x25e0e2(0x1e1)](_0x17ed48[_0x25e0e2(0x19e)](_0x34008c, _0xf950de), 0x1132 + 0x123e + -0x236e)), _0x17ed48[_0x25e0e2(0xe4)](_0x17ed48[_0x25e0e2(0x19e)](_0x3b69c2, _0x48fd39), -0x6a * 0x4f + 0x768 + 0x1950)));
    };
let prefix = _0x576977(0x1 * -0x3c7 + 0x1cfc + -0x173c),
    sleepPing = 0x285 + 0x1b3b + -0x725 * 0x4;
class state {
    constructor(_0x525752) {
            const _0x25363d = _0x478fc2,
                _0x50b62d = {
                    'JiXYr': _0x25363d(0x1bd)
                };
            this[_0x50b62d[_0x25363d(0xf1)]] = _0x525752;
        }
        [_0x478fc2(0x42f)]() {
            const _0xd52abb = _0x478fc2,
                _0x430064 = {
                    'VwYZH': function (_0x1ebc94, _0x21c272) {
                        return _0x1ebc94(_0x21c272);
                    }
                },
                _0x465833 = _0x576977;
            return this[_0x430064[_0xd52abb(0x112)](_0x465833, -0x174b + 0x382 * 0x5 + 0x78b * 0x1)];
        }
        [_0x576977(0x14bf * 0x1 + 0xbba * -0x1 + -0x7a7)](_0x483449) {
            const _0x1b9531 = _0x478fc2,
                _0x3d970c = {
                    'rGzTt': _0x1b9531(0x1bd)
                };
            this[_0x3d970c[_0x1b9531(0x380)]] = _0x483449;
        }
    static[_0x576977(0x26 * 0x6 + -0x11 * -0x1bb + 0x2 * -0xe5f)] = _0x478fc2(0x2ba);
    static[_0x478fc2(0x27d)] = _0x576977(0x204f + -0x1df9 * -0x1 + -0x3c80);
    static[_0x576977(-0x181c + 0x17 * -0xca + 0x2c1c)] = _0x576977(-0x125b + 0x77 * -0xe + -0x1ab7 * -0x1);
    static[_0x576977(-0x1 * 0x1d21 + -0x5 * -0x33d + -0x9b * -0x18)] = _0x576977(0xc8a + -0x2 * 0xbec + 0xce6);
    static[_0x576977(0x16b5 + 0x3c7 * -0x5 + 0x2 * -0x131)] = _0x478fc2(0x1c2);
    static[_0x576977(0x21ca + -0x17d3 + -0x59 * 0x17)] = _0x576977(-0x1 * 0x16c0 + 0x25 * 0x14 + -0x2 * -0xaea);
    static[_0x576977(-0x3b * 0xa4 + 0x18 * 0x61 + 0x1e7b)] = _0x576977(0x69 * 0x25 + 0x712 + 0x20c * -0xa);
}
let State = new state(state[_0x576977(-0x1f98 + -0x29 * -0x2f + 0x19a9)]);
const click = (_0x196ab1, _0x169ef0, _0x8e4f6) => {
    const _0x2b8e04 = _0x478fc2,
        _0x20dab7 = {
            'MDRrV': function (_0x23f618, _0x30dd43) {
                return _0x23f618(_0x30dd43);
            },
            'xNTbg': function (_0x58c449, _0x59f534) {
                return _0x58c449(_0x59f534);
            }
        },
        _0x5c9944 = _0x576977;
    if(!Client[_0x20dab7[_0x2b8e04(0x415)](_0x5c9944, 0x11 * -0x61 + -0xd81 + 0x15bd)])
        return;
    if(!going)
        return ![];
    const _0x1a30ad = Player[_0x20dab7[_0x2b8e04(0x24f)](_0x5c9944, 0x3a6 * -0x2 + -0x1d35 + -0x3 * -0xcae)]();
    _0x1a30ad[_0x20dab7[_0x2b8e04(0x24f)](_0x5c9944, 0xda8 * 0x1 + 0xa * -0x193 + -0x3fb * -0x1)](_0x196ab1, _0x169ef0, _0x8e4f6);
};
let invalidClicks = -0x1 * -0x138b + -0x7 * 0x35 + -0x1218;
const click2 = (_0x22744c, _0x695b75, _0x12ed68) => {
        const _0x2ebb4e = _0x478fc2,
            _0xf2b5eb = {
                'RLdCk': function (_0x3571d3, _0x177ca1) {
                    return _0x3571d3(_0x177ca1);
                },
                'Qruac': _0x2ebb4e(0xcd) + 'er',
                'aNVKT': function (_0x2e7b56, _0xb42fa8) {
                    return _0x2e7b56(_0xb42fa8);
                }
            },
            _0x12c534 = _0x576977;
        if(!Client[_0xf2b5eb[_0x2ebb4e(0x295)](_0x12c534, 0x10 * -0x14c + 0x1e2d + 0x3d1 * -0x2)])
            return;
        if(!going)
            return ![];
        const _0x1bc73b = Player[_0xf2b5eb[_0x2ebb4e(0x16f)]]();
        _0x1bc73b[_0xf2b5eb[_0x2ebb4e(0x441)](_0x12c534, 0x8fe + -0x23c5 + 0x1cac)](_0x22744c, _0x695b75, _0x12ed68), invalidClicks++;
    },
    start = new Thread(() => {
        const _0x3ea63c = _0x478fc2,
            _0x3ad72f = {
                'RExpT': _0x3ea63c(0x2cc),
                'bpitT': _0x3ea63c(0x214) + 'ft',
                'DGRTI': function (_0x2944f9, _0xe4a5ae) {
                    return _0x2944f9(_0xe4a5ae);
                },
                'FCxIT': _0x3ea63c(0xb3),
                'lUldM': function (_0x483604, _0x1a34d0, _0x1791f9) {
                    return _0x483604(_0x1a34d0, _0x1791f9);
                },
                'yVMJi': function (_0x523300, _0x13ae47) {
                    return _0x523300 - _0x13ae47;
                },
                'FYzst': function (_0x895f6f, _0x5461f9) {
                    return _0x895f6f(_0x5461f9);
                },
                'OUNJo': _0x3ea63c(0x1bc),
                'sKhQO': function (_0x55bd1d, _0x3cf53f) {
                    return _0x55bd1d > _0x3cf53f;
                },
                'vsYiF': function (_0x3d3224, _0x3d541a) {
                    return _0x3d3224(_0x3d541a);
                },
                'HltPi': function (_0x5d3388, _0x39d239) {
                    return _0x5d3388(_0x39d239);
                },
                'xMxnN': function (_0x1489d3, _0x37129f) {
                    return _0x1489d3(_0x37129f);
                },
                'dPJXv': function (_0x5cb663, _0x2aa493) {
                    return _0x5cb663(_0x2aa493);
                },
                'uZBOU': function (_0x441fc7, _0x284343) {
                    return _0x441fc7(_0x284343);
                },
                'Ryswm': function (_0x13ffc2, _0x2bfa26) {
                    return _0x13ffc2(_0x2bfa26);
                },
                'BDlyt': function (_0x5af2e9, _0x39ffaf) {
                    return _0x5af2e9 !== _0x39ffaf;
                },
                'uTpLA': _0x3ea63c(0x72),
                'MTqox': function (_0x31565f, _0x3190d3) {
                    return _0x31565f(_0x3190d3);
                },
                'zmXJs': function (_0x46295a, _0x372162) {
                    return _0x46295a !== _0x372162;
                },
                'sShel': function (_0x58185a, _0x7c7dcd) {
                    return _0x58185a(_0x7c7dcd);
                },
                'IbNyX': function (_0x454e4b, _0x3d016f) {
                    return _0x454e4b(_0x3d016f);
                },
                'CjqtX': function (_0x3357f9, _0xd0757f) {
                    return _0x3357f9 !== _0xd0757f;
                },
                'azAkt': function (_0x124f05, _0x3468e8) {
                    return _0x124f05 == _0x3468e8;
                },
                'cUbbn': function (_0x9bed6, _0x5f3165) {
                    return _0x9bed6(_0x5f3165);
                },
                'nexWR': function (_0x12400a, _0x49b301) {
                    return _0x12400a + _0x49b301;
                },
                'goNkc': function (_0x51d83a, _0x699ec8) {
                    return _0x51d83a(_0x699ec8);
                },
                'mSJem': function (_0x26ff4c, _0x2ad8ad) {
                    return _0x26ff4c(_0x2ad8ad);
                },
                'gnVvl': function (_0x1b1783, _0x3bde02, _0x5d7244) {
                    return _0x1b1783(_0x3bde02, _0x5d7244);
                },
                'XNzOY': function (_0x2b37c4, _0x2c45a6) {
                    return _0x2b37c4 == _0x2c45a6;
                },
                'ONXqj': function (_0x339d10, _0x34d6c8) {
                    return _0x339d10 == _0x34d6c8;
                },
                'AuOQQ': function (_0x5595d4, _0x269c86) {
                    return _0x5595d4 + _0x269c86;
                },
                'ShFXz': _0x3ea63c(0x433) + _0x3ea63c(0x1e0) + _0x3ea63c(0xb4),
                'jZhfA': _0x3ea63c(0xbb),
                'UraZH': _0x3ea63c(0x238),
                'DLJcy': function (_0x11ac89, _0xec555c, _0x465d5b, _0x272e64) {
                    return _0x11ac89(_0xec555c, _0x465d5b, _0x272e64);
                },
                'RTZnt': function (_0x4e468f, _0x403eed) {
                    return _0x4e468f(_0x403eed);
                },
                'oyxSf': function (_0x3165fc, _0x170f8f) {
                    return _0x3165fc(_0x170f8f);
                },
                'QyPyS': function (_0x1d3256, _0x8be3d3, _0x2be3e1, _0x1617b3) {
                    return _0x1d3256(_0x8be3d3, _0x2be3e1, _0x1617b3);
                },
                'wSBNN': function (_0x43d9d8, _0x25f1bf) {
                    return _0x43d9d8(_0x25f1bf);
                },
                'OAfhu': function (_0x3d2819, _0x47698c, _0x9d681a, _0x32a247) {
                    return _0x3d2819(_0x47698c, _0x9d681a, _0x32a247);
                },
                'BYLxz': _0x3ea63c(0x8d),
                'mickq': function (_0xd11812, _0x288ef4) {
                    return _0xd11812(_0x288ef4);
                },
                'cBIyt': function (_0x34cfc0, _0x1b5608) {
                    return _0x34cfc0 * _0x1b5608;
                },
                'mvwqq': function (_0x38e15f, _0x5eaa12) {
                    return _0x38e15f(_0x5eaa12);
                },
                'ZrlCP': function (_0x537943, _0x362fe5) {
                    return _0x537943(_0x362fe5);
                },
                'BsoEg': function (_0x1a20e9, _0x5e7c1d) {
                    return _0x1a20e9 == _0x5e7c1d;
                },
                'nWmka': _0x3ea63c(0xcd) + 'er',
                'KZnCF': function (_0x714246, _0xef9d4f) {
                    return _0x714246(_0xef9d4f);
                },
                'pUhTX': function (_0x1b8b6d, _0xb54de3) {
                    return _0x1b8b6d(_0xb54de3);
                },
                'Lxvzy': _0x3ea63c(0x18f),
                'JEEDZ': _0x3ea63c(0xf7),
                'ObHME': _0x3ea63c(0x292),
                'yccOU': _0x3ea63c(0x2de),
                'AVeXk': function (_0x4a93e6, _0xd8517b) {
                    return _0x4a93e6 + _0xd8517b;
                },
                'rWNzV': function (_0x29d7e8, _0x1bc878) {
                    return _0x29d7e8(_0x1bc878);
                },
                'dnXrr': function (_0x246ad4, _0x6b6bf7) {
                    return _0x246ad4(_0x6b6bf7);
                },
                'psCYw': _0x3ea63c(0x269),
                'ddHnd': _0x3ea63c(0x25f),
                'mCCfY': function (_0x41b562, _0x5bf139, _0x5e7421) {
                    return _0x41b562(_0x5bf139, _0x5e7421);
                },
                'YDhru': function (_0x12b1fb, _0x40a302, _0x1a5db1) {
                    return _0x12b1fb(_0x40a302, _0x1a5db1);
                },
                'WsSiG': function (_0x4d5cbc, _0x394196) {
                    return _0x4d5cbc * _0x394196;
                }
            },
            _0x1baa83 = _0x576977;
        if(_0x3ad72f[_0x3ea63c(0x6f)](Player[_0x3ad72f[_0x3ea63c(0xc0)]](), undefined) || !Player?.[_0x3ad72f[_0x3ea63c(0x2d2)](_0x1baa83, 0xaaf + -0xda + -0xb1 * 0xc)]()?.[_0x3ad72f[_0x3ea63c(0xf9)](_0x1baa83, -0xe62 + -0x25b7 + -0x5 * -0xaca)]()?.[_0x3ad72f[_0x3ea63c(0x157)](_0x1baa83, -0x6 * -0x5e2 + 0x6 * 0xe3 + -0x64 * 0x64)]()[_0x3ad72f[_0x3ea63c(0x3bf)]](_0x3ad72f[_0x3ea63c(0x124)](_0x1baa83, -0x233b + 0x1721 + 0xdf1)) || !Player?.[_0x3ad72f[_0x3ea63c(0xf9)](_0x1baa83, 0xf6f + -0x875 * -0x1 + -0x1 * 0x165b)]()?.[_0x3ad72f[_0x3ea63c(0x2ce)]]()?.[_0x3ad72f[_0x3ea63c(0x3e0)]](_0x33d328 => _0x33d328?.[_0x3ea63c(0x72)]()?.[_0x1baa83(0x52 * -0x71 + 0x10e3 + -0x6d * -0x31)]()?.[_0x1baa83(0x2323 + -0x19ea + -0x748)](_0x3ea63c(0x7d) + _0x3ea63c(0x27c)))) {
            if(!enabled)
                return;
            return enabled = ![], start[_0x3ad72f[_0x3ea63c(0x358)](_0x1baa83, 0x5a2 * -0x1 + -0xc50 + -0x3ed * -0x5)](), ChatLib[_0x3ad72f[_0x3ea63c(0x2f3)]](_0x3ad72f[_0x3ea63c(0x110)](prefix, _0x3ad72f[_0x3ea63c(0x302)](_0x1baa83, 0x9d8 + -0x107 * 0x10 + 0x837 * 0x1))), _0x3ad72f[_0x3ea63c(0x40c)](lookAtBlock, new net[(_0x3ad72f[_0x3ea63c(0x198)](_0x1baa83, -0x247 * 0x9 + 0x1093 + 0x5e2))][_0x3ad72f[(_0x3ea63c(0x1a5))]][_0x3ad72f[(_0x3ea63c(0x14b))]](0x773 * 0x1 + 0x3b9 * 0x1 + 0x1 * -0xb19, _0x3ad72f[_0x3ea63c(0x110)](0x6a * -0x46 + -0x1 * 0x199 + 0x1 * 0x1f0d, 0x82 * -0xb + -0x40 * -0x1 + 0x557 + 0.5), 0x8da * 0x4 + 0x6 * 0x2d3 + -0x3377)), _0x3ad72f[_0x3ea63c(0x137)](setTimeout, () => {
                const _0x47631f = _0x3ea63c,
                    _0x187128 = _0x1baa83,
                    _0x1ba8e8 = Client[_0x3ad72f[_0x47631f(0x7c)]]()[_0x3ad72f[_0x47631f(0x1e9)](_0x187128, 0x17fd + -0x2 * -0x10ae + -0x1bf7 * 0x2)]()[_0x3ad72f[_0x47631f(0x1e9)](_0x187128, -0x1b8d + -0x211 + 0x1f2d)](_0x3ad72f[_0x47631f(0x1e9)](_0x187128, -0x21ff + 0x25ab * -0x1 + 0x490f), null);
                _0x1ba8e8[_0x3ad72f[_0x47631f(0x1e9)](_0x187128, 0x4 * 0x24f + -0x1399 * -0x1 + -0x2 * 0xd79)](!![]), _0x1ba8e8[_0x3ad72f[_0x47631f(0x393)]](Client[_0x3ad72f[_0x47631f(0x1e9)](_0x187128, 0x23f9 + 0x17b1 + -0x2 * 0x1cdd)](), null), _0x3ad72f[_0x47631f(0xe9)](setTimeout, () => {
                    const _0x163b57 = _0x47631f;
                    start[_0x3ad72f[_0x163b57(0x435)]]();
                }, 0x49 * -0x20 + 0x2354 + -0xe * 0x174);
            }, 0x14 * 0xc4 + -0xbb7 * 0x1 + -0x1a5 * 0x1);
        }
        _0x3ad72f[_0x3ea63c(0x281)](setTimeout, () => {
            const _0x4489e2 = _0x3ea63c,
                _0x4361b2 = _0x1baa83;
            let _0x5d4980, _0x2cf8e5;
            for(let _0x29ebcc = _0x3ad72f[_0x4489e2(0xd6)](Player[_0x3ad72f[_0x4489e2(0x12a)](_0x4361b2, 0xb * -0x25f + -0x29 * 0xf1 + 0x4237)]()[_0x3ad72f[_0x4489e2(0x12a)](_0x4361b2, 0x3c6 + 0x18e8 + -0x1 * 0x1b36)]()[_0x3ad72f[_0x4489e2(0x2d3)]], -0xbbd * -0x1 + -0x2 * 0x10bd + 0x16 * 0xfd); _0x3ad72f[_0x4489e2(0x309)](_0x29ebcc, _0x3ad72f[_0x4489e2(0xd6)](Player[_0x3ad72f[_0x4489e2(0x3b0)](_0x4361b2, 0x2439 + -0xa9 * -0x2e + -0x410e)]()[_0x3ad72f[_0x4489e2(0x3ce)](_0x4361b2, 0xf0f + 0x779 * -0x3 + 0x8d4)]()[_0x3ad72f[_0x4489e2(0x12a)](_0x4361b2, 0x21d7 * 0x1 + -0x149a + 0x23 * -0x55)], Player[_0x3ad72f[_0x4489e2(0x12a)](_0x4361b2, 0x173c + 0x3c6 + 0x1 * -0x1915)]()[_0x3ad72f[_0x4489e2(0x6c)](_0x4361b2, 0x1563 + 0x152 + -0x153d * 0x1)]()[_0x3ad72f[_0x4489e2(0x374)](_0x4361b2, 0x10bf + -0x2312 + 0x3fd * 0x5)])); _0x29ebcc--) {
                let _0x52eb9d = Player[_0x3ad72f[_0x4489e2(0x2c4)](_0x4361b2, -0x2290 + -0x65 * -0x5f + 0x2 * -0xb1)]()[_0x3ad72f[_0x4489e2(0x198)](_0x4361b2, -0x1320 + -0x6a * -0x3 + 0x13b2)](_0x29ebcc);
                _0x3ad72f[_0x4489e2(0x30f)](_0x52eb9d, null) && _0x52eb9d?.[_0x3ad72f[_0x4489e2(0x3a9)]]()?.[_0x3ad72f[_0x4489e2(0x12a)](_0x4361b2, 0x2b * 0xb7 + 0x1a * 0x9e + -0x2d3b * 0x1)]()?.[_0x3ad72f[_0x4489e2(0x6c)](_0x4361b2, -0x1882 + 0x5 * -0x4ab + 0x31ca)](_0x3ad72f[_0x4489e2(0x2bd)](_0x4361b2, -0x24c9 + -0x73 * -0x2a + -0x1 * -0x1357)) && (_0x5d4980 = _0x29ebcc), _0x3ad72f[_0x4489e2(0xe8)](_0x52eb9d, null) && _0x52eb9d?.[_0x3ad72f[_0x4489e2(0x124)](_0x4361b2, -0x515 * 0x1 + -0xcd4 + -0x9e1 * -0x2)]()?.[_0x3ad72f[_0x4489e2(0x2c4)](_0x4361b2, -0x2183 + 0x6e * 0x8 + -0x1fa1 * -0x1)]()?.[_0x3ad72f[_0x4489e2(0x1b5)](_0x4361b2, -0x109d + 0x5a2 + 0xcec)](_0x3ad72f[_0x4489e2(0x3ce)](_0x4361b2, 0x25e0 + 0x19c3 + -0x3dd6)) && (_0x2cf8e5 = _0x29ebcc);
            }
            if(_0x3ad72f[_0x4489e2(0x10e)](_0x2cf8e5, -(0x206a + -0x1f * -0x10d + 0x103f * -0x4)) && !_0x5d4980 || _0x3ad72f[_0x4489e2(0x84)](_0x5d4980, -(-0x1ac5 + -0x1 * -0x261f + -0xb59)))
                return ChatLib[_0x3ad72f[_0x4489e2(0x34a)](_0x4361b2, 0xc0d * 0x2 + -0xb * 0x2 + 0x16a1 * -0x1)](_0x3ad72f[_0x4489e2(0x321)](prefix, _0x3ad72f[_0x4489e2(0x374)](_0x4361b2, 0x446 + -0x266 * -0xc + -0x1fa6))), Client[_0x3ad72f[_0x4489e2(0x2b5)](_0x4361b2, 0x9 * -0xdf + 0x2452 + -0x1ab0)][_0x3ad72f[_0x4489e2(0x157)](_0x4361b2, -0x1354 + 0x1a3 * 0x16 + -0xf4a * 0x1)](), _0x3ad72f[_0x4489e2(0x394)](setTimeout, () => bzbuy[_0x4489e2(0x2cc)](), -0xe2e + -0x17 + 0x1039);
            if(!_0x2cf8e5 || _0x3ad72f[_0x4489e2(0xc6)](_0x2cf8e5, -(0x60 * 0x58 + -0x8bb + -0xc22 * 0x2)) || !_0x5d4980 || _0x3ad72f[_0x4489e2(0x432)](_0x5d4980, -(0x118b * 0x1 + 0x1585 + -0x270f))) {
                ChatLib[_0x3ad72f[_0x4489e2(0x34a)](_0x4361b2, 0x1113 + -0x1efc + 0xf4c)](_0x3ad72f[_0x4489e2(0x2cf)](prefix, _0x3ad72f[_0x4489e2(0x36a)])), going = ![];
                return;
            }
            State[_0x3ad72f[_0x4489e2(0x2a0)]](state[_0x3ad72f[_0x4489e2(0x34a)](_0x4361b2, 0x5 * 0x60e + -0xb * -0xb1 + 0x7 * -0x530)]), Thread[_0x3ad72f[_0x4489e2(0x180)]](sleepPing), _0x3ad72f[_0x4489e2(0x3c2)](click, _0x5d4980, !![], _0x3ad72f[_0x4489e2(0xca)](_0x4361b2, -0xc4 * 0x23 + -0x114c + -0x3 * -0xf53)), Thread[_0x3ad72f[_0x4489e2(0x91)](_0x4361b2, -0x2 * -0x12b3 + -0x107 * 0x20 + -0x2b5)](sleepPing), _0x3ad72f[_0x4489e2(0x2a9)](click, _0x2cf8e5, !![], _0x3ad72f[_0x4489e2(0x198)](_0x4361b2, -0x152 * -0xd + 0x113b + -0x2084)), Thread[_0x3ad72f[_0x4489e2(0x358)](_0x4361b2, -0x18f7 * 0x1 + 0x1 * -0x1f03 + 0x39cb)](sleepPing), _0x3ad72f[_0x4489e2(0x131)](click, 0x1 * -0x1af3 + -0xb7e + 0x2690, ![], _0x3ad72f[_0x4489e2(0x289)]), Thread[_0x3ad72f[_0x4489e2(0x23b)](_0x4361b2, -0x1 * -0x1721 + -0x4 * -0x233 + -0x29 * 0xbc)](_0x3ad72f[_0x4489e2(0x408)](sleepPing, 0x301 * 0x1 + -0xfb6 + 0x32e * 0x4)), State[_0x3ad72f[_0x4489e2(0x2a0)]](state[_0x3ad72f[_0x4489e2(0x106)](_0x4361b2, -0x21 * -0xb7 + -0xbad * -0x1 + 0x85f * -0x4)]), excavate[_0x3ad72f[_0x4489e2(0x335)](_0x4361b2, -0x1194 + -0x1 * 0x3e5 + 0x171b)]();
        }, _0x3ad72f[_0x3ea63c(0x255)](sleepPing, 0x19b7 + -0x7c + 0x1939 * -0x1));
    }),
    testTest = [
        [
            -0x1245 + 0x1b00 + 0x1 * -0x8b7,
            0x4 * 0x1e6 + 0xa * 0xf9 + -0x1150 * 0x1
        ],
        [
            -0x13c7 + -0x7 * 0x388 + 0x2c84,
            0x23a8 + 0x96e + -0x2d12
        ],
        [
            -0x1c00 + 0x46 * 0x85 + -0x85b * 0x1,
            0x2 * -0xe3e + 0x28d * -0xd + 0x3da8
        ],
        [
            0x542 * 0x2 + 0x51 * 0x63 + 0x1 * -0x29d2,
            0x1932 + 0xf74 + -0x28a4
        ],
        [
            -0x33f + 0x1a * 0x42 + 0x9 * -0x62,
            0xdf3 + 0xf1 * 0x10 + 0x1 * -0x1d02
        ],
        [
            0x16 * 0x1 + 0x1b58 + -0x1b67,
            -0x914 + 0x1a2b + -0x1114
        ],
        [
            -0xf1 * 0x16 + 0x1332 + 0x185 * 0x1,
            0x265a + -0x5db + -0x207d
        ],
        [
            0xcbd * -0x2 + 0xa4 * -0x3b + 0x1 * 0x3f49,
            0x12c5 + 0x19c2 + -0x2c83
        ]
    ],
    slots = [
        -0x164 + 0x1083 + -0xf09,
        -0x1f25 + 0x1442 * 0x1 + 0x7 * 0x194,
        0x683 * 0x4 + -0x490 + 0x1 * -0x155e,
        0x1 * -0x23bb + 0xe25 + 0x15ad,
        -0x1 * 0x1947 + -0x18f2 + -0x2f5 * -0x11,
        0x20ef + -0x1bb + -0x52 * 0x61,
        -0x14 * 0x6a + 0xc4b * -0x3 + 0x2d3c,
        0x48 * 0x2e + -0x2314 + 0x164b
    ];
register(_0x576977(-0x2622 + 0x948 + 0x1e51), () => {
    const _0x30f168 = _0x478fc2,
        _0x4629d0 = {
            'zKygp': _0x30f168(0x418),
            'WdqDT': function (_0x1b0ff5) {
                return _0x1b0ff5();
            }
        };
    if(!Client[_0x4629d0[_0x30f168(0x365)]]())
        return;
    _0x4629d0[_0x30f168(0x443)](stopAllMovement);
});

function _0x5063() {
    const _0x388c93 = [
        'BAEWW',
        'rdOlW',
        'FYakY',
        'ObHME',
        'iRawy',
        'IarPq',
        '...',
        'IvsEr',
        'wAYPA',
        'ArFCf',
        'DugnX',
        'iWdvr',
        'vAsxn',
        'pGIyH',
        '6_c',
        'isKeyDown',
        'SIrEW',
        'NVCSg',
        't\x20Opened\x20A',
        'tick',
        'field_8288',
        'renderWorl',
        'UeFZE',
        'tneTU',
        'sJcKf',
        'exception',
        'func_77960',
        'gLHtd',
        'prPmr',
        '001000',
        'SBCAh',
        'fill',
        'xLMuP',
        'GLDho',
        'DocPa',
        'flfua',
        'RPqXE',
        '7_B',
        'ule§l§4]\x20§',
        'Ccwot',
        'dJvfG',
        'ame',
        'zQrdp',
        'cBIyt',
        'WalkNodePr',
        'Slot',
        'setName',
        'dnXrr',
        'nCeXr',
        'sLylx',
        'display',
        'qJyfp',
        'EXCAVATION',
        'lQaAQ',
        'ZamYq',
        'console',
        'MDRrV',
        'enu',
        'error',
        'isInGui',
        'func_71410',
        'jCzPK',
        'Is\x20Not\x20Gui',
        'VdPNm',
        '0100.',
        'isInChat',
        'hoeih',
        'FediY',
        'DISABLED',
        'func_14712',
        'ZNIVZ',
        '__proto__',
        'ojVnO',
        'MKHII',
        'bz\x20suspici',
        'oSqIr',
        '001\x0a\x20\x20\x20\x20\x200',
        'OlUOX',
        'indexOf',
        'ThGxd',
        'bind',
        'xuvyP',
        'getState',
        '450666ojWAzL',
        'IZSkv',
        'ONXqj',
        'Scrap\x20or\x20C',
        '0011100\x0a\x20\x20',
        'RExpT',
        'CRPUF',
        'func_70301',
        'qODDx',
        'brIpg',
        'MZPXM',
        'field_7435',
        'int',
        'PHwrN',
        'lNiWT',
        'jPYhS',
        'MpMWm',
        'aNVKT',
        'rJdqz',
        'WdqDT',
        'dule\x20-\x20Mac',
        'PzcpP',
        '9714RzcDZv',
        'jfxOg',
        '4_e',
        'ZqFdS',
        'IElxI',
        'clFbR',
        'RVELT',
        'func_74745',
        'wMlEq',
        'log',
        'aBlbc',
        'bdhID',
        'apply',
        'xMxnN',
        'RtcRv',
        'SDRJM',
        'BsoEg',
        'SNEAK',
        'rtOzo',
        'getName',
        'EHGsA',
        'dAZlC',
        'aZpHA',
        'xOUBh',
        'FeniE',
        'NWDRr',
        '62gtUYdg',
        '11936817PrNtdE',
        'func_70047',
        'bpitT',
        'start\x20exca',
        'warn',
        'znqnT',
        'Fossil\x20Mac',
        'tnNDC',
        'func_17482',
        'zYZaF',
        'azAkt',
        'xgrZz',
        'EJCty',
        'syizN',
        'dirt',
        '\x20\x20\x20\x2010000.',
        'split',
        'BxhXT',
        'CENEu',
        'MIDDLE',
        'Gpzzw',
        'XXJWZ',
        'lqANu',
        'oyxSf',
        'DeQLP',
        'r§f',
        'lpGfv',
        'qdyTi',
        'ons\x20|\x20',
        'ZRQGc',
        '7_f',
        'bWRmB',
        'rfLmx',
        'wQfht',
        'MwoiQ',
        'qctzP',
        'Yojlv',
        'highlighte',
        '5_G',
        'jPFNH',
        '\x20\x20\x200101010',
        'nbMwZ',
        'GTLXc',
        '1_y',
        'NCOuR',
        'ydQgV',
        'nbwMX',
        'fEfYU',
        'EaRsN',
        'prototype',
        'fBuhe',
        'olDgK',
        'sGKtf',
        'rennensMod',
        'vMjKD',
        '\x20COMPLETE',
        'IOZSb',
        'invoke',
        'ing.',
        'VtfGt',
        'NFkUF',
        'toAOe',
        'sIrSR',
        'duiLn',
        'YGskG',
        'setState',
        'FRcIK',
        'HLXJQ',
        'jrJBo',
        'pruxe',
        'nWmka',
        'EapUf',
        'CAqXs',
        'gIfRC',
        'zKYqq',
        'byFDl',
        'XNzOY',
        'RESTARTING',
        'cmvvH',
        'XmZAh',
        'RTZnt',
        'NFRVV',
        'udhDy',
        'getContain',
        'NtbQY',
        'ZPPgf',
        'xcwDN',
        'QgxXa',
        'minecraft',
        'NPwld',
        'jJFmf',
        'pting\x20to\x20b',
        'yVMJi',
        'PqsQk',
        'fter\x20Runni',
        'eKcrU',
        '\x2001010\x0a\x20\x20\x20',
        '\x20scrap',
        'dEkhd',
        'field_7436',
        'ISzpu',
        'lccJD',
        'cRNfE',
        'GzxnF',
        'GuiChat',
        '1101\x0a\x20\x20\x20\x20\x20',
        'nxAAt',
        '0001\x0a\x20\x20\x20\x20\x20',
        'MtLNs',
        '1111\x0a\x20\x20\x20\x20\x20',
        'zmXJs',
        'lUldM',
        'Starting..',
        'eWmzV',
        'qyMWp',
        '2_a',
        '\x20Charges',
        'iTEUH',
        'RcWtG',
        'JiXYr',
        'axjZP',
        'NWtLN',
        'client',
        'MGdAx',
        'jkeCj',
        'getItems',
        'ndGel',
        'pUhTX',
        'YPVmS',
        'VymWz',
        'aVXmF',
        'fLVWm',
        'getInvento',
        'func_11013',
        'ZxIhd',
        'ass_pane',
        'LJpGt',
        'forEach',
        'UMTVV',
        'dThli',
        'mvwqq',
        'field_7245',
        'niMYq',
        'wecJG',
        '{}.constru',
        'jZJPJ',
        'ZfhQK',
        'reduce',
        'CjqtX',
        'hZiPO',
        'AVeXk',
        'UZEKa',
        'VwYZH',
        'PDqnU',
        'aZvEC',
        'qmbUQ',
        '_c_',
        'ZtivF',
        'nukzE',
        '(((.+)+)+)',
        'Maqqn',
        'LEFTC',
        '229360nKMSRq',
        '\x20\x2011111\x0a\x20\x20',
        'KVIqT',
        'imZek',
        '5_A',
        'GuiChest',
        '\x20Restartin',
        'oBnnT',
        'sShel',
        'jXMCa',
        'command',
        'table',
        'BNeeH',
        'LbzsB',
        'FYzst',
        'CElVl',
        'yhDSH',
        'EXRBP',
        'EaHNK',
        'aGZHB',
        'OigCv',
        'OAfhu',
        'wKjyC',
        'ipvwI',
        'Opening\x20Gu',
        '9_a',
        'NOT_FOUND',
        'mCCfY',
        '8_b',
        'trim',
        'hmyjw',
        'KCALt',
        'qTQpz',
        'efIyo',
        'KFLDJ',
        'vqEog',
        'g...',
        '\x20\x20\x2001100\x0a\x20',
        'maVHO',
        'KSpUa',
        'UGFSP',
        'SPRINT',
        'WsRBa',
        'MFTdY',
        '001100\x0a\x20\x20\x20',
        '10xOxNut',
        'PVRQp',
        'ddHnd',
        'KHOji',
        'BEStR',
        'match',
        '4442568XOv',
        'usvgX',
        'NmEsc',
        'sFStz',
        'Wxgcz',
        'XroYg',
        'vhZEp',
        'QHeBi',
        'mSJem',
        'abs',
        'UhpIT',
        'getLore',
        'return\x20(fu',
        '7_z',
        'regrabmous',
        'QoSxG',
        'cFqtg',
        'JRFXo',
        '0_a',
        'func_15030',
        'MIsvp',
        'push',
        'RxYlA',
        'bwQjh',
        'NTgzp',
        'pYBtS',
        'EiyhR',
        'stop',
        'func_74775',
        'iAQFH',
        'tfebx',
        'vgPFT',
        'Qruac',
        '\x20\x20\x20\x20010110',
        'xJyqd',
        'BWEan',
        'pathfindin',
        'XkFMG',
        'AiI',
        '\x0a\x20\x20\x20\x20\x201001',
        'slice',
        'clyBF',
        'world',
        'info',
        'FAlUG',
        'CuuAl',
        'gxJHz',
        'zxTtY',
        'qEa',
        'UraZH',
        'click',
        'ros',
        'yvAku',
        '3830dTWPAi',
        'uywVe',
        'drawEspBox',
        'PjJix',
        'uqiZH',
        'zUKas',
        'SedvV',
        'ajsbf',
        'lTIJn',
        'CLvZg',
        'XoojK',
        'includes',
        'KSlvU',
        'tNHJH',
        'dmfGl',
        'QKQsZ',
        'GVyxF',
        'NoKJz',
        'rpMKB',
        'HFkuh',
        'Ryswm',
        'getStackIn',
        'HPywQ',
        'fErHn',
        'suspicious',
        'WBvUb',
        'yXUIB',
        'NHMJD',
        'pGBjT',
        'SPACE',
        'MouseHelpe',
        'huBll',
        'ghsdF',
        'psCYw',
        'rPWyZ',
        'TFlbX',
        'XHxVi',
        'LHtXn',
        'eBuff?',
        'hdiBH',
        'wNWnq',
        'yZLTs',
        'pLpKh',
        'miXuP',
        '4_y',
        'Dexuq',
        'getPlayer',
        '\x2001100\x0a\x20\x20\x20',
        'NhGkc',
        'IbNyX',
        'EvuvY',
        'YEhpH',
        'LYzAV',
        '3_G',
        'currentGui',
        'ous\x20scrap',
        'length',
        'state',
        'Bbryi',
        '1_ag',
        'getX',
        'AubLa',
        'BUYING',
        'gLKHB',
        'hlqzs',
        'tWTsQ',
        'hBKPg',
        'TTtTC',
        'hwfeT',
        'qXDjL',
        'pdskN',
        'RPKMM',
        'DGFWn',
        'rphDy',
        'YQiyo',
        'SgrbP',
        'vPIeo',
        'eoSDi',
        'DUWQx',
        'GMOmN',
        'jNWWx',
        'PRMdi',
        'OgmOI',
        'HaGhP',
        '1269902dwG',
        ',\x20No\x20Cooki',
        '7_b',
        'oWiMN',
        'ioWac',
        'jznTk',
        'pqdtj',
        'ocessor',
        'hisel\x20Miss',
        'uxAHg',
        '\x0a\x20\x20\x20\x20\x201010',
        'ccHyx',
        'fossil\x20dus',
        'AZOAc',
        'msDaH',
        '\x20COMPLETE!',
        'ZjOtx',
        'DGRTI',
        'CvKXv',
        'XXusJ',
        '1310676ZOm',
        'dvJCs',
        'OOWpK',
        '00011\x0a\x20\x20\x20\x20',
        'Ilwne',
        'ndLZH',
        'Umwoi',
        'pbfqu',
        'kTFXl',
        'fossil',
        'DwriK',
        'zaoYd',
        'bsDNf',
        'BrennensMo',
        'oxIkB',
        'sGlCR',
        '\x20\x20\x2010010\x0a\x20',
        'FtdCq',
        'jXxcs',
        'nWTAV',
        'nMnSu',
        'RIGHTC',
        'tvOjn',
        '§cFinal\x20Po',
        'pgTsR',
        'YnslS',
        '1_E',
        'nction()\x20',
        'zUwHx',
        'oMVVd',
        'KqCxT',
        '54526xeobEa',
        'filter',
        'mzRvG',
        'fyOhr',
        'gczuN',
        'QgEBD',
        'HTafm',
        'qpbtV',
        'jblCY',
        'getMinecra',
        'XAHzg',
        'zPOpU',
        'gIVHk',
        'TFBFo',
        'func_18078',
        'fossil\x20the',
        'XVlhH',
        'fLAmP',
        'yIYBH',
        'aHpYp',
        'SsqlW',
        'rRnrU',
        'HjFkB',
        'BKRNh',
        'nGDuN',
        'dMethod',
        'wMjKm',
        'kvYKl',
        'StQBF',
        'ctor(\x22retu',
        'SYlDt',
        'DOJMy',
        'ABaVt',
        'FNRMJ',
        'PJtAz',
        'anzmz',
        'qVYWG',
        'vJsEy',
        'WvVQd',
        'arrived.',
        'func_17617',
        'rMjRw',
        'SrDhR',
        'MIPvg',
        'ttgeI',
        'sleep',
        'warp\x20tunne',
        'OiTrd',
        'mickq',
        'vCoTV',
        'uFpHm',
        'OKjWc',
        'lFxFb',
        'rSIOt',
        'QRVjH',
        'uXfYn',
        'AZGeD',
        'wNHDX',
        'tkjrC',
        'rXXtV',
        'KyeOY',
        'EzQRd',
        'abHEG',
        '5_c',
        'tDhGZ',
        'atan2',
        'IFJiE',
        'hChLm',
        'xNTbg',
        '6_z',
        '\x20fish',
        'maHQX',
        'GuiIngameM',
        'FzlKY',
        'WsSiG',
        'guiOpened',
        'toString',
        'eZWCL',
        'arr',
        'trace',
        'RLMSc',
        'GuJHt',
        'fZTwB',
        'MkXzn',
        'Vec3',
        'EsbLo',
        '\x20Orientati',
        'jIgsr',
        'MCihv',
        'oChhw',
        'ing,\x20Attem',
        'size',
        'YktuP',
        'wxyih',
        'util',
        '560050bKFI',
        '011110\x0a\x20\x20\x20',
        'ZRULV',
        'WfsBE',
        'field_7437',
        'Xjrnc',
        'jotJP',
        '00011110\x0a\x20',
        'hnuKZ',
        'EOoVR',
        'AfbGF',
        'omQwn',
        'func_77978',
        'field_7146',
        'LJTgM',
        'fYJpb',
        'TIkCq',
        '3994180UfGspj',
        'vator',
        'MACROING',
        'zDVPr',
        'rn\x20this\x22)(',
        'step',
        'YDhru',
        'iFnTf',
        'func_75874',
        'IYOmA',
        'GdAoe',
        'ZnVUe',
        'fGrXs',
        'BtZpI',
        'BYLxz',
        'KEY_NONE',
        '1001\x0a\x20\x20\x20\x20\x20',
        'ccRwp',
        'huyrI',
        'getYaw',
        'XsXDC',
        'dCEIs',
        'iApoN',
        'findIndex',
        'YkTnm',
        'tXkqt',
        'RLdCk',
        'iaAue',
        'ng\x20Command',
        'IdvQM',
        'XcWAl',
        'HFNoQ',
        'xnUNA',
        'zgPZt',
        'OXhNP',
        'HADMF',
        'uWija',
        'jZhfA',
        'rQdtu',
        'setChatCri',
        'round',
        'VEycP',
        'mvSQc',
        'DCBPQ',
        'yNBKL',
        'SQWFr',
        'QyPyS',
        'GcfyH',
        'RPtcv',
        'fCdey',
        'dUJXi',
        'QPRYG',
        'OEPGz',
        '01\x0a\x20\x20\x20\x20\x2011',
        'bQQCm',
        '3896459hUg',
        'MFOHV',
        '4_A',
        'goNkc',
        'cDCNY',
        'njbyF',
        'XDvcn',
        'lZWpb',
        'OPENING',
        'eeUhT',
        'zTUpb',
        'MTqox',
        'NMWYG',
        'TSxBS',
        'MxNdg',
        'mFNwq',
        '\x0a\x20\x20\x20\x20\x200011',
        'shift',
        'uZBOU',
        'yBwRz',
        '5_a',
        'WBWlq',
        'jAdOK',
        'field_1514',
        'GsSmT',
        'Brgsb',
        'start',
        'xasiN',
        'JEEDZ',
        'AuOQQ',
        'aVQSV',
        'XtJpV',
        'KZnCF',
        'OUNJo',
        'Restarting',
        'TZxPr',
        'SIJgK',
        'zGoMH',
        '1289160UYEKga',
        '6_af',
        'close',
        'uIbDW',
        'ngr',
        'gkFhW',
        'chat',
        'vhFoJ',
        'field_7147',
        '\x20\x20011110\x0a\x20',
        'BlockPos',
        'wZYdk',
        '1_w',
        'OYVhH',
        'constructo',
        '\x20\x20111111\x0a\x20',
        'DHXWg',
        'SFzlA',
        'tIgmn',
        'field_7141',
        'dhvPG',
        'func_14711',
        'gZLJb',
        'IFjZx',
        'getLastX',
        '00100\x0a\x20\x20\x20\x20',
        '100GatjWE',
        'yccOU',
        'XumgZ',
        'tTCAi',
        'floor',
        '8_y',
        'VcHsr',
        'yFMYm',
        'BZ\x20Menu\x20No',
        'BOYhi',
        'iZGyv',
        'VnTLK',
        'ZWyMK',
        'teria',
        'tUWXz',
        'VZrLy',
        'rWNzV',
        'cpsjo',
        'ipRoF',
        'EfvEY',
        'oOsPk',
        'HyaUu',
        'KPnvJ',
        'sKhQO',
        '\x20\x2011000000',
        'eaDWG',
        'func_70005',
        '8_c',
        '§l§4[§l§cB',
        'BDlyt',
        'RYqRf',
        'func_15029',
        'VbCem',
        'dxkOY',
        'wZfjJ',
        'field_7017',
        '3_a',
        'fFQMn',
        'esBrZ',
        'getEyeHeig',
        '1111.',
        'QZKMz',
        'HddEE',
        '9_c',
        'VFQLc',
        'egBGI',
        'sgAsi',
        'nexWR',
        'FOUND',
        'TdNsS',
        'jbaIz',
        '000010\x0a\x20\x20\x20',
        'QvjDg',
        'Lore',
        'QJqrr',
        'FjZMm',
        'Scrap\x20Miss',
        'GUI\x20Class\x20',
        'bpsCZ',
        'KJEzT',
        '41283wUNaX',
        'pxfVI',
        'fxOWl',
        'stained_gl',
        'getLastZ',
        'setAccessi',
        'DNcGc',
        'ZrlCP',
        'OsBIa',
        'EodKa',
        'getWorld',
        'cIQcf',
        'SwSRM',
        'DFNdC',
        'NrJzU',
        'qPn',
        'kEUqA',
        'getY',
        'EKrKj',
        'func_74372',
        'ZdXNl',
        '2_F',
        'YDPHd',
        'simulateCh',
        'LBYoP',
        'setContain',
        'fPSeU',
        'nvZbB',
        'cUbbn',
        'KKYRo',
        'hgzPh',
        'ahRTx',
        'field_7431',
        'uy\x20from\x20bz',
        'Qvltd',
        'KCZpS',
        'eUJwl',
        '\x20\x20\x20\x2000011',
        'REujo',
        'gui',
        '\x20chisel',
        'Avnxs',
        'wSBNN',
        'hjxba',
        'faQZh',
        'SWUae',
        'qQEyv',
        'NVkHd',
        'ceTYa',
        'lIdVx',
        'fDlBl',
        'iPFhN',
        'pathfinder',
        'SJWeM',
        'asPlayerMP',
        'zKygp',
        'func_74373',
        'WPxyr',
        'qgXTr',
        'OXzeh',
        'ShFXz',
        'minecraft:',
        '\x20\x20\x20\x20001000',
        'getLastY',
        'func_75877',
        'ToQaP',
        'getClass',
        'WRjvM',
        '79998ptWbS',
        'ybore',
        'dPJXv',
        'Mnlgh',
        '\x20\x20001111\x0a\x20',
        'PQyOL',
        'XGtTr',
        'KtLRt',
        'KQTxN',
        'AXFgA',
        'dlOAy',
        'getSimpleN',
        'LWFpm',
        'bnDJv',
        'rGzTt',
        'BEJet',
        'gNfQW',
        'qYhSj',
        'XcCJS',
        'MrWKq',
        'AmJTF',
        'uREVr',
        'drawString',
        'EdNmD',
        'rDJfD',
        '\x20\x2010001\x0a\x20\x20',
        'field_7244',
        '4627RSabvE',
        'toLowerCas',
        'SGhbk',
        'FGuUH',
        'bNkRm',
        'BDgtr',
        'FCxIT',
        'gnVvl',
        '2_r',
        'iJcOR',
        'naAMR',
        'NmGyK',
        'search',
        'nDBxC',
        'Chest',
        'field_7012',
        'iEomh',
        'sqrt',
        'IGpzB',
        'KaBKv',
        '\x20\x20\x20\x20111111',
        'HXuCR',
        'LSJQn',
        'ZvZpJ',
        'JGJDf',
        '\x20\x20\x20\x20011110',
        'FLymg',
        'PNKbP',
        'uTpLA',
        'wumPg',
        '0_x',
        'SUEqN',
        'ble',
        'RFIXP',
        'dRmkA',
        'vsYiF',
        'LmHaZ',
        'getZ',
        'yokol',
        'UxKSn',
        'xdYmL',
        'fhJIB',
        'ERzsc',
        '10\x0a\x20\x20\x20\x20\x2001',
        'LEFT',
        'YHYaY',
        'FgHZv',
        'czQSs',
        'TMQGi',
        'YywfO',
        'Lxvzy',
        'map',
        'Vadyh',
        'DLJcy',
        'getDeclare',
        'ihlUg',
        'scheduleTa',
        'PathFinder',
        'QYeih',
        'Rmjli',
        'gNDfq',
        'ulEVH',
        'Stopping..',
        '44_V',
        'field_7583',
        'HltPi',
        'JBjMz',
        'iZgVm',
        'ymZhA',
        'whInv',
        'MqCUu',
        'ImGob',
        'uYJAx',
        'WHITE',
        'fVkQe',
        'qtmIc',
        'wSHiz',
        'qrMZJ',
        'dnuDE',
        'XgIGq'
    ];
    _0x5063 = function () {
        return _0x388c93;
    };
    return _0x5063();
}
const bzbuy = new Thread(() => {
        const _0xa5e00a = _0x478fc2,
            _0x4bf7cc = {
                'fDlBl': function (_0x45e348) {
                    return _0x45e348();
                },
                'SBCAh': function (_0x2d634c, _0x58bf44) {
                    return _0x2d634c(_0x58bf44);
                },
                'flfua': function (_0x440452, _0x3207b0) {
                    return _0x440452(_0x3207b0);
                },
                'miXuP': _0xa5e00a(0x418),
                'qdyTi': function (_0xe46b1, _0x28a14b) {
                    return _0xe46b1(_0x28a14b);
                },
                'abHEG': function (_0x1fd87a, _0x2f6a09) {
                    return _0x1fd87a + _0x2f6a09;
                },
                'jrJBo': _0xa5e00a(0x2fa) + _0xa5e00a(0x3ef) + _0xa5e00a(0xd8) + _0xa5e00a(0x297) + _0xa5e00a(0x1d9) + _0xa5e00a(0x1aa),
                'FAlUG': function (_0x3a554a, _0x4ae783) {
                    return _0x3a554a(_0x4ae783);
                },
                'lccJD': _0xa5e00a(0x181),
                'FYakY': function (_0x5561fb, _0x22a3c1) {
                    return _0x5561fb(_0x22a3c1);
                },
                'XVlhH': function (_0x28acaf, _0x571fb5) {
                    return _0x28acaf(_0x571fb5);
                },
                'qVYWG': _0xa5e00a(0x8d),
                'TZxPr': _0xa5e00a(0x238),
                'GdAoe': function (_0x152d02, _0x4b04fa) {
                    return _0x152d02(_0x4b04fa);
                },
                'rXXtV': function (_0x4928d1, _0xad51c2, _0x3f599b) {
                    return _0x4928d1(_0xad51c2, _0x3f599b);
                },
                'fyOhr': function (_0x1a8bfb, _0x4abcd4) {
                    return _0x1a8bfb * _0x4abcd4;
                }
            },
            _0x95b880 = _0x576977;
        ChatLib[_0x4bf7cc[_0xa5e00a(0x3fb)](_0x95b880, -0x2233 + -0x1 * 0x189b + 0x3c55)](_0x4bf7cc[_0xa5e00a(0x400)](_0x95b880, -0x2 * 0x211 + -0x3 * -0xc4d + -0x1ec6)), Thread[_0x4bf7cc[_0xa5e00a(0x3fb)](_0x95b880, -0x1794 + 0x1c0 + 0x17a5 * 0x1)](sleepPing);
        if(!Client[_0x4bf7cc[_0xa5e00a(0x1af)]]())
            return ChatLib[_0x4bf7cc[_0xa5e00a(0x95)](_0x95b880, 0x2 * -0xbea + -0x1 * -0x225a + 0x1 * -0x923)](_0x4bf7cc[_0xa5e00a(0x249)](prefix, _0x4bf7cc[_0xa5e00a(0xbe)]));
        Player[_0x4bf7cc[_0xa5e00a(0x17b)](_0x95b880, -0xf60 + 0x1a30 + -0x947)]()[_0x4bf7cc[_0xa5e00a(0xdf)]](0x3a1 * 0x3 + -0x137f + 0x8a7 * 0x1, ![], _0x4bf7cc[_0xa5e00a(0x3df)](_0x95b880, 0x71c * 0x3 + 0xe84 + -0x1 * 0x21f7)), Thread[_0x4bf7cc[_0xa5e00a(0x21b)](_0x95b880, -0x99f + 0x1b22 + -0xfb2)](sleepPing), Player[_0x4bf7cc[_0xa5e00a(0x21b)](_0x95b880, 0xa01 * -0x2 + 0x4f * -0x7d + 0x3c1e)]()[_0x4bf7cc[_0xa5e00a(0xdf)]](-0x628 * 0x5 + 0x1 * 0xa6a + -0x51a * -0x4, ![], _0x4bf7cc[_0xa5e00a(0x22f)]), Thread[_0x4bf7cc[_0xa5e00a(0x2d5)]](sleepPing), Player[_0x4bf7cc[_0xa5e00a(0x400)](_0x95b880, -0x2 * 0xe3 + -0x407 + 0x756)]()[_0x4bf7cc[_0xa5e00a(0xdf)]](0x31 * -0x73 + 0x575 * -0x7 + 0x1 * 0x3c42, ![], _0x4bf7cc[_0xa5e00a(0x285)](_0x95b880, 0x1 * 0x1ade + 0x904 * 0x2 + -0x2b05)), Thread[_0x4bf7cc[_0xa5e00a(0x17b)](_0x95b880, -0x2 * -0x10d1 + 0x1820 + -0x37f1)](sleepPing), Client[_0x4bf7cc[_0xa5e00a(0x400)](_0x95b880, 0x12ab + -0x7a * 0x4c + 0x1358)][_0x4bf7cc[_0xa5e00a(0x21b)](_0x95b880, -0x8 * 0x1b0 + 0xda4 + 0xa * 0x20)](), _0x4bf7cc[_0xa5e00a(0x246)](setTimeout, () => {
            const _0x4cd2df = _0xa5e00a;
            _0x4bf7cc[_0x4cd2df(0x360)](startPath);
        }, _0x4bf7cc[_0xa5e00a(0x20e)](sleepPing, 0x24a3 + 0xe5 * 0x29 + -0x494b));
    }),
    slotsClicked = [],
    currFossil = [],
    excavate = new Thread(() => {
        const _0x253633 = _0x478fc2,
            _0xdb6c91 = {
                'zxTtY': _0x253633(0x1ba),
                'KKYRo': _0x253633(0x2da),
                'MGdAx': function (_0x4bdc37, _0xd09558) {
                    return _0x4bdc37 == _0xd09558;
                },
                'XoojK': function (_0x456809, _0x345c28) {
                    return _0x456809(_0x345c28);
                },
                'axjZP': function (_0x177199, _0x5be5c6) {
                    return _0x177199(_0x5be5c6);
                },
                'jblCY': _0x253633(0x238),
                'fhJIB': function (_0x205a8c, _0x2eb2da, _0x10f3a9, _0x5dfa7a) {
                    return _0x205a8c(_0x2eb2da, _0x10f3a9, _0x5dfa7a);
                },
                'efIyo': function (_0x45d391, _0x4ac4e6) {
                    return _0x45d391(_0x4ac4e6);
                },
                'IGpzB': _0x253633(0xcd) + 'er',
                'yZLTs': _0x253633(0x72),
                'ZNIVZ': _0x253633(0x38e) + 'e',
                'PzcpP': function (_0x4a3a5b, _0xb42ea) {
                    return _0x4a3a5b(_0xb42ea);
                },
                'usvgX': function (_0x633bd9, _0x5272ab) {
                    return _0x633bd9(_0x5272ab);
                },
                'UGFSP': function (_0x4c72c0, _0x193c49) {
                    return _0x4c72c0(_0x193c49);
                },
                'ajsbf': function (_0x17ab07, _0x4c9196) {
                    return _0x17ab07(_0x4c9196);
                },
                'QZKMz': _0x253633(0x1e4) + 't',
                'ArFCf': function (_0x99ac3e, _0x33bd71) {
                    return _0x99ac3e(_0x33bd71);
                },
                'NCOuR': _0x253633(0x18f),
                'lZWpb': function (_0x4fd320, _0x49434c) {
                    return _0x4fd320(_0x49434c);
                },
                'Wxgcz': function (_0x388ea4, _0xd2e134) {
                    return _0x388ea4(_0xd2e134);
                },
                'ioWac': _0x253633(0x322),
                'SrDhR': _0x253633(0x2cc),
                'FLymg': function (_0x1445df, _0x26284f, _0x718a07) {
                    return _0x1445df(_0x26284f, _0x718a07);
                },
                'UMTVV': function (_0x1e00ba, _0x264b8d) {
                    return _0x1e00ba * _0x264b8d;
                },
                'SIJgK': function (_0x3e8ce0, _0x33d27f) {
                    return _0x3e8ce0 === _0x33d27f;
                },
                'MrWKq': function (_0x719e9c, _0x834f2f) {
                    return _0x719e9c - _0x834f2f;
                },
                'rfLmx': _0x253633(0xbb),
                'dUJXi': function (_0x2fd34b, _0x51d191) {
                    return _0x2fd34b(_0x51d191);
                },
                'uIbDW': function (_0x16b349, _0x52fd8a) {
                    return _0x16b349(_0x52fd8a);
                }
            },
            _0xc5b83c = _0x576977;
        let _0xf0b5bc = ![];
        slots[_0xdb6c91[_0x253633(0x150)](_0xc5b83c, -0x1 * 0x518 + -0x1 * -0x2624 + -0x1f26)]((_0x23147c, _0x3cd418) => {
            const _0x4e1e26 = _0x253633,
                _0x3dc3fc = {
                    'pgTsR': _0xdb6c91[_0x4e1e26(0x17e)],
                    'xuvyP': _0xdb6c91[_0x4e1e26(0x34b)]
                },
                _0x387b2e = _0xc5b83c;
            if(_0xdb6c91[_0x4e1e26(0xf5)](State[_0xdb6c91[_0x4e1e26(0x18e)](_0x387b2e, 0xba6 + 0x2386 * 0x1 + -0x2dc5 * 0x1)](), state[_0xdb6c91[_0x4e1e26(0xf2)](_0x387b2e, 0x101 * -0x3 + 0xfb0 + -0xab5)]))
                return;
            Thread[_0xdb6c91[_0x4e1e26(0x213)]](sleepPing), _0xdb6c91[_0x4e1e26(0x3b6)](click2, _0x23147c, ![], _0xdb6c91[_0x4e1e26(0xf2)](_0x387b2e, 0x14d2 + 0x1335 + -0x2 * 0x1313)), Thread[_0xdb6c91[_0x4e1e26(0x213)]](sleepPing), slotsClicked[_0xdb6c91[_0x4e1e26(0x13d)](_0x387b2e, -0x1fff + 0x1e62 + 0x2f4)]([testTest[_0x3cd418]]);
            if(Player?.[_0xdb6c91[_0x4e1e26(0x39f)]]()?.[_0xdb6c91[_0x4e1e26(0x18e)](_0x387b2e, -0x39c + 0x2ab * -0x9 + 0x37 * 0x89)](_0x23147c)?.[_0xdb6c91[_0x4e1e26(0x1ad)]]()?.[_0xdb6c91[_0x4e1e26(0x423)]]()?.[_0xdb6c91[_0x4e1e26(0x445)](_0x387b2e, 0x1279 * -0x2 + 0x5e * 0x56 + 0x74f)](_0xdb6c91[_0x4e1e26(0x150)](_0x387b2e, 0x2 * -0x10d6 + 0x6c3 + 0x1cc0)) && !Player?.[_0xdb6c91[_0x4e1e26(0x445)](_0x387b2e, 0x2373 + 0x3 * -0x78d + -0x3c1 * 0x3)]()?.[_0xdb6c91[_0x4e1e26(0x150)](_0x387b2e, -0x97f + 0x1 * 0x475 + 0x6da * 0x1)](_0x23147c)?.[_0xdb6c91[_0x4e1e26(0x144)](_0x387b2e, -0x246f + -0x2 * -0x7a9 + 0x16f6)]()?.[_0xdb6c91[_0x4e1e26(0xf2)](_0x387b2e, 0x1faa + 0x2e9 * -0x1 + -0x1b33)]()?.[_0xdb6c91[_0x4e1e26(0x18b)](_0x387b2e, -0x237e + -0x80d * -0x1 + 0x1d62)](_0xdb6c91[_0x4e1e26(0x31b)]) && !Player?.[_0xdb6c91[_0x4e1e26(0x3e6)](_0x387b2e, 0x5 * 0x43 + -0x1a74 + 0x1aae)]()?.[_0xdb6c91[_0x4e1e26(0x18b)](_0x387b2e, -0x1 * 0xe9 + 0x22b1 + 0x8 * -0x3ff)](_0x23147c)?.[_0xdb6c91[_0x4e1e26(0x445)](_0x387b2e, -0x7 * -0x193 + -0x2 * -0x62 + -0x9f0)]()?.[_0xdb6c91[_0x4e1e26(0x18e)](_0x387b2e, 0x252d + -0x14f7 + 0x8 * -0x1d5)]()?.[_0xdb6c91[_0x4e1e26(0xa6)]](_0xdb6c91[_0x4e1e26(0x2b9)](_0x387b2e, -0xad * 0x27 + 0x1 * -0x238d + 0x3fc8))) {
                currFossil[_0xdb6c91[_0x4e1e26(0x153)](_0x387b2e, -0x1ec * -0xb + 0xe9e + 0x226b * -0x1)](_0x23147c), State[_0xdb6c91[_0x4e1e26(0x18b)](_0x387b2e, -0x1b5f + 0x1a2d + 0x290)](state[_0xdb6c91[_0x4e1e26(0x1dc)]]), _0xf0b5bc = !![], found[_0xdb6c91[_0x4e1e26(0x235)]](), _0xdb6c91[_0x4e1e26(0x3a7)](setTimeout, () => {
                    const _0x3ed0f8 = _0x4e1e26;
                    Client[_0x3dc3fc[_0x3ed0f8(0x204)]][_0x3dc3fc[_0x3ed0f8(0x42e)]]();
                }, _0xdb6c91[_0x4e1e26(0x104)](sleepPing, 0x4a6 + -0x1647 + 0x2f6 * 0x6));
                return;
            }
            _0xdb6c91[_0x4e1e26(0x2d6)](_0x3cd418, _0xdb6c91[_0x4e1e26(0x385)](slots[_0xdb6c91[_0x4e1e26(0x2b9)](_0x387b2e, 0x1 * 0xaf3 + -0x306 * -0x5 + -0x1 * 0x1873)], -0x925 + 0xb7 * -0x35 + 0x2f09)) && !_0xf0b5bc && (State[_0xdb6c91[_0x4e1e26(0x9a)]](state[_0xdb6c91[_0x4e1e26(0x2ad)](_0x387b2e, -0x1 * 0x1259 + -0x26b9 + 0x3ad9)]), notFound[_0xdb6c91[_0x4e1e26(0x2db)](_0x387b2e, 0x8c2 + 0x1 * 0xbb3 + -0x12d3)]());
        });
    }),
    found = new Thread(() => {
        const _0xecf23c = _0x478fc2,
            _0x4f032b = {
                'cmvvH': function (_0x1c9083, _0x5f3abf) {
                    return _0x1c9083(_0x5f3abf);
                },
                'ihlUg': _0xecf23c(0x1ba),
                'XHxVi': function (_0x19e0f9, _0x5c08ed) {
                    return _0x19e0f9(_0x5c08ed);
                },
                'SsqlW': _0xecf23c(0x16a),
                'iaAue': function (_0x1cbd1a, _0x4ecdde) {
                    return _0x1cbd1a(_0x4ecdde);
                },
                'aVXmF': function (_0x500045, _0x2fcc9f) {
                    return _0x500045(_0x2fcc9f);
                },
                'oxIkB': function (_0x401ae1, _0x58085d) {
                    return _0x401ae1(_0x58085d);
                },
                'duiLn': function (_0x56b56f, _0x154f1c) {
                    return _0x56b56f == _0x154f1c;
                },
                'tXkqt': function (_0x3026e2, _0x1e8c11) {
                    return _0x3026e2(_0x1e8c11);
                },
                'EiyhR': function (_0x139146, _0x1a6b3b) {
                    return _0x139146(_0x1a6b3b);
                },
                'kEUqA': function (_0x2ff3a2, _0x55dd80, _0x3bf062, _0x117c01) {
                    return _0x2ff3a2(_0x55dd80, _0x3bf062, _0x117c01);
                },
                'OOWpK': function (_0x3f000f, _0x24572e) {
                    return _0x3f000f(_0x24572e);
                }
            },
            _0x2acfd9 = _0x576977;
        if(!Client[_0x4f032b[_0xecf23c(0x3c4)]])
            return lastGuiOpened = ![];
        if(Client[_0x4f032b[_0xecf23c(0x1a8)](_0x2acfd9, -0xcb3 * 0x3 + 0x8f * -0x1 + 0x221 * 0x13)])
            notFound[_0x4f032b[_0xecf23c(0x21f)]]();
        excavate[_0x4f032b[_0xecf23c(0x296)](_0x2acfd9, -0x2020 + -0xb15 + -0x11 * -0x2a4)](), start[_0x4f032b[_0xecf23c(0xfc)](_0x2acfd9, 0x1 * -0xd45 + -0x2205 + 0x6ff * 0x7)]();
        let _0x56b7e4 = _0x4f032b[_0xecf23c(0x1fa)](getNextSlotToClick, lastGuiOpened);
        if(_0x4f032b[_0xecf23c(0xb9)](_0x56b7e4, -(-0x263d + 0x1 * 0xdd9 + 0x1865)))
            return Client[_0x4f032b[_0xecf23c(0x294)](_0x2acfd9, 0x2204 + 0xcce + -0x2d07 * 0x1)][_0x4f032b[_0xecf23c(0x169)](_0x2acfd9, 0x1 * 0x196 + 0x1044 + -0x56 * 0x31)]();
        else
            _0x4f032b[_0xecf23c(0x33e)](click2, _0x56b7e4, ![], _0x4f032b[_0xecf23c(0x1a8)](_0x2acfd9, -0x1 * -0x1cf2 + -0x92c * -0x3 + 0x7 * -0x7cc)), Client[_0x4f032b[_0xecf23c(0x1ee)](_0x2acfd9, -0x3 * 0x755 + 0xe39 + 0x49d * 0x2)](0x1f63 + -0x1c0f * 0x1 + -0x350, () => {
                const _0x1d9784 = _0xecf23c,
                    _0x1aa991 = _0x2acfd9;
                found[_0x4f032b[_0x1d9784(0xc8)](_0x1aa991, 0x1157 + 0x133b + 0x2 * -0x1178)]();
                return;
            });
    }),
    notFound = new Thread(() => {
        const _0x4c408e = _0x478fc2,
            _0x59fe99 = {
                'pbfqu': function (_0x94fbd8, _0x2e8ddc) {
                    return _0x94fbd8(_0x2e8ddc);
                },
                'yIYBH': function (_0x4d58fb, _0xb8629a) {
                    return _0x4d58fb(_0xb8629a);
                },
                'QRVjH': _0x4c408e(0x18f),
                'QvjDg': _0x4c408e(0x9f) + 'd',
                'XcWAl': function (_0x56bf0, _0x25cf9b) {
                    return _0x56bf0(_0x25cf9b);
                },
                'YPVmS': _0x4c408e(0x38e) + 'e',
                'DOJMy': function (_0x4b997d, _0x43788b) {
                    return _0x4b997d(_0x43788b);
                },
                'WRjvM': function (_0x17138d, _0x2dc765) {
                    return _0x17138d !== _0x2dc765;
                },
                'QKQsZ': _0x4c408e(0x164),
                'gNDfq': function (_0x405e12, _0x915697, _0xd38370, _0xb90d5a) {
                    return _0x405e12(_0x915697, _0xd38370, _0xb90d5a);
                },
                'RPKMM': _0x4c408e(0x8d),
                'KJEzT': function (_0x1bf3bc, _0x22aa47) {
                    return _0x1bf3bc(_0x22aa47);
                },
                'pruxe': function (_0x1d8669, _0x2edc52) {
                    return _0x1d8669(_0x2edc52);
                },
                'sGKtf': function (_0x354900, _0x26ebb2) {
                    return _0x354900(_0x26ebb2);
                },
                'BEJet': function (_0x16152e, _0x3bc91e) {
                    return _0x16152e + _0x3bc91e;
                },
                'EdNmD': function (_0x19520d, _0x2e61a2) {
                    return _0x19520d(_0x2e61a2);
                },
                'EJCty': function (_0x390c13, _0x2e57a6) {
                    return _0x390c13(_0x2e57a6);
                },
                'NFRVV': _0x4c408e(0xf7),
                'tNHJH': _0x4c408e(0x103),
                'xgrZz': function (_0xfda20e, _0x5cafb2, _0x3c6208) {
                    return _0xfda20e(_0x5cafb2, _0x3c6208);
                },
                'StQBF': function (_0xef5974, _0x1b0d09) {
                    return _0xef5974 * _0x1b0d09;
                }
            },
            _0xce1949 = _0x576977;
        let _0x2cef19 = [];
        Player[_0x59fe99[_0x4c408e(0x21d)](_0xce1949, 0x2612 + 0x1289 + -0x1 * 0x3712)]()[_0x59fe99[_0x4c408e(0x22a)](_0xce1949, -0x3a5 * -0xa + -0x8 * -0x161 + -0x2e02)]()[_0x59fe99[_0x4c408e(0x299)](_0xce1949, 0x34 * -0x9b + -0x143 * -0x11 + -0x41 * -0x2f)]((_0x43edc2, _0x1f98ae) => {
            const _0x26996e = _0x4c408e,
                _0xd5b324 = _0xce1949;
            if(!_0x43edc2)
                return;
            let _0x21fb53 = '';
            _0x43edc2?.[_0x59fe99[_0x26996e(0x1f3)](_0xd5b324, 0x512 + -0x32 * -0x25 + 0x7 * -0x181)]()?.[_0x59fe99[_0x26996e(0x21d)](_0xd5b324, 0xabe + 0x881 + -0x1159 * 0x1)](_0x2b39a1 => _0x21fb53 += _0x2b39a1);
            if(_0x21fb53?.[_0x59fe99[_0x26996e(0x241)]](_0x59fe99[_0x26996e(0x326)]))
                return _0x2cef19[_0x59fe99[_0x26996e(0x1f3)](_0xd5b324, -0x1 * 0x1e6d + -0x1563 + 0x3527)](_0x1f98ae);
        }), Player[_0x59fe99[_0x4c408e(0x86)](_0xce1949, 0x8b7 + 0x1f0d + -0x263b)]()[_0x59fe99[_0x4c408e(0xcb)]]()[_0x59fe99[_0x4c408e(0x191)]]((_0x11bffc, _0x1e0211) => {
            const _0x16dc5c = _0x4c408e,
                _0x427027 = _0xce1949;
            if(!_0x11bffc)
                return;
            if(_0x2cef19[_0x59fe99[_0x16dc5c(0x1f3)](_0x427027, -0x2b * 0x35 + -0x45a + 0xf32)](_0x1e0211))
                return;
            if(_0x11bffc?.[_0x59fe99[_0x16dc5c(0x299)](_0x427027, -0x32f * -0x1 + -0x3f * 0xf + -0x43 * -0x9)]()?.[_0x59fe99[_0x16dc5c(0xfa)]]()?.[_0x59fe99[_0x16dc5c(0x241)]](_0x59fe99[_0x16dc5c(0x22a)](_0x427027, 0x10e6 * -0x1 + 0x1 * 0x404 + 0xe50)) && _0x59fe99[_0x16dc5c(0x371)](_0x2cef19[_0x59fe99[_0x16dc5c(0x1f3)](_0x427027, -0x354 + -0x367 * -0x1 + 0x5 * 0x4f)], -0x7 * -0xbf + 0xab0 + 0xfda * -0x1))
                _0x2cef19[_0x59fe99[_0x16dc5c(0x193)]](_0x1e0211);
            else
                return;
        }), _0x2cef19[_0x59fe99[_0x4c408e(0x1f3)](_0xce1949, -0x1 * -0x254f + 0x35f * 0x3 + -0x2d86)](_0x32cf34 => {
            const _0x1f378d = _0x4c408e,
                _0x5f66a3 = _0xce1949;
            Thread[_0x59fe99[_0x1f378d(0x21d)](_0x5f66a3, 0x1523 + 0x2315 + 0x1 * -0x3667)](0x850 + 0x739 + 0x165 * -0xb), _0x59fe99[_0x1f378d(0x3c9)](click, _0x32cf34, ![], _0x59fe99[_0x1f378d(0x1cb)]), Thread[_0x59fe99[_0x1f378d(0x22a)](_0x5f66a3, -0x653 * -0x4 + -0x21f2 + -0x37d * -0x3)](sleepPing);
        }), _0x59fe99[_0x4c408e(0x85)](setTimeout, () => {
            const _0x40b16a = _0x4c408e,
                _0x4df61e = _0xce1949;
            State[_0x59fe99[_0x40b16a(0x32d)](_0x4df61e, -0x9 * 0xc8 + -0xd4b + 0x15b1 * 0x1)](state[_0x59fe99[_0x40b16a(0xbf)](_0x4df61e, -0x1ed3 + -0x67d * 0x2 + -0x1d * -0x193)]), ChatLib[_0x59fe99[_0x40b16a(0xae)](_0x4df61e, 0x66 + -0xea2 + -0x2b * -0x5d)](_0x59fe99[_0x40b16a(0x381)](prefix, _0x59fe99[_0x40b16a(0x389)](_0x4df61e, 0x19b2 + -0x6ca + 0x1 * -0x116f)));
        }, _0x59fe99[_0x4c408e(0x227)](sleepPing, 0x25c5 + -0x32b + -0x2292));
    });
register(_0x576977(0x22c7 + 0x17cf + -0x3933), _0x310708 => {
    const _0x3e2341 = _0x478fc2,
        _0x200394 = {
            'JGJDf': _0x3e2341(0x2cc),
            'PHwrN': function (_0xaae2d7, _0x3e8f8c) {
                return _0xaae2d7(_0x3e8f8c);
            },
            'dmfGl': function (_0x418349, _0x3c34a3) {
                return _0x418349(_0x3c34a3);
            },
            'qYhSj': _0x3e2341(0x3c3) + _0x3e2341(0x224),
            'XroYg': _0x3e2341(0x422) + _0x3e2341(0x1bf),
            'eaDWG': function (_0x5a44f9, _0x2a7f68) {
                return _0x5a44f9(_0x2a7f68);
            },
            'TTtTC': function (_0x526825, _0x8545b5) {
                return _0x526825(_0x8545b5);
            },
            'eKcrU': function (_0xf96518, _0x22b559) {
                return _0xf96518(_0x22b559);
            },
            'DGFWn': function (_0x41a5f8, _0x4dafec, _0x43dd86) {
                return _0x41a5f8(_0x4dafec, _0x43dd86);
            },
            'iEomh': function (_0x234b6f, _0x1d5e0b) {
                return _0x234b6f * _0x1d5e0b;
            },
            'LWFpm': function (_0x7a6505, _0x165848) {
                return _0x7a6505 + _0x165848;
            },
            'rpMKB': function (_0x2d1645, _0x18797d) {
                return _0x2d1645(_0x18797d);
            }
        },
        _0x5be978 = _0x576977;
    if(!going)
        return;
    _0x200394[_0x3e2341(0x43d)](cancel, _0x310708), ChatLib[_0x200394[_0x3e2341(0x192)](_0x5be978, -0x8a6 + -0x1988 + -0x25f * -0xf)](_0x200394[_0x3e2341(0x37e)](prefix, _0x200394[_0x3e2341(0x196)](_0x5be978, 0x2581 + -0x956 + -0x16 * 0x135))), _0x200394[_0x3e2341(0x1cc)](setTimeout, () => {
        const _0xdea371 = _0x3e2341,
            _0x4b2946 = _0x5be978,
            _0xe04808 = Client[_0x200394[_0xdea371(0x43d)](_0x4b2946, 0xb7f + 0x1 * -0x7ac + -0x7 * 0x45)]()[_0x200394[_0xdea371(0x192)](_0x4b2946, 0x6 * -0x57 + 0x1677 + -0x1302)]()[_0x200394[_0xdea371(0x383)]](_0x200394[_0xdea371(0x154)], null);
        _0xe04808[_0x200394[_0xdea371(0x30b)](_0x4b2946, 0x1c59 + 0x31 * 0x41 + -0x26e7)](!![]), _0xe04808[_0x200394[_0xdea371(0x1c7)](_0x4b2946, -0x105f + 0x12b0 + 0x7c * -0x1)](Client[_0x200394[_0xdea371(0xd9)](_0x4b2946, -0x4c7 * -0x3 + -0x24 * 0x5c + -0x8b * -0x1)](), null), _0x200394[_0xdea371(0x1cc)](setTimeout, () => {
            const _0x4a66d6 = _0xdea371;
            start[_0x200394[_0x4a66d6(0x3a5)]]();
        }, _0x200394[_0xdea371(0x39d)](sleepPing, -0xae2 + 0x2 * -0x9b + 0x1 * 0xc1b));
    }, sleepPing);
})[_0x478fc2(0x2a2) + _0x478fc2(0x2ff)](_0x576977(-0x202 * -0x1 + 0x1356 + 0x1cf * -0xb))[_0x576977(0x396 + -0x1ba1 * -0x1 + 0xc * -0x26f)]();
let going = ![],
    oldMouseHelper = ![],
    ungrabbed = ![];

function ungrab() {
    const _0x35e873 = _0x478fc2,
        _0x4c6f38 = {
            'DHXWg': function (_0x48da20, _0x285fad) {
                return _0x48da20(_0x285fad);
            },
            'ToQaP': function (_0x374b4f, _0xff0909) {
                return _0x374b4f(_0xff0909);
            },
            'qgXTr': function (_0x33defd, _0x262e9c) {
                return _0x33defd(_0x262e9c);
            },
            'UxKSn': _0x35e873(0x2eb) + _0x35e873(0x402),
            'LJpGt': _0x35e873(0x366) + '_b',
            'lIdVx': function (_0x8a7e2b, _0x44e382) {
                return _0x8a7e2b(_0x44e382);
            },
            'oBnnT': function (_0x2b1ba0, _0x839107) {
                return _0x2b1ba0(_0x839107);
            },
            'VtfGt': _0x35e873(0x1a2) + 'r'
        },
        _0x3c3d4e = _0x576977;
    ungrabbed = !![];
    let _0x36dba1 = Client[_0x4c6f38[_0x35e873(0x2e8)](_0x3c3d4e, 0x28f * 0xa + -0x21cf + -0x9 * -0x121)]();
    _0x36dba1[_0x4c6f38[_0x35e873(0x36f)](_0x3c3d4e, 0x38 * 0x22 + -0x1e1b + -0x181d * -0x1)][_0x4c6f38[_0x35e873(0x368)](_0x3c3d4e, -0x1f64 + -0x255d + 0x4622)] = ![];
    if(!oldMouseHelper)
        oldMouseHelper = _0x36dba1[_0x4c6f38[_0x35e873(0x3b4)]];
    oldMouseHelper[_0x4c6f38[_0x35e873(0x102)]](), _0x36dba1[_0x4c6f38[_0x35e873(0x35f)](_0x3c3d4e, -0x3e2 + 0x17b2 + -0x66 * 0x2e)] = !![], _0x36dba1[_0x4c6f38[_0x35e873(0x368)](_0x3c3d4e, 0x21a8 + -0x35a + -0x1c4c)] = new JavaAdapter(net[_0x4c6f38[_0x35e873(0x368)](_0x3c3d4e, 0xd * -0x215 + 0x26b9 * 0x1 + -0x9b2)][_0x4c6f38[_0x35e873(0x123)](_0x3c3d4e, 0x1013 * -0x2 + 0x9fe + 0xc11 * 0x2)][_0x4c6f38[_0x35e873(0xb5)]], {
        'func_74374_c': function () {},
        'func_74372_a': function () {},
        'func_74373_b': function () {}
    });
}

function regrab() {
    const _0x436de9 = _0x478fc2,
        _0x56b5b3 = {
            'RLMSc': _0x436de9(0x214) + 'ft',
            'yhDSH': function (_0x4cba20, _0x4350cb) {
                return _0x4cba20(_0x4350cb);
            },
            'DocPa': function (_0x40433b, _0x4592f9) {
                return _0x40433b(_0x4592f9);
            }
        },
        _0x1c9332 = _0x576977;
    if(!ungrabbed)
        return;
    ungrabbed = ![];
    let _0x39069b = Client[_0x56b5b3[_0x436de9(0x25b)]]();
    _0x39069b[_0x56b5b3[_0x436de9(0x12c)](_0x1c9332, -0x23c + -0x3 * 0x329 + -0x493 * -0x3)] = oldMouseHelper, _0x39069b[_0x56b5b3[_0x436de9(0x3ff)](_0x1c9332, -0x2b * 0x2b + 0x1242 + -0x907)][_0x56b5b3[_0x436de9(0x3ff)](_0x1c9332, -0x1387 + -0x861 + 0x1db7)](), oldMouseHelper = null;
}
const key = new KeyBind(_0x576977(-0x16e0 + -0x2149 + 0x39aa), Keyboard[_0x478fc2(0x28a)], _0x478fc2(0x1f9) + _0x478fc2(0x444) + _0x478fc2(0x182));
let enabled = ![];
register(_0x576977(-0x67 * -0x59 + -0x3d9 * -0x2 + -0x2a0a), () => {
    const _0xfa94c8 = _0x478fc2,
        _0x3b3351 = {
            'qtmIc': function (_0x4bdba9, _0x40053a) {
                return _0x4bdba9(_0x40053a);
            },
            'vhZEp': function (_0x170524, _0x96d06b) {
                return _0x170524(_0x96d06b);
            },
            'SYlDt': function (_0x36307b, _0x464b3e, _0x242fc5) {
                return _0x36307b(_0x464b3e, _0x242fc5);
            },
            'zgPZt': _0xfa94c8(0x41e),
            'rDJfD': function (_0x409347, _0x57264f) {
                return _0x409347(_0x57264f);
            },
            'aHpYp': _0xfa94c8(0x418),
            'KSpUa': function (_0x5bfa80, _0xd7e32) {
                return _0x5bfa80 + _0xd7e32;
            },
            'RFIXP': _0xfa94c8(0xea) + '.',
            'VbCem': function (_0x354b5d) {
                return _0x354b5d();
            },
            'YHYaY': function (_0x1bf649, _0x11959a) {
                return _0x1bf649 * _0x11959a;
            },
            'PDqnU': _0xfa94c8(0x2de),
            'MqCUu': function (_0x460f53, _0x208198) {
                return _0x460f53 + _0x208198;
            },
            'czQSs': function (_0x2d7966, _0x56374f) {
                return _0x2d7966(_0x56374f);
            },
            'wSHiz': _0xfa94c8(0x16a),
            'iApoN': function (_0xdd8fc8, _0x4cd53e) {
                return _0xdd8fc8 * _0x4cd53e;
            }
        },
        _0xf73dc9 = _0x576977;
    if(Client[_0x3b3351[_0xfa94c8(0x29c)]]())
        return;
    if(key[_0x3b3351[_0xfa94c8(0x38a)](_0xf73dc9, 0x2329 * -0x1 + -0x6 * -0x35 + 0x23b1)]()) {
        if(enabled)
            return;
        enabled = !![];
        if(going)
            going = ![];
        else
            going = !![];
        if(going) {
            if(Client[_0x3b3351[_0xfa94c8(0x21e)]]())
                return;
            ChatLib[_0x3b3351[_0xfa94c8(0x155)](_0xf73dc9, 0x357 * -0x1 + 0x9 * 0x373 + -0x1a51)](_0x3b3351[_0xfa94c8(0x143)](prefix, _0x3b3351[_0xfa94c8(0x3ae)])), _0x3b3351[_0xfa94c8(0x312)](ungrab), _0x3b3351[_0xfa94c8(0x229)](setTimeout, () => {
                const _0x41eb34 = _0xfa94c8,
                    _0x341352 = _0xf73dc9;
                ChatLib[_0x3b3351[_0x41eb34(0x3d8)](_0x341352, 0x599 * -0x2 + -0x693 * 0x5 + 0x2 * 0x16cc)](_0x3b3351[_0x41eb34(0x155)](_0x341352, 0x1c * 0xd9 + -0x20f2 + -0x2 * -0x584)), _0x3b3351[_0x41eb34(0x229)](setTimeout, () => startPath(), 0x2307 + 0xee4 + -0x2ff7);
            }, _0x3b3351[_0xfa94c8(0x3ba)](sleepPing, 0x2172 + 0x20 * 0xdb + -0x3ccf));
        } else
            ChatLib[_0x3b3351[_0xfa94c8(0x113)]](_0x3b3351[_0xfa94c8(0x3d3)](prefix, _0x3b3351[_0xfa94c8(0x3bc)](_0xf73dc9, 0x17a0 * 0x1 + -0xda5 + -0x12d * 0x7))), _0x3b3351[_0xfa94c8(0x312)](regrab), start[_0x3b3351[_0xfa94c8(0x3d9)]](), excavate[_0x3b3351[_0xfa94c8(0x3d9)]](), notFound[_0x3b3351[_0xfa94c8(0x3d9)]](), autoWalk = ![], currentUserPath = [], _0x3b3351[_0xfa94c8(0x312)](stopAllMovement), _0x3b3351[_0xfa94c8(0x229)](setTimeout, () => {
                const _0x5bbbdf = _0xfa94c8,
                    _0x451809 = _0xf73dc9;
                Client?.[_0x3b3351[_0x5bbbdf(0x155)](_0x451809, 0x170a * -0x1 + 0x1bde + -0x103 * 0x3)]?.[_0x3b3351[_0x5bbbdf(0x3d8)](_0x451809, -0x123e + 0x20d6 + -0xd34)]();
            }, _0x3b3351[_0xfa94c8(0x291)](sleepPing, 0x9cc + 0xd0f + -0x16d9));
        _0x3b3351[_0xfa94c8(0x229)](setTimeout, () => {
            enabled = ![];
        }, 0x249b + -0x1 * 0xfbb + -0x1c * 0xad);
    }
}), register(_0x576977(-0x33 * -0x4d + 0x1966 * 0x1 + 0x2 * -0x1391), () => {
    const _0x476dab = _0x478fc2,
        _0x117f0b = {
            'jkeCj': function (_0x5caaf8, _0x2d5584) {
                return _0x5caaf8 !== _0x2d5584;
            },
            'KFLDJ': function (_0x55b705, _0x458776) {
                return _0x55b705(_0x458776);
            },
            'iJcOR': function (_0x49bfb8, _0x82f52e) {
                return _0x49bfb8(_0x82f52e);
            },
            'dCEIs': _0x476dab(0x421),
            'DCBPQ': function (_0xa6317e, _0x4b6b1a) {
                return _0xa6317e(_0x4b6b1a);
            },
            'ndLZH': _0x476dab(0x2da)
        },
        _0x301621 = _0x576977;
    if(going) {
        if(_0x117f0b[_0x476dab(0xf6)](State[_0x117f0b[_0x476dab(0x13e)](_0x301621, -0xe8 * -0xf + 0x7 * -0x4e9 + 0x11 * 0x14e)](), state[_0x117f0b[_0x476dab(0x396)](_0x301621, -0x7c6 + -0x1 * 0x12c3 + 0x1c63)]))
            return;
        State[_0x117f0b[_0x476dab(0x396)](_0x301621, 0x5 * -0x26e + 0x2 * -0xd03 + 0x278a)](state[_0x117f0b[_0x476dab(0x290)]]), Client[_0x117f0b[_0x476dab(0x2a6)](_0x301621, 0x33 * -0x3d + -0x1c4f + 0x2a41)][_0x117f0b[_0x476dab(0x1f1)]]();
    }
}), register(_0x478fc2(0x126), () => {
    const _0x320051 = _0x478fc2,
        _0x469aee = {
            'TdNsS': function (_0x452f28) {
                return _0x452f28();
            }
        };
    _0x469aee[_0x320051(0x323)](regrab);
})[_0x478fc2(0x40b)](_0x478fc2(0x15d) + 'e');
let infractions = 0x7b1 + 0x2487 * 0x1 + 0x5 * -0x8d8;
register(_0x478fc2(0x3f0), () => {
    const _0x3ffdd2 = _0x478fc2,
        _0x4f5de6 = {
            'NrJzU': _0x3ffdd2(0x2cc),
            'jotJP': function (_0x38152d, _0x1b11cd) {
                return _0x38152d(_0x1b11cd);
            },
            'bNkRm': function (_0x36da03, _0x3b6f19) {
                return _0x36da03 && _0x3b6f19;
            },
            'whInv': function (_0x2e7d93, _0x4621bb) {
                return _0x2e7d93 === _0x4621bb;
            },
            'zaoYd': function (_0x36f7dc) {
                return _0x36f7dc();
            },
            'BWEan': function (_0x50e68b, _0x1460cd) {
                return _0x50e68b >= _0x1460cd;
            },
            'qyMWp': function (_0x3bdbc4, _0x34c411) {
                return _0x3bdbc4 >= _0x34c411;
            },
            'fLVWm': function (_0xd28c9e, _0x28a423) {
                return _0xd28c9e(_0x28a423);
            },
            'vJsEy': function (_0x33988f, _0x4f3633) {
                return _0x33988f + _0x4f3633;
            },
            'brIpg': function (_0x1a5528, _0x192627) {
                return _0x1a5528(_0x192627);
            },
            'ZjOtx': function (_0x496be6, _0x43f55a) {
                return _0x496be6(_0x43f55a);
            },
            'gIVHk': function (_0x22abda, _0x885b4b, _0x4c6481) {
                return _0x22abda(_0x885b4b, _0x4c6481);
            }
        },
        _0x20e9df = _0x576977;
    if(autoWalk) {
        let _0x51069e = _0x4f5de6[_0x3ffdd2(0x270)](walkOn, currentUserPath);
        _0x4f5de6[_0x3ffdd2(0x391)](autoWalk, !_0x51069e) && _0x4f5de6[_0x3ffdd2(0x3d2)](_0x4f5de6[_0x3ffdd2(0x1f7)](getSpeed), 0x7cf + -0x224 + -0x5ab) && (infractions++, _0x4f5de6[_0x3ffdd2(0x172)](infractions, 0x1dbc + -0x965 + -0x13f3) && (jumpBind[_0x4f5de6[_0x3ffdd2(0x270)](_0x20e9df, -0x2001 + 0x24d5 + 0x1bb * -0x2)](!![]), _0x4f5de6[_0x3ffdd2(0xec)](infractions, -0x1122 + -0x17c6 + -0x1c * -0x17b) && (infractions = 0x16db + 0x10b6 + -0x2791))), _0x4f5de6[_0x3ffdd2(0x391)](autoWalk, _0x51069e) && (autoWalk = ![], currentUserPath = [], ChatLib[_0x4f5de6[_0x3ffdd2(0xfd)](_0x20e9df, 0xda1 * 0x1 + 0x656 * 0x1 + 0x10 * -0x121)](_0x4f5de6[_0x3ffdd2(0x230)](prefix, _0x4f5de6[_0x3ffdd2(0xfd)](_0x20e9df, -0x7 * -0x39f + 0x1ea2 + 0x7 * -0x7c2))), enabled = !![], _0x4f5de6[_0x3ffdd2(0x1f7)](stopAllMovement), _0x4f5de6[_0x3ffdd2(0xfd)](lookAtBlock, new net[(_0x4f5de6[_0x3ffdd2(0x439)](_0x20e9df, -0x2074 + 0x1ed * 0xe + 0x774))][(_0x4f5de6[_0x3ffdd2(0x270)](_0x20e9df, -0x1 * 0x232 + -0x12b2 + -0x16de * -0x1))][(_0x4f5de6[_0x3ffdd2(0x1e8)](_0x20e9df, -0x1c1c + -0xc02 + 0x2a1b))](0x7f2 * -0x4 + 0x4c * 0x34 + 0x106b, _0x4f5de6[_0x3ffdd2(0x230)](-0xc29 + -0x59 * 0x5b + -0x2 * -0x1622, -0x2468 + -0x4 * 0x9b2 + 0x1 * 0x4b31 + 0.5), -0x30 * -0x86 + 0x16c1 + -0x2efe)), _0x4f5de6[_0x3ffdd2(0x217)](setTimeout, () => {
            const _0x533ce7 = _0x3ffdd2;
            start[_0x4f5de6[_0x533ce7(0x33c)]]();
        }, 0x1f8 + 0xed0 + -0xce0));
    }
}), register(_0x576977(0x1ead + 0x847 * -0x2 + 0xca5 * -0x1), () => {
    const _0x6fb420 = _0x478fc2,
        _0x52cd3c = {
            'tkjrC': function (_0x15198c, _0x403bc5) {
                return _0x15198c == _0x403bc5;
            },
            'EapUf': function (_0x511922, _0x2e461b) {
                return _0x511922 - _0x2e461b;
            },
            'gZLJb': function (_0x1cfa68, _0x27531f) {
                return _0x1cfa68(_0x27531f);
            },
            'jPFNH': function (_0x10d24d, _0x378e98) {
                return _0x10d24d(_0x378e98);
            },
            'qODDx': function (_0x2e44e4, _0x352386) {
                return _0x2e44e4 + _0x352386;
            },
            'bdhID': _0x6fb420(0x364),
            'FediY': _0x6fb420(0x186),
            'YnslS': function (_0x308668, _0x473fc1) {
                return _0x308668 === _0x473fc1;
            },
            'SDRJM': function (_0x5d475c, _0x500a73) {
                return _0x5d475c <= _0x500a73;
            },
            'pdskN': _0x6fb420(0x1bc),
            'bsDNf': _0x6fb420(0x103)
        };
    if(_0x52cd3c[_0x6fb420(0x205)](currentUserPath, undefined))
        return;
    if(_0x52cd3c[_0x6fb420(0x6e)](currentUserPath[_0x52cd3c[_0x6fb420(0x1ca)]], 0x4 * 0x1c2 + -0x3 * 0x567 + 0x32 * 0x2f))
        return;
    currentUserPath[_0x52cd3c[_0x6fb420(0x1f8)]]((_0x3a65e8, _0x1a7f2e) => {
        const _0xdcf98d = _0x6fb420,
            _0x584417 = _0x4000;
        _0x52cd3c[_0xdcf98d(0x245)](_0x3a65e8, currentUserPath[_0x52cd3c[_0xdcf98d(0xc1)](currentUserPath[_0x52cd3c[_0xdcf98d(0x2ee)](_0x584417, 0x4d7 + -0x1 * 0x295 + 0x2 * -0x52)], 0x35f + -0xb3e + 0x7e0)]) ? Tessellator[_0x52cd3c[_0xdcf98d(0xa1)](_0x584417, 0x781 + -0x24b6 * -0x1 + 0x2b * -0xfe)](_0x52cd3c[_0xdcf98d(0x2ee)](_0x584417, 0x1c73 + -0x1 * -0x93e + -0x7 * 0x526), _0x3a65e8['x'], _0x52cd3c[_0xdcf98d(0x438)](_0x3a65e8['y'], Player[_0x52cd3c[_0xdcf98d(0x6a)]]()[_0x52cd3c[_0xdcf98d(0x2ee)](_0x584417, 0x1 * -0x429 + -0x2601 * -0x1 + -0x115 * 0x1e)]()), _0x3a65e8['z'], Renderer[_0x52cd3c[_0xdcf98d(0x2ee)](_0x584417, 0x25fd + -0x198a + -0x42 * 0x2b)], !![], -0xb6c + 0x259a + -0x1 * 0x1a2e + 0.02, ![]) : _0x692c78[_0x52cd3c[_0xdcf98d(0x420)]](_0x3a65e8['x'], _0x52cd3c[_0xdcf98d(0xc1)](_0x3a65e8['y'], -0x1804 + -0x111f + 0x2924 + 0.5), _0x3a65e8['z'], -0xd6f + -0x2 * 0x289 + 0x1282, -0x54d * -0x3 + 0x17d * 0x1 + -0x1163, -0x1466 * -0x1 + 0x1745 + -0xa2 * 0x45, 0x225c * 0x1 + 0xbdb + 0x1 * -0x2e37, -0x13bd + 0x1f20 + -0xb63, -0xc1d * 0x2 + 0x2612 + -0xdd8 + 0.25, !![]);
    });
});
