//import "./gui"
import RenderLib from '../RenderLib/index';
import { getLowerContainer, getItemId } from './util';

let notSigma = false;

const mc = Client.getMinecraft();
const fossils = [
    `00100
     01010
     10001
     10010
     10000.`,
    `0011100
     0101010
     1001001
     0001000`,
    `00011110
     00100001
     11000010
     11000000.`,
    `001100
     011110
     111111`,
    `000010
     001111
     010110
     101010
     010100.`,
    `00011
     01100
     11111
     01100
     00011`,
    `1111
     1001
     1101
     0001
     1111.`,
    `011110
     111111
     011110
     001100`
].map(s => {
    s = s.trim();
    const a = s[s.length - 1] === '.';
    if (a) s = s.slice(0, -1);
    const l = s.split('\n').map(v => v.trim().split('').map(v => v === '1' ? true : false));
    return {
      arr: l,
      w: l[0].length,
      h: l.length,
      size: l.reduce((a, v) => a + v.reduce((a, v) => a + v, 0), 0),
      a
    };
});

let lastGuiOpened;

register(`guiOpened`, evn => {
    lastGuiOpened = evn.gui
})

const pathTo = (x, y, z) => {
    let localToConnect = [];

    let endPoint = new Point(x, y, z);

    let path = getPathEntity(endPoint.x, endPoint.y, endPoint.z);

    if(!path) return;

    for(i = 0; i < path.func_75874_d() - 1; i++) { // getCurrentPathLength
        let currentP = path.func_75877_a(i); // getPathPointFromIndex
        let point = new Point(currentP.field_75839_a + 0.5, currentP.field_75837_b + 0.5, currentP.field_75838_c + 0.5); // xCoord yCoord zCoord
        localToConnect.push(point);
    }

    return localToConnect;
}

  
export function getNextSlotToClick(gui) {
    if(notSigma) return false;
    if (gui.getClass().getSimpleName() !== 'GuiChest') {
        ChatLib.chat(`${prefix}GUI Class Is Not GuiChest`)
        return -1;
    }
    const inv = getLowerContainer(gui);
    const name = inv.func_70005_c_();
  
    let poss = [];
    let size = 0;
    let dust = new Array(54).fill(false);
    let dirt = new Array(54).fill(false);
    let trea = new Array(54).fill(false);
    let dc = 0;
    let charges = 0;
    let hist = new Array(54).fill(0);
  
    const test = (l, i) => {
      const f = fossils[l.f];
      let y = ~~(i / 9) - ~~(l.p / 9);
      let x = (i % 9) - (l.p % 9);
      if (x < 0 || y < 0) return false;
      if (l.r & 1) {
        const t = y;
        y = x;
        x = t;
      }
      if (x >= f.w || y >= f.h) return false;
      if (l.m ^ (l.r === 1 || l.r === 2)) x = f.w - x - 1;
      if (l.r === 2 || l.r === 3) y = f.h - y - 1;
      return f.arr[y][x];
    };
  
    for (let i = 0; i < 54; i++) {
      let item = inv.func_70301_a(i);
      if (item === null) continue;
      if (getItemId(item) !== 'minecraft:stained_glass_pane') continue;
      let dmg = item.func_77960_j();
      dust[i] = dmg === 0;
      dirt[i] = dmg !== 0;
      trea[i] = dmg === 5;
      if (dust[i]) {
        dc++;
      } else if (dirt[i] && charges === -1) {
        const tag = item.func_77978_p().func_74775_l('display');
        const lore = tag.func_150295_c('Lore', 8);
        for (let j = 0; j < lore.func_74745_c(); j++) {
          let m = lore.func_150307_f(j).match(/^§7Chisel Charges Remaining: §.(\d+)$/);
          if (m) {
            charges = +m[1];
            break;
          }
        }
      }
    }
  
    if (dc > 0 && size === 0) {
      const tag = inv.func_70301_a(dust.indexOf(true)).func_77978_p().func_74775_l('display');
      const lore = tag.func_150295_c('Lore', 8);
      for (let i = 0; i < lore.func_74745_c(); i++) {
        let m = lore.func_150307_f(i).match(/^§7Fossil Excavation Progress: §.([\d.]+)%$/);
        if (m) {
          size = Math.round(100 / (+m[1]) * dc);
          break;
        }
      }
    }
  
    fossils.forEach((v, i) => {
      if (size > 0 && v.size !== size) return;
      for (let y = 0; y <= 6 - v.h; y++) {
        for (let x = 0; x <= 9 - v.w; x++) {
          poss.push({ f: i, p: (y * 9) + x, r: 0, m: false });
          poss.push({ f: i, p: (y * 9) + x, r: 2, m: false });
          if (v.a) {
            poss.push({ f: i, p: (y * 9) + x, r: 0, m: true });
            poss.push({ f: i, p: (y * 9) + x, r: 2, m: true });
          }
        }
      }
      for (let y = 0; y <= 6 - v.w; y++) {
        for (let x = 0; x <= 9 - v.h; x++) {
          poss.push({ f: i, p: (y * 9) + x, r: 1, m: false });
          poss.push({ f: i, p: (y * 9) + x, r: 3, m: false });
          if (v.a) {
            poss.push({ f: i, p: (y * 9) + x, r: 1, m: true });
            poss.push({ f: i, p: (y * 9) + x, r: 3, m: true });
          }
        }
      }
    });
  
    poss = poss.filter(v => {
      if (size > 0 && fossils[v.f].size !== size) return false;
      for (let i = 0; i < 54; i++) {
        if ((!dirt[i]) && (test(v, i) ^ dust[i])) return false;
      }
      return true;
    });
  
    inv.func_110133_a(`${poss.length} Orientations | ${charges} Charges`);
    if (poss.length === 0) { return -1; }
  
    hist = new Array(54).fill(0);
    poss.forEach(v => {
      for (let i = 0; i < 54; i++) {
        if (!dirt[i]) continue;
        if (test(v, i)) hist[i]++;
      }
    });
  
    let best = hist.reduce((a, v, i) => hist[a] > v ? a : i, 0);
  
    return best;
}

const forwardBind = new KeyBind(mc.field_71474_y.field_74351_w);
const backwardBind = new KeyBind(mc.field_71474_y.field_74368_y);
const leftBind = new KeyBind(mc.field_71474_y.field_74370_x);
const rightBind = new KeyBind(mc.field_71474_y.field_74366_z);
const jumpBind = new KeyBind(mc.field_71474_y.field_74314_A);
const sneakBind = new KeyBind(mc.field_71474_y.field_74311_E);
const sprintBind = new KeyBind(mc.field_71474_y.field_151444_V);
const attackBind = new KeyBind(mc.field_71474_y.field_74312_F);
const useBind = new KeyBind(mc.field_71474_y.field_74313_G);
  
class Point {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}

let currentUserPath = [];

let autoWalk = false;
let rotmode = true;

const stopAllMovement = () => {
    jumpBind.setState(false);
    forwardBind.setState(false);
    rightBind.setState(false);
    backwardBind.setState(false);
    leftBind.setState(false);
    sneakBind.setState(false)
}

const getPathEntity = (x, y, z) => {
    nodeProcessor = new net.minecraft.world.pathfinder.WalkNodeProcessor();
    nodeProcessor.func_176175_a(true); // setEnterDoors
    nodeProcessor.func_176176_c(true); // setAvoidsWater
    pathFinder = new net.minecraft.pathfinding.PathFinder(nodeProcessor);
    return pathFinder.func_180782_a(
    	World.getWorld(),
    	Player.getPlayer(),
    	new net.minecraft.util.BlockPos(x, y, z),
    	2000
    ); // createEntityPathTo
};


const possibleRotations = [-180, -135, -90, -45, 0, 45, 90, 135, 180];

const getClosest = (counts, goal) => {
    return counts.reduce((prev, curr) => Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);
}

const pressKeys = (arr) => {
    arr.forEach(key => {
        switch(key) {
            case `W`:
                forwardBind.setState(true);
                break;
            case `S`:
                backwardBind.setState(true);
                break;
            case `A`:
                leftBind.setState(true);
                break;
            case `D`:
                rightBind.setState(true);
                break;
            case `SPACE`:
                //jumpBind.setState(true);
                break;
            case `SNEAK`:
                sneakBind.setState(true);
                break;
            case `SPRINT`:
                sprintBind.setState(true);
                break;
            case `LEFTC`:
                attackBind.setState(true);
                break;
            case `RIGHTC`:
                useBind.setState(true);
                break;
        }
    });
}

const getBind = (dir, pn, yaw) => {
    yaw = getClosest(possibleRotations, yaw);
    switch(yaw) {
        case 180:
        case -180:
            pn === `P` ? dir === `X` ? pressKeys([`D`]) : pressKeys([`S`]) : dir === `X` ? pressKeys([`A`]) : pressKeys([`W`]);
            break;
        case -90:
            pn === `P` ? dir === `X` ? pressKeys([`W`]) : pressKeys([`D`]) : dir === `X` ? pressKeys([`S`]) : pressKeys([`A`]);
            break;
        case 0:
            pn === `P` ? dir === `X` ? pressKeys([`A`]) : pressKeys([`W`]) : dir === `X` ? pressKeys([`D`]) : pressKeys([`S`]);
            break;
        case 90:
            pn === `P` ? dir === `X` ? pressKeys([`S`]) : pressKeys([`A`]) : dir === `X` ? pressKeys([`W`]) : pressKeys([`D`]);
            break;
        case -135:
            pn === `P` ? dir === `X` ? pressKeys([`W`, `D`]) : pressKeys([`S`, `D`]) : dir === `X` ? pressKeys([`S`, `A`]) : pressKeys([`W`, `A`]);
            break;
        case 135:
            pn === `P` ? dir === `X` ? pressKeys([`S`, `D`]) : pressKeys([`S`, `A`]) : dir === `X` ? pressKeys([`W`, `A`]) : pressKeys([`W`, `D`]);
            break;
        case -45:
            pn === `P` ? dir === `X` ? pressKeys([`W`, `A`]) : pressKeys([`W`, `D`]) : dir === `X` ? pressKeys([`S`, `D`]) : pressKeys([`S`, `A`]);
            break;
        case 45:
            pn === `P` ? dir === `X` ? pressKeys([`S`, `A`]) : pressKeys([`W`, `A`]) : dir === `X` ? pressKeys([`W`, `D`]) : pressKeys([`S`, `D`]);
            break;
    }
}

const Minecraft = Client.getMinecraft();
let working = false;
let lookVelocity = 75

let lookAtBlock = (vector) => {
    if ((Minecraft.func_71410_x()).field_71462_r == null || (Minecraft.func_71410_x()).field_71462_r instanceof net.minecraft.client.gui.GuiIngameMenu || (Minecraft.func_71410_x()).field_71462_r instanceof net.minecraft.client.gui.GuiChat) {
        if (!working) {
            new Thread(() => {
                try {
                    working = true
                    let eyes = Player.getPlayer().func_174824_e(1)
                    let diffX = vector.field_72450_a - eyes.field_72450_a
                    let diffY = vector.field_72448_b - eyes.field_72448_b
                    let diffZ = vector.field_72449_c - eyes.field_72449_c
                    let dist = Math.sqrt(diffX * diffX + diffZ * diffZ)
                    let pitch = -Math.atan2(dist, diffY)
                    let yaw = Math.atan2(diffZ, diffX)
                    pitch = to180(((pitch * 180.0) / Math.PI + 90.0) * - 1.0 - Player.getPlayer().field_70125_A)
                    yaw = to180((yaw * 180.0) / Math.PI - 90.0 - Player.getPlayer().field_70177_z)
                    for (i = 0; i < lookVelocity; i++) {
                        Player.getPlayer().field_70177_z += yaw / lookVelocity
                        Player.getPlayer().field_70125_A += 0
                        Thread.sleep(1)
                    }
                    working = false
                } catch (e) {
                    return
                } 
            }).start()
        }
    } 
}

function to180(angle) {
    angle %= 360.0
    while (angle >= 180.0)
      angle -= 360.0
    while (angle < -180.0)
      angle += 360.0
    return angle
}

const distFormula = (x1, y1, z1, x2, y2, z2) => {
    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2);
}

const getSpeed = () => {
    const lastX = new Entity(Player.getPlayer()).getLastX();
    const lastY = new Entity(Player.getPlayer()).getLastY();
    const lastZ = new Entity(Player.getPlayer()).getLastZ();

    const currentX = Player.getX();
    const currentY = Player.getY();
    const currentZ = Player.getZ();

    return Math.round(20 * distFormula(lastX, lastY, lastZ, currentX, currentY, currentZ) * 10) / 10;
}

let closing = false;

function getCharges(lastGuiOpened) {
    const inv = getLowerContainer(lastGuiOpened);
    let dust = new Array(54).fill(false);
    let dirt = new Array(54).fill(false);
    let trea = new Array(54).fill(false);
    let dc = 0;
    let charges = 0;

        for (let i = 0; i < 54; i++) {
          let item = inv.func_70301_a(i);
          if (item === null) continue;
          if (getItemId(item) !== 'minecraft:stained_glass_pane') continue;
          let dmg = item.func_77960_j();
          dust[i] = dmg === 0;
          dirt[i] = dmg !== 0/* && dmg !== 5*/;
          trea[i] = dmg === 5;
          if (dust[i]) {
            d = item;
            dc++;
          } else if (dirt[i] && charges === -1) {
            const tag = item.func_77978_p().func_74775_l('display');
            const lore = tag.func_150295_c('Lore', 8);
            for (let i = 0; i < lore.func_74745_c(); i++) {
              let m = lore.func_150307_f(i).match(/^§7Chisel Charges Remaining: §.(\d+)$/);
              if (m) {
                charges = +m[1];
                break;
              }
            }
          }
    }
    if (charges === 0) {
        if(closing) return;
        closing = true;
        Client.scheduleTask(sleepPing/50, () => Client.currentGui.close());
        setTimeout(() => {
            const rightClickMethod = Client.getMinecraft().getClass().getDeclaredMethod(`func_147121_ag`, null)
            rightClickMethod.setAccessible(true);
            rightClickMethod.invoke(Client.getMinecraft(), null);
        
            setTimeout(() => {
                start.start()
                setTimeout(() => {
                    closing = false;
                }, 50)
            }, sleepPing*4+(Math.random()*10));
        }, sleepPing*4+(Math.random()*10));
        return;
    }
}
let lookable = false;

function startPath() {
    start.start() 
}

const walkOn = (pointsOfPath) => {
    const currX = Math.round(Player.getX() * 10) / 10;
    const currY = Math.round(Player.getY() * 10) / 10;
    const currZ = Math.round(Player.getZ() * 10) / 10;

    let previous = 10;
    let closest = null;

    let nextPoint = null;
    let nextNextPoint = null;

    pointsOfPath.forEach(point => {
        let currentDist = calculateDistance(currX, currY, currZ, point.x, point.y, point.z);
        if (currentDist <= previous) {
            previous = currentDist;
            closest = point;
            if(pointsOfPath.indexOf(point) !== pointsOfPath.length - 1) {
                nextPoint = pointsOfPath[pointsOfPath.indexOf(point) + 1];
            }

            if(pointsOfPath.indexOf(point) !== pointsOfPath.length - 2) {
                nextNextPoint = pointsOfPath[pointsOfPath.indexOf(point) + 2];
            }
        }
    });

    if(closest !== null && nextPoint !== null) {
        //stopAllMovement();
        if(closest === pointsOfPath[pointsOfPath.length - 1]) return true;
        const currYaw = Math.floor(Player.getYaw());
        
        if(!rotmode) {
            if(currX !== nextPoint.x && currX < nextPoint.x) getBind(`X`, `P`, currYaw);
            if(currX !== nextPoint.x && currX > nextPoint.x) getBind(`X`, `N`, currYaw);
            if(currZ !== nextPoint.z && currZ < nextPoint.z) getBind(`Z`, `P`, currYaw);
            if(currZ !== nextPoint.z && currZ > nextPoint.z) getBind(`Z`, `N`, currYaw);
        } else {
            if(lookable) return;
            lookable = true;
            started = true;
            forwardBind.setState(true);
            //sneakBind.setState(true)
            lookAtBlock(
                new net.minecraft.util.Vec3(
                    nextNextPoint.x,
                    nextNextPoint.y,
                    nextNextPoint.z
                )
            );
            setTimeout(() => {
                lookable = false
            }, 75);
        }

        if(closest.y + 1 === nextPoint.y || Math.round(Player.getY()) + 1.5 === nextPoint.y) jumpBind.setState(true);
        else jumpBind.setState(false);
        return false;
    }
}

const calculateDistance = (x1, y1, z1, x2, y2, z2) => {
    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2);
}

let prefix = `§l§4[§l§cBrennensModule§l§4] §r§f`
let sleepPing = 300;

class state {
    constructor(state) {
        this.state = state
    }

    getState() { return this.state }
    setState(newState) { this.state = newState }

    static OPENING = `OPENING`
    static MACROING = `MACROING`
    static RESTARTING = `RESTARTING`
    static DISABLED = `DISABLED`
    static BUYING = `BUYING`
    static FOUND = `FOUND`
    static NOT_FOUND = `NOT_FOUND`
}

let State = new state(state.DISABLED)

const click = (slot, shift, type) => {
    if(!Client.currentGui) return;
    if(!going) return false;
    const container = Player.getContainer();
    container.click(slot, shift, type); 
}

let invalidClicks = 0;

let clickedSlot53 = false

const click2 = (slot, shift, type) => {
    if(!Client.currentGui) return;
    if(!going) return false;
    if(slot == 53 && !clickedSlot53) clickedSlot53 = true;
    if(slot == 53 && clickedSlot53) {
        notSigma = true;
        found.stop();
        notFound.start();
        setTimeout(() => {
            clickedSlot53 = false;
        }, sleepPing*3);
        return;
    }
    const container = Player.getContainer();
    container.click(slot, shift, type);
    invalidClicks++ 
}

const start = new Thread(() => {
    if(
        Player.getContainer() == undefined || 
        !Player?.getContainer()?.getName()?.toLowerCase().includes(`fossil`) ||
        !Player?.getContainer()?.getItems()?.findIndex(i => i?.getName()?.toLowerCase()?.includes(`start excavator`))
    ) {
        if(!enabled) return;
        enabled = false;
        start.stop()
        ChatLib.chat(prefix + `Opening Gui.`);
        lookAtBlock(                
            new net.minecraft.util.Vec3(
                19,
                120+1.5,
                227
            )
        )
        return setTimeout(() => {
            const leftClickMethod = Client.getMinecraft().getClass().getDeclaredMethod(`func_147116_af`, null)
            leftClickMethod.setAccessible(true);
            leftClickMethod.invoke(Client.getMinecraft(), null)
            setTimeout(() => {
                start.start()
            }, 1500);
        }, 500);
    }
    setTimeout(() => {
        let scrapIndex;
        let chiselIndex;
    
        for (let i = Player.getContainer().getItems().length - 1; i > Player.getContainer().getItems().length - Player.getInventory().getItems().length; i--) {
            let item = Player.getContainer().getStackInSlot(i);
    
            if (item !== null && item?.getName()?.toLowerCase()?.includes(`suspicious scrap`)) {
                scrapIndex = i;
            }
    
            if (item !== null && item?.getName()?.toLowerCase()?.includes(` chisel`)) {
                chiselIndex = i;
            }
        }
    
        if(chiselIndex !== -1 &&  !scrapIndex || scrapIndex == -1) {
            ChatLib.chat(prefix + `Scrap Missing, Attempting to buy from bz.`);
            Client.currentGui.close()
            return setTimeout(() => bzbuy.start(), 500);
        }
        if(!chiselIndex || chiselIndex == -1 || !scrapIndex || scrapIndex == -1) {
            ChatLib.chat(prefix + `Scrap or Chisel Missing.`);
            going = false;
            return;
        }
    
    
        State.setState(state.OPENING)
    
        Thread.sleep(sleepPing+(Math.random()*10))
        click(scrapIndex, true, `MIDDLE`)
        Thread.sleep(sleepPing+(Math.random()*10))
        click(chiselIndex, true, `MIDDLE`)
        Thread.sleep(sleepPing+(Math.random()*10))
        click(31, false, `MIDDLE`)
        Thread.sleep(sleepPing*3+(Math.random()*10))
    
        State.setState(state.MACROING)
        excavate.start()        
    }, sleepPing*2+(Math.random()*10));
})

const testTest = [
    [4, 2],
    [5, 4],
    [3, 3],
    [5, 2],
    [3, 1],
    [7, 3],
    [1, 2],
    [3, 4]
]

const slots = [
    22,
    41,
    30,
    23,
    12,
    34,
    19,
    39
];

register(`step`,()=>{
  if(!Client.isInGui()) return;
  stopAllMovement()
})

const bzbuy = new Thread(() => {
    ChatLib.command(`bz suspicious scrap`)
    Thread.sleep(sleepPing+(Math.random()*10))
    if(!Client.isInGui()) return ChatLib.chat(prefix+`BZ Menu Not Opened After Running Command, No CookieBuff?`);
    Player.getContainer().click(11, false, `MIDDLE`)
    Thread.sleep(sleepPing+(Math.random()*10))
    Player.getContainer().click(10, false, `MIDDLE`)
    Thread.sleep(sleepPing+(Math.random()*10))
    Player.getContainer().click(12, false, `MIDDLE`)
    Thread.sleep(sleepPing+(Math.random()*10))
    Client.currentGui.close()
    setTimeout(() => {
        start.start()
    }, sleepPing*5+((Math.random()*10)));
})

const slotsClicked = []
const currFossil = []

const excavate = new Thread(() => {
    let fossilFound = false;

    slots.forEach((slot, index) => {
        if(State.getState() == state.FOUND) return;

        Thread.sleep(sleepPing/4+(Math.random()*10))
        click(slot, false, `MIDDLE`);
        Thread.sleep(sleepPing+(Math.random()*10))
        slotsClicked.push([testTest[index]])

        if (
            Player?.getContainer()?.getStackInSlot(slot)?.getName()?.toLowerCase()?.includes(`fossil`) && 
            !Player?.getContainer()?.getStackInSlot(slot)?.getName()?.toLowerCase()?.includes(`fossil dust`) &&
            !Player?.getContainer()?.getStackInSlot(slot)?.getName()?.toLowerCase()?.includes(`fossil the fish`)
        ) {
            currFossil.push(slot)
            State.setState(state.FOUND);
            fossilFound = true;
            found.start()
            return; 
        }

        if (index === slots.length - 1 && !fossilFound) {
            State.setState(state.NOT_FOUND);
            notFound.start()
        }
    });
});
const found = new Thread(() => {
    if(!Client.currentGui) return lastGuiOpened = false;
    notFound.stop()
    excavate.stop();
    start.stop();

    let slot = getNextSlotToClick(lastGuiOpened)

    if(slot == -1) return ChatLib.chat('test');
    else {
        if(notSigma) return notSigma = false;
        click2(slot, false, 'LEFT')
        Client.scheduleTask(4, () => {
            found.start();
            return;
        })
    }
})

const notFound = new Thread(() => {
    let slots = []

    Player.getContainer().getItems().forEach((item, index) => {
        if(!item) return;
        let fs = ``
        item?.getLore()?.forEach(s => fs += s)
        if(fs?.includes(`highlighted`)) {
            return slots.push(index)
        }
    })
    Player.getContainer().getItems().forEach((item, index) => {
        if(!item) return;
        if(slots.includes(index)) return;
        if(item?.getName()?.toLowerCase()?.includes(`dirt`) && slots.length!==15) {
            slots.push(index)
        } else return;
    })
    slots.forEach(index => {
        //ChatLib.chat(prefix + `Clicking Index: ${index}`)
        Thread.sleep(50)
        click(index, false, `MIDDLE`);
        Thread.sleep(sleepPing+(Math.random()*10));
    })

    getCharges(lastGuiOpened)
})

let going = false;

let oldMouseHelper = false;
let ungrabbed = false;

function ungrab() {
    ungrabbed = true;
    let mc = Client.getMinecraft();
    mc.field_71474_y.field_82881_y = false
    if(!oldMouseHelper) oldMouseHelper = mc.field_71417_B
    oldMouseHelper.func_74373_b()
    mc.field_71415_G = true
    mc.field_71417_B = new JavaAdapter(net.minecraft.util.MouseHelper, {
        "func_74374_c": function() {
        },
        "func_74372_a": function() {
        },
        "func_74373_b": function() {
        }
    })
}

function regrab() {
    if(!ungrabbed) return;
    ungrabbed = false;
    let mc = Client.getMinecraft();
    mc.field_71417_B = oldMouseHelper
    mc.field_71417_B.func_74372_a()
    oldMouseHelper = null
}

const key = new KeyBind(`Fossil Macro`, Keyboard.KEY_NONE, `BrennensModule - Macros`)
let enabled = false;

register('step', () => {
    if(Client.isInChat()) return;
    //ChatLib.chat(Keyboard.isKeyDown(key.getKeyCode()))
    if(key.isPressed()) {
        if(enabled) return;
        enabled = true;
        if(going) going=false; else going=true;
        if(going) {
            ChatLib.chat(prefix + `Starting...`)
            setTimeout(() => {
                const rightClickMethod = Client.getMinecraft().getClass().getDeclaredMethod(`func_147121_ag`, null)
                rightClickMethod.setAccessible(true);
                rightClickMethod.invoke(Client.getMinecraft(), null);
            
                setTimeout(() => {
                    //start.start()
                    start.start()
                }, sleepPing*3+(Math.random()*10));
            }, sleepPing+(Math.random()*10));
            
        } else { 
            ChatLib.chat(prefix + `Stopping...`) 

            regrab()
            start.stop();
            excavate.stop();
            notFound.stop();

            stopAllMovement()
        }
        setTimeout(() => {
            enabled = false;
        }, 500);
    }
})

register(`tick`, () => {
    if(going) {
        if(State.getState() !== state.RESTARTING) return;
        State.setState(state.DISABLED)
        Client.currentGui.close()
    }
})

register('command', () => {
    regrab()
}).setName('regrabmouse')

let infractions = 0;

register('tick', () => {
    if(autoWalk) {
        let walkTask = walkOn(currentUserPath);
        if(autoWalk && !walkTask && getSpeed() === 0) {
            infractions++;
            if(infractions >= 100) {
                jumpBind.setState(true);
                if(infractions >= 140) {
                    infractions = 0;
                }
            }
        }
        if(autoWalk && walkTask) {
            autoWalk = false;
            currentUserPath = [];
            ChatLib.simulateChat(`${prefix}arrived.`);
            enabled = true;
            stopAllMovement()
            lookAtBlock(
                new net.minecraft.util.Vec3(
                    19,
                    120+1.5,
                    227
                )
            )
            setTimeout(() => {
                start.start() 
            }, 1000);
        }
    }
});

register('renderWorld', () => {
    if(currentUserPath === undefined) return;
    if(currentUserPath.length <= 1) return;
    
    currentUserPath.forEach((point, index) => {
        if(point == currentUserPath[currentUserPath.length - 1]) {
            Tessellator.drawString(`§cFinal Point`, point.x, point.y + Player.asPlayerMP().getEyeHeight(), point.z, Renderer.WHITE, true, 0.02, false);
        } else {
            RenderLib.drawEspBox(point.x, point.y-1.5, point.z, 1, 1, 1, 0,0, 0.25, true);
        }
    });
});
